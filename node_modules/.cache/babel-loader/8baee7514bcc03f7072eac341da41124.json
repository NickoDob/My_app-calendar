{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { EditContext } from './EditContext';\n/**\r\n * Hook to read the edit controller props from the CreateContext.\r\n *\r\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\r\n *\r\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\r\n * to pass all the necessary props.\r\n *\r\n * The given props will take precedence over context values.\r\n *\r\n * @typedef {Object} EditControllerProps\r\n *\r\n * @returns {EditControllerProps} edit controller props\r\n *\r\n * @see useEditController for how it is filled\r\n *\r\n */\n\nexport var useEditContext = function useEditContext(props) {\n  // Can't find a way to specify the RecordType when EditContext is declared\n  // @ts-ignore\n  var context = useContext(EditContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractEditContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\r\n * Extract only the edit controller props\r\n *\r\n * @param {Object} props props passed to the useEditContext hook\r\n *\r\n * @returns {EditControllerProps} edit controller props\r\n */\n\nvar extractEditContextProps = function extractEditContextProps(_a) {\n  var basePath = _a.basePath,\n      data = _a.data,\n      record = _a.record,\n      defaultTitle = _a.defaultTitle,\n      onFailureRef = _a.onFailureRef,\n      onSuccessRef = _a.onSuccessRef,\n      transformRef = _a.transformRef,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      redirect = _a.redirect,\n      setOnFailure = _a.setOnFailure,\n      setOnSuccess = _a.setOnSuccess,\n      setTransform = _a.setTransform,\n      resource = _a.resource,\n      save = _a.save,\n      saving = _a.saving,\n      successMessage = _a.successMessage,\n      version = _a.version;\n  return {\n    basePath: basePath,\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle: defaultTitle,\n    onFailureRef: onFailureRef,\n    onSuccessRef: onSuccessRef,\n    transformRef: transformRef,\n    loaded: loaded,\n    loading: loading,\n    redirect: redirect,\n    setOnFailure: setOnFailure,\n    setOnSuccess: setOnSuccess,\n    setTransform: setTransform,\n    resource: resource,\n    save: save,\n    saving: saving,\n    successMessage: successMessage,\n    version: version\n  };\n};","map":null,"metadata":{},"sourceType":"module"}