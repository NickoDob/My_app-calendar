{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { getFieldLabelTranslationArgs, useReferenceArrayInputController, useInput, useTranslate, ResourceContextProvider, ReferenceArrayInputContextProvider, ListContextProvider } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport ReferenceError from './ReferenceError';\n/**\r\n * An Input component for fields containing a list of references to another resource.\r\n * Useful for 'hasMany' relationship.\r\n *\r\n * @example\r\n * The post object has many tags, so the post resource looks like:\r\n * {\r\n *    id: 1234,\r\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\r\n * }\r\n *\r\n * ReferenceArrayInput component fetches the current resources (using\r\n * `dataProvider.getMany()`) as well as possible resources (using\r\n * `dataProvider.getList()`) in the reference endpoint. It then\r\n * delegates rendering to a subcomponent, to which it passes the possible\r\n * choices as the `choices` attribute.\r\n *\r\n * Use it with a selector component as child, like `<SelectArrayInput>`\r\n * or <CheckboxGroupInput>.\r\n *\r\n * @example\r\n * export const PostEdit = (props) => (\r\n *     <Edit {...props}>\r\n *         <SimpleForm>\r\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\r\n *                 <SelectArrayInput optionText=\"name\" />\r\n *             </ReferenceArrayInput>\r\n *         </SimpleForm>\r\n *     </Edit>\r\n * );\r\n *\r\n * By default, restricts the possible values to 25. You can extend this limit\r\n * by setting the `perPage` prop.\r\n *\r\n * @example\r\n * <ReferenceArrayInput\r\n *      source=\"tag_ids\"\r\n *      reference=\"tags\"\r\n *      perPage={100}>\r\n *     <SelectArrayInput optionText=\"name\" />\r\n * </ReferenceArrayInput>\r\n *\r\n * By default, orders the possible values by id desc. You can change this order\r\n * by setting the `sort` prop (an object with `field` and `order` properties).\r\n *\r\n * @example\r\n * <ReferenceArrayInput\r\n *      source=\"tag_ids\"\r\n *      reference=\"tags\"\r\n *      sort={{ field: 'name', order: 'ASC' }}>\r\n *     <SelectArrayInput optionText=\"name\" />\r\n * </ReferenceArrayInput>\r\n *\r\n * Also, you can filter the query used to populate the possible values. Use the\r\n * `filter` prop for that.\r\n *\r\n * @example\r\n * <ReferenceArrayInput\r\n *      source=\"tag_ids\"\r\n *      reference=\"tags\"\r\n *      filter={{ is_public: true }}>\r\n *     <SelectArrayInput optionText=\"name\" />\r\n * </ReferenceArrayInput>\r\n *\r\n * The enclosed component may filter results. ReferenceArrayInput passes a\r\n * `setFilter` function as prop to its child component. It uses the value to\r\n * create a filter for the query - by default { q: [searchText] }. You can\r\n * customize the mapping searchText => searchQuery by setting a custom\r\n * `filterToQuery` function prop:\r\n *\r\n * @example\r\n * <ReferenceArrayInput\r\n *      source=\"tag_ids\"\r\n *      reference=\"tags\"\r\n *      filterToQuery={searchText => ({ name: searchText })}>\r\n *     <SelectArrayInput optionText=\"name\" />\r\n * </ReferenceArrayInput>\r\n */\n\nvar ReferenceArrayInput = function ReferenceArrayInput(_a) {\n  var children = _a.children,\n      idOverride = _a.id,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      validate = _a.validate,\n      parse = _a.parse,\n      format = _a.format,\n      props = __rest(_a, [\"children\", \"id\", \"onBlur\", \"onChange\", \"onFocus\", \"validate\", \"parse\", \"format\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayInput> only accepts a single child (like <Datagrid>)');\n  }\n\n  var _b = useInput(__assign({\n    id: idOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    source: props.source,\n    validate: validate,\n    parse: parse,\n    format: format\n  }, props)),\n      id = _b.id,\n      input = _b.input,\n      isRequired = _b.isRequired,\n      meta = _b.meta;\n\n  var controllerProps = useReferenceArrayInputController(__assign(__assign({}, props), {\n    input: input\n  }));\n  var listContext = useMemo(function () {\n    return __assign(__assign({}, controllerProps), {\n      // ReferenceArrayInput.setSort had a different signature than the one from ListContext.\n      // In order to not break backward compatibility, we added this temporary setSortForList in the\n      // ReferenceArrayInputContext\n      setSort: controllerProps.setSortForList\n    });\n  }, [controllerProps]);\n  var translate = useTranslate();\n  return React.createElement(ResourceContextProvider, {\n    value: props.reference\n  }, React.createElement(ReferenceArrayInputContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListContextProvider, {\n    value: listContext\n  }, React.createElement(ReferenceArrayInputView, __assign({\n    id: id,\n    input: input,\n    isRequired: isRequired,\n    meta: meta,\n    translate: translate,\n    children: children\n  }, props, {\n    choices: controllerProps.choices,\n    loaded: controllerProps.loaded,\n    loading: controllerProps.loading,\n    setFilter: controllerProps.setFilter,\n    setPagination: controllerProps.setPagination,\n    setSort: controllerProps.setSort\n  })))));\n};\n\nReferenceArrayInput.propTypes = {\n  allowEmpty: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterToQuery: PropTypes.func.isRequired,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceArrayInput.defaultProps = {\n  filter: {},\n  filterToQuery: function filterToQuery(searchText) {\n    return searchText ? {\n      q: searchText\n    } : {};\n  },\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  }\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      crudGetMany = _a.crudGetMany,\n      crudGetMatching = _a.crudGetMatching,\n      filterToQuery = _a.filterToQuery,\n      perPage = _a.perPage,\n      reference = _a.reference,\n      referenceSource = _a.referenceSource,\n      resource = _a.resource,\n      rest = __rest(_a, [\"basePath\", \"crudGetMany\", \"crudGetMatching\", \"filterToQuery\", \"perPage\", \"reference\", \"referenceSource\", \"resource\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nexport var ReferenceArrayInputView = function ReferenceArrayInputView(_a) {\n  var allowEmpty = _a.allowEmpty,\n      basePath = _a.basePath,\n      children = _a.children,\n      choices = _a.choices,\n      className = _a.className,\n      error = _a.error,\n      input = _a.input,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      source = _a.source,\n      translate = _a.translate,\n      warning = _a.warning,\n      rest = __rest(_a, [\"allowEmpty\", \"basePath\", \"children\", \"choices\", \"className\", \"error\", \"input\", \"loaded\", \"loading\", \"isRequired\", \"label\", \"meta\", \"onChange\", \"options\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"source\", \"translate\", \"warning\"]);\n\n  var translatedLabel = translate.apply(void 0, getFieldLabelTranslationArgs({\n    label: label,\n    resource: resource,\n    source: source\n  }));\n\n  if (error) {\n    return React.createElement(ReferenceError, {\n      label: translatedLabel,\n      error: error\n    });\n  }\n\n  return React.cloneElement(children, __assign(__assign({\n    allowEmpty: allowEmpty,\n    basePath: basePath ? basePath.replace(resource, reference) : \"/\" + reference,\n    choices: choices,\n    className: className,\n    error: error,\n    input: input,\n    isRequired: isRequired,\n    label: translatedLabel,\n    loaded: loaded,\n    loading: loading,\n    meta: __assign(__assign({}, meta), {\n      helperText: warning || false\n    }),\n    onChange: onChange,\n    options: options,\n    resource: reference,\n    setFilter: setFilter,\n    setPagination: setPagination,\n    setSort: setSort,\n    source: source,\n    translateChoice: false,\n    limitChoicesToValue: true\n  }, sanitizeRestProps(rest)), children.props));\n};\nReferenceArrayInputView.propTypes = {\n  allowEmpty: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  choices: PropTypes.array,\n  className: PropTypes.string,\n  error: PropTypes.string,\n  loading: PropTypes.bool,\n  input: PropTypes.object.isRequired,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  onChange: PropTypes.func,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  setFilter: PropTypes.func,\n  setPagination: PropTypes.func,\n  setSort: PropTypes.func,\n  source: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  warning: PropTypes.string\n};\nexport default ReferenceArrayInput;","map":null,"metadata":{},"sourceType":"module"}