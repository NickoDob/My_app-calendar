{"ast":null,"code":"import get from 'lodash/get';\nimport { linkToRecord } from '../../util';\n/**\r\n * Get the link toward the referenced resource\r\n *\r\n * @example\r\n *\r\n * const linkPath = getResourceLinkPath({\r\n *      basePath: '/comments',\r\n *      link: 'edit',\r\n *      reference: 'users',\r\n *      record: {\r\n *          userId: 7\r\n *      },\r\n *      resource: 'comments',\r\n *      source: 'userId',\r\n * }); // '/users/7'\r\n *\r\n * @param {Object} option\r\n * @param {string} option.basePath basepath to current resource\r\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\r\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\r\n * @param {string} option.reference The linked resource name\r\n * @param {Object} option.record The current resource record\r\n * @param {string} option.resource The current resource name\r\n * @param {string} option.source The key of the linked resource identifier\r\n *\r\n * @returns {string | false} The link to the reference record\r\n */\n\nvar getResourceLinkPath = function getResourceLinkPath(_a) {\n  var resource = _a.resource,\n      source = _a.source,\n      reference = _a.reference,\n      _b = _a.link,\n      link = _b === void 0 ? 'edit' : _b,\n      _c = _a.record,\n      record = _c === void 0 ? {\n    id: ''\n  } : _c,\n      _d = _a.basePath,\n      basePath = _d === void 0 ? '' : _d,\n      linkType = _a.linkType;\n\n  if (linkType !== undefined) {\n    console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\n  }\n\n  var sourceId = get(record, source);\n  var rootPath = basePath ? basePath.replace(resource, reference) : \"/\" + reference;\n  var linkTo = linkType !== undefined ? linkType : link; // Backward compatibility: keep linkType but with warning\n\n  return !linkTo ? false : typeof linkTo === 'function' ? linkTo(record, reference) : linkToRecord(rootPath, sourceId, linkTo);\n};\n\nexport default getResourceLinkPath;","map":null,"metadata":{},"sourceType":"module"}