{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { useCallback } from 'react';\nimport useGetList from '../../dataProvider/useGetList';\nimport { getStatusForInput as getDataStatus } from './referenceDataStatus';\nimport useTranslate from '../../i18n/useTranslate';\nimport useReference from '../useReference';\nimport usePaginationState from '../usePaginationState';\nimport { useSortState } from '..';\nimport useFilterState from '../useFilterState';\nimport useSelectionState from '../useSelectionState';\nimport { useResourceContext } from '../../core';\n\nvar defaultReferenceSource = function defaultReferenceSource(resource, source) {\n  return resource + \"@\" + source;\n};\n\nvar defaultFilter = {};\n/**\r\n * A hook for choosing a reference record. Useful for foreign keys.\r\n *\r\n * This hook fetches the possible values in the reference resource\r\n * (using `dataProvider.getList()`), it returns the possible choices\r\n * as the `choices` attribute.\r\n *\r\n * @example\r\n * const {\r\n *      choices, // the available reference resource\r\n * } = useReferenceInputController({\r\n *      input, // the input props\r\n *      resource: 'comments',\r\n *      reference: 'posts',\r\n *      source: 'post_id',\r\n * });\r\n *\r\n * The hook also allow to filter results. It returns a `setFilter`\r\n * function. It uses the value to create a filter\r\n * for the query - by default { q: [searchText] }. You can customize the mapping\r\n * searchText => searchQuery by setting a custom `filterToQuery` function option\r\n * You can also add a permanentFilter to further filter the result:\r\n *\r\n * @example\r\n * const {\r\n *      choices, // the available reference resource\r\n *      setFilter,\r\n * } = useReferenceInputController({\r\n *      input, // the input props\r\n *      resource: 'comments',\r\n *      reference: 'posts',\r\n *      source: 'post_id',\r\n *      permanentFilter: {\r\n *          author: 'john'\r\n *      },\r\n *      filterToQuery: searchText => ({ title: searchText })\r\n * });\r\n */\n\nexport var useReferenceInputController = function useReferenceInputController(props) {\n  var _a;\n\n  var basePath = props.basePath,\n      input = props.input,\n      _b = props.page,\n      initialPage = _b === void 0 ? 1 : _b,\n      _c = props.perPage,\n      initialPerPage = _c === void 0 ? 25 : _c,\n      _d = props.filter,\n      filter = _d === void 0 ? defaultFilter : _d,\n      reference = props.reference,\n      filterToQuery = props.filterToQuery,\n      sortOverride = props.sort;\n  var resource = useResourceContext(props);\n  var translate = useTranslate(); // pagination logic\n\n  var _e = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      pagination = _e.pagination,\n      setPagination = _e.setPagination,\n      page = _e.page,\n      setPage = _e.setPage,\n      perPage = _e.perPage,\n      setPerPage = _e.setPerPage; // sort logic\n\n\n  var _f = useSortState(sortOverride),\n      sort = _f.sort,\n      setSortObject = _f.setSort;\n\n  var setSort = useCallback(function (field, order) {\n    if (order === void 0) {\n      order = 'ASC';\n    }\n\n    setSortObject({\n      field: field,\n      order: order\n    });\n    setPage(1);\n  }, [setPage, setSortObject]); // filter logic\n\n  var _g = useFilterState({\n    permanentFilter: filter,\n    filterToQuery: filterToQuery\n  }),\n      filterValues = _g.filter,\n      setFilter = _g.setFilter;\n\n  var displayedFilters = []; // plus showFilter and hideFilter defined outside of the hook because\n  // they never change\n  // selection logic\n\n  var _h = useSelectionState(),\n      selectedIds = _h.selectedIds,\n      onSelect = _h.onSelect,\n      onToggleItem = _h.onToggleItem,\n      onUnselectItems = _h.onUnselectItems; // fetch possible values\n\n\n  var _j = useGetList(reference, pagination, sort, filterValues),\n      possibleValuesIds = _j.ids,\n      possibleValuesData = _j.data,\n      possibleValuesTotal = _j.total,\n      possibleValuesLoaded = _j.loaded,\n      possibleValuesLoading = _j.loading,\n      possibleValuesError = _j.error,\n      refetchGetList = _j.refetch; // fetch current value\n\n\n  var _k = useReference({\n    id: input.value,\n    reference: reference\n  }),\n      referenceRecord = _k.referenceRecord,\n      refetchReference = _k.refetch,\n      referenceError = _k.error,\n      referenceLoading = _k.loading,\n      referenceLoaded = _k.loaded; // add current value to possible sources\n\n\n  var finalIds, finalData, finalTotal;\n\n  if (!referenceRecord || possibleValuesIds.includes(input.value)) {\n    finalIds = possibleValuesIds;\n    finalData = possibleValuesData;\n    finalTotal = possibleValuesTotal;\n  } else {\n    finalIds = __spreadArrays([input.value], possibleValuesIds);\n    finalData = __assign((_a = {}, _a[input.value] = referenceRecord, _a), possibleValuesData);\n    finalTotal = possibleValuesTotal + 1;\n  } // overall status\n\n\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: Object.keys(finalData).map(function (id) {\n      return finalData[id];\n    }),\n    referenceRecord: referenceRecord,\n    translate: translate\n  });\n  var refetch = useCallback(function () {\n    refetchGetList();\n    refetchReference();\n  }, [refetchGetList, refetchReference]);\n  return {\n    // should match the ListContext shape\n    possibleValues: {\n      basePath: basePath,\n      data: finalData,\n      ids: finalIds,\n      total: finalTotal,\n      error: possibleValuesError,\n      loaded: possibleValuesLoaded,\n      loading: possibleValuesLoading,\n      hasCreate: false,\n      page: page,\n      setPage: setPage,\n      perPage: perPage,\n      setPerPage: setPerPage,\n      currentSort: sort,\n      setSort: setSort,\n      filterValues: filterValues,\n      displayedFilters: displayedFilters,\n      setFilters: setFilter,\n      showFilter: showFilter,\n      hideFilter: hideFilter,\n      selectedIds: selectedIds,\n      onSelect: onSelect,\n      onToggleItem: onToggleItem,\n      onUnselectItems: onUnselectItems,\n      refetch: refetch,\n      resource: resource\n    },\n    referenceRecord: {\n      data: referenceRecord,\n      loaded: referenceLoaded,\n      loading: referenceLoading,\n      error: referenceError,\n      refetch: refetchReference\n    },\n    dataStatus: {\n      error: dataStatus.error,\n      loading: dataStatus.waiting,\n      warning: dataStatus.warning\n    },\n    choices: finalIds.map(function (id) {\n      return finalData[id];\n    }),\n    // kept for backwards compatibility\n    // @deprecated to be removed in 4.0\n    error: dataStatus.error,\n    loading: possibleValuesLoading || referenceLoading,\n    loaded: possibleValuesLoaded && referenceLoaded,\n    filter: filterValues,\n    refetch: refetch,\n    setFilter: setFilter,\n    pagination: pagination,\n    setPagination: setPagination,\n    sort: sort,\n    setSort: setSortObject,\n    warning: dataStatus.warning\n  };\n};\n\nvar hideFilter = function hideFilter() {};\n\nvar showFilter = function showFilter() {};","map":null,"metadata":{},"sourceType":"module"}