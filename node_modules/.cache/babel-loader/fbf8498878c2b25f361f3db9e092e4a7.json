{"ast":null,"code":"import isValid from 'date-fns/is_valid';\nimport parseDate from 'date-fns/parse';\nexport var isNumeric = function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n};\nexport var valuesAreNumeric = function valuesAreNumeric(values) {\n  return values.every(isNumeric);\n};\nexport var isInteger = function isInteger(value) {\n  return Number.isInteger(value) || !isNaN(parseInt(value));\n};\nexport var valuesAreInteger = function valuesAreInteger(values) {\n  return values.every(isInteger);\n};\nexport var isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\nexport var valuesAreBoolean = function valuesAreBoolean(values) {\n  return values.every(isBoolean);\n};\nexport var isBooleanString = function isBooleanString(value) {\n  return ['true', 'false'].includes(value.toString().toLowerCase());\n};\nexport var valuesAreBooleanString = function valuesAreBooleanString(values) {\n  return values.every(isBooleanString);\n};\nexport var isString = function isString(value) {\n  return typeof value === 'string';\n};\nexport var valuesAreString = function valuesAreString(values) {\n  return values.every(isString);\n};\nvar HtmlRegexp = /<([A-Z][A-Z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/i;\nexport var isHtml = function isHtml(value) {\n  return !value || HtmlRegexp.test(value);\n};\nexport var valuesAreHtml = function valuesAreHtml(values) {\n  return values.every(isHtml);\n};\nvar UrlRegexp = /http(s*):\\/\\/.*/i;\nexport var isUrl = function isUrl(value) {\n  return !value || UrlRegexp.test(value);\n};\nexport var valuesAreUrl = function valuesAreUrl(values) {\n  return values.every(isUrl);\n};\nvar ImageUrlRegexp = /http(s*):\\/\\/.*\\.(jpeg|jpg|jfif|pjpeg|pjp|png|svg|gif|webp|apng|bmp|ico|cur|tif|tiff)/i;\nexport var isImageUrl = function isImageUrl(value) {\n  return !value || ImageUrlRegexp.test(value);\n};\nexport var valuesAreImageUrl = function valuesAreImageUrl(values) {\n  return values.every(isImageUrl);\n}; // This is a very simple regex to find emails\n// It it NOT meant to validate emails as the spec is way more complicated but is\n// enough for our inference needs\n\nvar EmailRegexp = /@{1}/;\nexport var isEmail = function isEmail(value) {\n  return !value || EmailRegexp.test(value);\n};\nexport var valuesAreEmail = function valuesAreEmail(values) {\n  return values.every(isEmail);\n};\nexport var isArray = function isArray(value) {\n  return Array.isArray(value);\n};\nexport var valuesAreArray = function valuesAreArray(values) {\n  return values.every(isArray);\n};\nexport var isDate = function isDate(value) {\n  return !value || value instanceof Date;\n};\nexport var valuesAreDate = function valuesAreDate(values) {\n  return values.every(isDate);\n};\nexport var isDateString = function isDateString(value) {\n  return !value || typeof value === 'string' && isValid(parseDate(value));\n};\nexport var valuesAreDateString = function valuesAreDateString(values) {\n  return values.every(isDateString);\n};\nexport var isObject = function isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n};\nexport var valuesAreObject = function valuesAreObject(values) {\n  return values.every(isObject);\n};","map":null,"metadata":{},"sourceType":"module"}