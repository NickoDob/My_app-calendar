{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@material-ui/icons/Update';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useUpdateMany, useRefresh, useNotify, useUnselectAll, CRUD_UPDATE_MANY, useResourceContext, useListContext } from 'ra-core';\nimport Button from './Button';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    updateButton: {\n      color: theme.palette.error.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  };\n}, {\n  name: 'RaBulkUpdateWithUndoButton'\n});\n\nvar BulkUpdateWithUndoButton = function BulkUpdateWithUndoButton(props) {\n  var selectedIds = useListContext(props).selectedIds;\n  var classes = useStyles(props);\n  var notify = useNotify();\n  var unselectAll = useUnselectAll();\n  var refresh = useRefresh();\n  var resource = useResourceContext(props);\n\n  var basePath = props.basePath,\n      classesOverride = props.classes,\n      data = props.data,\n      icon = props.icon,\n      label = props.label,\n      onClick = props.onClick,\n      _a = props.onSuccess,\n      onSuccess = _a === void 0 ? function () {\n    notify('ra.notification.updated', 'info', {\n      smart_count: selectedIds.length\n    }, true);\n    unselectAll(resource);\n    refresh();\n  } : _a,\n      _b = props.onFailure,\n      onFailure = _b === void 0 ? function (error) {\n    return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n      _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n    });\n  } : _b,\n      rest = __rest(props, [\"basePath\", \"classes\", \"data\", \"icon\", \"label\", \"onClick\", \"onSuccess\", \"onFailure\"]);\n\n  var _c = useUpdateMany(resource, selectedIds, data, {\n    action: CRUD_UPDATE_MANY,\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    undoable: true\n  }),\n      updateMany = _c[0],\n      loading = _c[1].loading;\n\n  var handleClick = function handleClick(e) {\n    updateMany();\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label,\n    className: classes.updateButton,\n    disabled: loading\n  }, sanitizeRestProps(rest)), icon);\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      classes = _a.classes,\n      filterValues = _a.filterValues,\n      label = _a.label,\n      selectedIds = _a.selectedIds,\n      onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      rest = __rest(_a, [\"basePath\", \"classes\", \"filterValues\", \"label\", \"selectedIds\", \"onSuccess\", \"onFailure\"]);\n\n  return rest;\n};\n\nBulkUpdateWithUndoButton.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired\n};\nBulkUpdateWithUndoButton.defaultProps = {\n  label: 'ra.action.update',\n  icon: React.createElement(ActionUpdate, null)\n};\nexport default BulkUpdateWithUndoButton;","map":null,"metadata":{},"sourceType":"module"}