{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport ListContext from './ListContext';\n/**\r\n * Hook to read the list controller props from the ListContext.\r\n *\r\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\r\n * or <ListBase>).\r\n *\r\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\r\n * to pass all the necessary props (see the list below).\r\n *\r\n * The given props will take precedence over context values.\r\n *\r\n * @typedef {Object} ListControllerProps\r\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\r\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g. [123, 456, ...]\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {boolean}  loaded boolean that is false until the data is available\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\r\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\r\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\r\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\r\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\r\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\r\n * @prop {string}   basePath deduced from the location, useful for action buttons\r\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @returns {ListControllerProps} list controller props\r\n *\r\n * @see useListController for how it is filled\r\n *\r\n * @example // custom list view\r\n *\r\n * import { useListContext } from 'react-admin';\r\n *\r\n * const MyList = () => {\r\n *     const { data, ids, loaded } = useListContext();\r\n *     if (!loaded) {\r\n *         return <>Loading...</>;\r\n *     }\r\n *     const records = ids.map(id => data[id]);\r\n *     return (\r\n *         <ul>\r\n *             {records.map(record => (\r\n *                 <li key={record.id}>{record.name}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n *\r\n * @example // custom pagination\r\n *\r\n * import { useListContext } from 'react-admin';\r\n * import { Button, Toolbar } from '@material-ui/core';\r\n * import ChevronLeft from '@material-ui/icons/ChevronLeft';\r\n * import ChevronRight from '@material-ui/icons/ChevronRight';\r\n *\r\n * const PrevNextPagination = () => {\r\n *     const { page, perPage, total, setPage } = useListContext();\r\n *     const nbPages = Math.ceil(total / perPage) || 1;\r\n *     return (\r\n *         nbPages > 1 &&\r\n *             <Toolbar>\r\n *                 {page > 1 &&\r\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\r\n *                         <ChevronLeft />\r\n *                         Prev\r\n *                     </Button>\r\n *                 }\r\n *                 {page !== nbPages &&\r\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\r\n *                         Next\r\n *                         <ChevronRight />\r\n *                     </Button>\r\n *                 }\r\n *             </Toolbar>\r\n *     );\r\n * }\r\n */\n\nvar useListContext = function useListContext(props) {\n  var context = useContext(ListContext); // Props take precedence over the context\n  // @ts-ignore\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n  }, [context, props]);\n};\n\nexport default useListContext;\n/**\r\n * Extract only the list controller props\r\n *\r\n * @param {Object} props Props passed to the useListContext hook\r\n *\r\n * @returns {ListControllerProps} List controller props\r\n */\n\nvar extractListContextProps = function extractListContextProps(_a) {\n  var basePath = _a.basePath,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      hasCreate = _a.hasCreate,\n      hideFilter = _a.hideFilter,\n      ids = _a.ids,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      onSelect = _a.onSelect,\n      onToggleItem = _a.onToggleItem,\n      onUnselectItems = _a.onUnselectItems,\n      page = _a.page,\n      perPage = _a.perPage,\n      refetch = _a.refetch,\n      resource = _a.resource,\n      selectedIds = _a.selectedIds,\n      setFilters = _a.setFilters,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      showFilter = _a.showFilter,\n      total = _a.total;\n  return {\n    basePath: basePath,\n    currentSort: currentSort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hasCreate: hasCreate,\n    hideFilter: hideFilter,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":null,"metadata":{},"sourceType":"module"}