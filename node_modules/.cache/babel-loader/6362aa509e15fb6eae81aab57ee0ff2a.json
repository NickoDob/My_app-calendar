{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowContextProvider, ResourceContextProvider, useCheckMinimumRequiredProps, useShowController } from 'ra-core';\nimport { ShowView } from './ShowView';\n/**\n * Page component for the Show view\n *\n * The `<Show>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleShowLayout>`),\n * to which it passes the `record` as prop.\n *\n * The <Show> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = (props) => (\n *     <Show {...props}>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n * export default App;\n */\n\nexport var Show = function Show(props) {\n  useCheckMinimumRequiredProps('Show', ['children'], props);\n  var controllerProps = useShowController(props);\n  var body = React.createElement(ShowContextProvider, {\n    value: controllerProps\n  }, React.createElement(ShowView, __assign({}, props, controllerProps)));\n  return props.resource ? // support resource override via props\n  React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, body) : body;\n};\nShow.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  aside: PropTypes.element,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  id: PropTypes.any.isRequired,\n  resource: PropTypes.string,\n  title: PropTypes.node\n};","map":null,"metadata":{},"sourceType":"module"}