{"ast":null,"code":"import * as React from 'react';\nimport { Children, cloneElement, isValidElement, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslate, useGetIdentity } from 'ra-core';\nimport { Tooltip, IconButton, Menu, Button, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nvar defaultIcon = React.createElement(AccountCircle, null);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    user: {},\n    userButton: {\n      textTransform: 'none'\n    },\n    avatar: {\n      width: theme.spacing(4),\n      height: theme.spacing(4)\n    }\n  };\n}, {\n  name: 'RaUserMenu'\n});\nvar AnchorOrigin = {\n  vertical: 'bottom',\n  horizontal: 'right'\n};\nvar TransformOrigin = {\n  vertical: 'top',\n  horizontal: 'right'\n};\n\nvar UserMenu = function UserMenu(props) {\n  var _a = useState(null),\n      anchorEl = _a[0],\n      setAnchorEl = _a[1];\n\n  var translate = useTranslate();\n\n  var _b = useGetIdentity(),\n      loaded = _b.loaded,\n      identity = _b.identity;\n\n  var classes = useStyles(props);\n  var children = props.children,\n      _c = props.label,\n      label = _c === void 0 ? 'ra.auth.user_menu' : _c,\n      _d = props.icon,\n      icon = _d === void 0 ? defaultIcon : _d,\n      logout = props.logout;\n  if (!logout && !children) return null;\n  var open = Boolean(anchorEl);\n\n  var handleMenu = function handleMenu(event) {\n    return setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    return setAnchorEl(null);\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.user\n  }, loaded && (identity === null || identity === void 0 ? void 0 : identity.fullName) ? React.createElement(Button, {\n    \"aria-label\": label && translate(label, {\n      _: label\n    }),\n    className: classes.userButton,\n    color: \"inherit\",\n    startIcon: identity.avatar ? React.createElement(Avatar, {\n      className: classes.avatar,\n      src: identity.avatar,\n      alt: identity.fullName\n    }) : icon,\n    onClick: handleMenu\n  }, identity.fullName) : React.createElement(Tooltip, {\n    title: label && translate(label, {\n      _: label\n    })\n  }, React.createElement(IconButton, {\n    \"aria-label\": label && translate(label, {\n      _: label\n    }),\n    \"aria-owns\": open ? 'menu-appbar' : null,\n    \"aria-haspopup\": true,\n    color: \"inherit\",\n    onClick: handleMenu\n  }, icon)), React.createElement(Menu, {\n    id: \"menu-appbar\",\n    disableScrollLock: true,\n    anchorEl: anchorEl,\n    anchorOrigin: AnchorOrigin,\n    transformOrigin: TransformOrigin,\n    // Make sure the menu is display under the button and not over the appbar\n    // See https://material-ui.com/components/menus/#customized-menus\n    getContentAnchorEl: null,\n    open: open,\n    onClose: handleClose\n  }, Children.map(children, function (menuItem) {\n    return isValidElement(menuItem) ? cloneElement(menuItem, {\n      onClick: handleClose\n    }) : null;\n  }), logout));\n};\n\nUserMenu.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  label: PropTypes.string,\n  logout: PropTypes.element,\n  icon: PropTypes.node\n};\nexport default UserMenu;","map":null,"metadata":{},"sourceType":"module"}