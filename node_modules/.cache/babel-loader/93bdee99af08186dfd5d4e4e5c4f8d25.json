{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { isValidElement, Children, cloneElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useVersion } from 'ra-core';\nimport { Checkbox, Table, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport classnames from 'classnames';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport useDatagridStyles from './useDatagridStyles';\nimport DatagridContextProvider from './DatagridContextProvider';\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n *\n * @example Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const currentSort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { ids, data, total, loaded } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         currentSort\n *     );\n *\n *     return (\n *         <Datagrid\n *             basePath=\"\"\n *             currentSort={currentSort}\n *             data={data}\n *             ids={ids}\n *             selectedIds={[]}\n *             loaded={loaded}\n *             total={total}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\n\nvar Datagrid = React.forwardRef(function (props, ref) {\n  var classes = useDatagridStyles(props);\n\n  var _a = props.optimized,\n      optimized = _a === void 0 ? false : _a,\n      _b = props.body,\n      body = _b === void 0 ? optimized ? React.createElement(PureDatagridBody, null) : React.createElement(DatagridBody, null) : _b,\n      children = props.children,\n      classesOverride = props.classes,\n      className = props.className,\n      empty = props.empty,\n      expand = props.expand,\n      _c = props.hasBulkActions,\n      hasBulkActions = _c === void 0 ? false : _c,\n      hover = props.hover,\n      isRowSelectable = props.isRowSelectable,\n      isRowExpandable = props.isRowExpandable,\n      resource = props.resource,\n      rowClick = props.rowClick,\n      rowStyle = props.rowStyle,\n      _d = props.size,\n      size = _d === void 0 ? 'small' : _d,\n      rest = __rest(props, [\"optimized\", \"body\", \"children\", \"classes\", \"className\", \"empty\", \"expand\", \"hasBulkActions\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\"]);\n\n  var _e = useListContext(props),\n      basePath = _e.basePath,\n      currentSort = _e.currentSort,\n      data = _e.data,\n      ids = _e.ids,\n      loaded = _e.loaded,\n      onSelect = _e.onSelect,\n      onToggleItem = _e.onToggleItem,\n      selectedIds = _e.selectedIds,\n      setSort = _e.setSort,\n      total = _e.total;\n\n  var version = useVersion();\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable\n    };\n  }, [isRowExpandable]);\n  var updateSortCallback = useCallback(function (event) {\n    event.stopPropagation();\n    var newField = event.currentTarget.dataset.field;\n    var newOrder = currentSort.field === newField ? currentSort.order === 'ASC' ? 'DESC' : 'ASC' : event.currentTarget.dataset.order;\n    setSort(newField, newOrder);\n  }, [currentSort.field, currentSort.order, setSort]);\n  var updateSort = setSort ? updateSortCallback : null;\n  var handleSelectAll = useCallback(function (event) {\n    if (event.target.checked) {\n      var all_1 = ids.concat(selectedIds.filter(function (id) {\n        return !ids.includes(id);\n      }));\n      onSelect(isRowSelectable ? all_1.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : all_1);\n    } else {\n      onSelect([]);\n    }\n  }, [data, ids, onSelect, isRowSelectable, selectedIds]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleToggleItem = useCallback(function (id, event) {\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, ids, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n  /**\n   * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n   * if loaded is true, the data for the list has at least been returned once by the dataProvider\n   * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n   */\n\n  if (loaded === false) {\n    return React.createElement(DatagridLoading, {\n      classes: classes,\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing or a custom empty component.\n   */\n\n\n  if (loaded && (ids.length === 0 || total === 0)) {\n    if (empty) {\n      return empty;\n    }\n\n    return null;\n  }\n\n  var all = isRowSelectable ? ids.filter(function (id) {\n    return isRowSelectable(data[id]);\n  }) : ids;\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: classnames(classes.table, className),\n    size: size\n  }, sanitizeListRestProps(rest)), React.createElement(TableHead, {\n    className: classes.thead\n  }, React.createElement(TableRow, {\n    className: classnames(classes.row, classes.headerRow)\n  }, expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: classnames(classes.headerCell, classes.expandHeader)\n  }), hasBulkActions && selectedIds && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.headerCell\n  }, React.createElement(Checkbox, {\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && all.length > 0 && all.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: classes.headerCell,\n      currentSort: currentSort,\n      field: field,\n      isSorting: currentSort.field === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      resource: resource,\n      updateSort: updateSort\n    }) : null;\n  }))), cloneElement(body, {\n    basePath: basePath,\n    className: classes.tbody,\n    classes: classes,\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    ids: ids,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable,\n    version: version\n  }, children)));\n});\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  body: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool,\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any),\n  loading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func\n};\nDatagrid.displayName = 'Datagrid';\nexport default Datagrid;","map":null,"metadata":{},"sourceType":"module"}