{"ast":null,"code":"import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail } from './assertions';\nexport var InferenceTypes = ['array', 'boolean', 'date', 'email', 'id', 'image', 'number', 'reference', 'referenceChild', 'referenceArray', 'referenceArrayChild', 'richText', 'string', 'url', 'object'];\n/**\r\n * Guesses an element type based on an array of values\r\n *\r\n * @example\r\n *     inferElementFromValues(\r\n *         'address',\r\n *         ['2 Baker Street', '1 Downing street'],\r\n *     );\r\n *     // { type: 'string', props: { source: 'address' } }\r\n *\r\n * @param {string} name Property name, e.g. 'date_of_birth'\r\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\r\n */\n\nexport var inferTypeFromValues = function inferTypeFromValues(name, values) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (name === 'id') {\n    return {\n      type: 'id',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === '_id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 2) === 'Id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 2))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 4) === '_ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 4))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === 'Ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (values.length === 0) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    } // FIXME introspect further using name\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0])) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return {\n        type: 'array',\n        props: {\n          source: name\n        },\n        children: Object.keys(leafValues_1).map(function (leafName) {\n          return inferTypeFromValues(leafName, leafValues_1[leafName]);\n        })\n      };\n    } // FIXME introspect further\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreBoolean(values)) {\n    return {\n      type: 'boolean',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreDate(values)) {\n    return {\n      type: 'date',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' || valuesAreEmail(values)) {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url' || valuesAreUrl(values)) {\n      if (valuesAreImageUrl(values)) {\n        return {\n          type: 'image',\n          props: {\n            source: name\n          }\n        };\n      }\n\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreDateString(values)) {\n      return {\n        type: 'date',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreHtml(values)) {\n      return {\n        type: 'richText',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n      return {\n        type: 'number',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n    return {\n      type: 'number',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreObject(values)) {\n    /// Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n  }\n\n  return {\n    type: 'string',\n    props: {\n      source: name\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}