{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\nimport useVersion from '../controller/useVersion';\n/**\r\n * Call the data provider on mount\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false, refetch }\r\n * - success: { data: [data from response], total: [total from response], loading: false, loaded: true, refetch }\r\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\r\n *\r\n * @param {Object} query\r\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\r\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\r\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\r\n * @param {Object} options\r\n * @param {string} options.action Redux action type\r\n * @param {boolean} options.enabled Flag to conditionally run the query. True by default. If it's false, the query will not run\r\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\r\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\r\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, error, loading, loaded, refetch }.\r\n *\r\n * @example\r\n *\r\n * import { useQuery } from 'react-admin';\r\n *\r\n * const UserProfile = ({ record }) => {\r\n *     const { data, loading, error } = useQuery({\r\n *         type: 'getOne',\r\n *         resource: 'users',\r\n *         payload: { id: record.id }\r\n *     });\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <div>User {data.username}</div>;\r\n * };\r\n *\r\n * @example\r\n *\r\n * import { useQuery } from 'react-admin';\r\n *\r\n * const payload = {\r\n *    pagination: { page: 1, perPage: 10 },\r\n *    sort: { field: 'username', order: 'ASC' },\r\n * };\r\n * const UserList = () => {\r\n *     const { data, total, loading, error } = useQuery({\r\n *         type: 'getList',\r\n *         resource: 'users',\r\n *         payload\r\n *     });\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return (\r\n *         <div>\r\n *             <p>Total users: {total}</p>\r\n *             <ul>\r\n *                 {data.map(user => <li key={user.username}>{user.username}</li>)}\r\n *             </ul>\r\n *         </div>\r\n *     );\r\n * };\r\n */\n\nexport var useQuery = function useQuery(query, options) {\n  if (options === void 0) {\n    options = {\n      onSuccess: undefined\n    };\n  }\n\n  var type = query.type,\n      resource = query.resource,\n      payload = query.payload;\n\n  var withDeclarativeSideEffectsSupport = options.withDeclarativeSideEffectsSupport,\n      otherOptions = __rest(options, [\"withDeclarativeSideEffectsSupport\"]);\n\n  var version = useVersion(); // used to allow force reload\n  // used to force a refetch without relying on version\n  // which might trigger other queries as well\n\n  var _a = useState(0),\n      innerVersion = _a[0],\n      setInnerVersion = _a[1];\n\n  var refetch = useCallback(function () {\n    setInnerVersion(function (prevInnerVersion) {\n      return prevInnerVersion + 1;\n    });\n  }, []);\n  var requestSignature = JSON.stringify({\n    query: query,\n    options: otherOptions,\n    version: version,\n    innerVersion: innerVersion\n  });\n\n  var _b = useSafeSetState({\n    data: undefined,\n    error: null,\n    total: null,\n    loading: true,\n    loaded: false,\n    refetch: refetch\n  }),\n      state = _b[0],\n      setState = _b[1];\n\n  var dataProvider = useDataProvider();\n  var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  useEffect(function () {\n    /**\r\n     * Support legacy side effects, e.g. { onSuccess: { refresh: true, unSelectAll: true }}\r\n     *\r\n     * @deprecated to be removed in 4.0\r\n     */\n    var finalDataProvider = withDeclarativeSideEffectsSupport ? dataProviderWithDeclarativeSideEffects : dataProvider;\n    setState(function (prevState) {\n      return __assign(__assign({}, prevState), {\n        loading: true\n      });\n    });\n    finalDataProvider[type].apply(finalDataProvider, typeof resource !== 'undefined' ? [resource, payload, otherOptions] : [payload, otherOptions]).then(function (_a) {\n      var data = _a.data,\n          total = _a.total;\n      setState({\n        data: data,\n        total: total,\n        loading: false,\n        loaded: true,\n        refetch: refetch\n      });\n    }).catch(function (error) {\n      setState({\n        error: error,\n        loading: false,\n        loaded: false,\n        refetch: refetch\n      });\n    });\n  }, [requestSignature, dataProvider, dataProviderWithDeclarativeSideEffects, setState]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return state;\n};","map":null,"metadata":{},"sourceType":"module"}