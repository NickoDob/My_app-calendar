{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport get from 'lodash/get';\nimport { useGetMany } from '../../dataProvider';\nimport { useNotify } from '../../sideEffect';\nimport { useResourceContext } from '../../core';\nimport { useList } from '../useList';\nvar emptyArray = [];\nvar defaultFilter = {};\nvar defaultSort = {\n  field: null,\n  order: null\n};\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { ids, data, error, loaded, loading, referenceBasePath } = useReferenceArrayFieldController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {string} props.basePath basepath to current resource\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @returns {ReferenceArrayProps} The reference props\n */\n\nvar useReferenceArrayFieldController = function useReferenceArrayFieldController(props) {\n  var basePath = props.basePath,\n      _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      _b = props.page,\n      page = _b === void 0 ? 1 : _b,\n      _c = props.perPage,\n      perPage = _c === void 0 ? 1000 : _c,\n      record = props.record,\n      reference = props.reference,\n      _d = props.sort,\n      sort = _d === void 0 ? defaultSort : _d,\n      source = props.source;\n  var resource = useResourceContext(props);\n  var notify = useNotify();\n  var ids = get(record, source) || emptyArray;\n\n  var _e = useGetMany(reference, ids, {\n    onFailure: function onFailure(error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n        _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n      });\n    }\n  }),\n      data = _e.data,\n      error = _e.error,\n      loading = _e.loading,\n      loaded = _e.loaded,\n      refetch = _e.refetch;\n\n  var listProps = useList({\n    data: data,\n    error: error,\n    filter: filter,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    page: page,\n    perPage: perPage,\n    sort: sort\n  });\n  return __assign(__assign({\n    basePath: basePath ? basePath.replace(resource, reference) : \"/\" + reference\n  }, listProps), {\n    defaultTitle: null,\n    hasCreate: false,\n    refetch: refetch,\n    resource: reference\n  });\n};\n\nexport default useReferenceArrayFieldController;","map":null,"metadata":{},"sourceType":"module"}