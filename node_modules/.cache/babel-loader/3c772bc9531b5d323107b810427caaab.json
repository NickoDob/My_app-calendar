{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\n\nvar useLogout = function useLogout() {\n  var authProvider = useAuthProvider();\n  var dispatch = useDispatch();\n  /**\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used useLocation to get it, the logout function\n   * would be rebuilt each time the user changes location. Consequently, that\n   * would force a rerender of all components using this hook upon navigation\n   * (CoreAdminRouter for example).\n   *\n   * To avoid that, we read the location directly from history which is mutable.\n   * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n   */\n\n  var history = useHistory();\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      dispatch(clearState());\n\n      if (redirectToFromProvider === false) {\n        // do not redirect\n        return;\n      } // redirectTo can contain a query string, e.g. '/login?foo=bar'\n      // we must split the redirectTo to pass a structured location to history.push()\n\n\n      var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n\n      if (redirectToCurrentLocationAfterLogin && history.location && history.location.pathname) {\n        newLocation.state = {\n          nextPathname: history.location.pathname,\n          nextSearch: history.location.search\n        };\n      }\n\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n\n      history.push(newLocation);\n      return redirectToFromProvider;\n    });\n  }, [authProvider, history, dispatch]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    history.push({\n      pathname: defaultAuthParams.loginUrl,\n      state: {\n        nextPathname: history.location && history.location.pathname\n      }\n    });\n    dispatch(clearState());\n    return Promise.resolve();\n  }, [dispatch, history]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\n\nexport default useLogout;","map":null,"metadata":{},"sourceType":"module"}