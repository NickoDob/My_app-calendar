{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContentSave from '@material-ui/icons/Save';\nimport classnames from 'classnames';\nimport { useTranslate, useNotify, useSaveContext, useFormContext } from 'ra-core';\nimport { sanitizeButtonRestProps } from './Button';\n/**\r\n * Submit button for resource forms (Edit and Create).\r\n *\r\n * @typedef {Object} Props the props you can use (other props are injected by the <Toolbar>)\r\n * @prop {string} className\r\n * @prop {string} label Button label. Defaults to 'ra.action.save', translated.\r\n * @prop {boolean} disabled Disable the button.\r\n * @prop {string} variant Material-ui variant for the button. Defaults to 'contained'.\r\n * @prop {ReactElement} icon\r\n * @prop {string|boolean} redirect Override of the default redirect in case of success. Can be 'list', 'show', 'edit' (for create views), or false (to stay on the creation form).\r\n * @prop {function} onSave (deprecated)\r\n * @prop {function} onSuccess Callback to execute instead of the default success side effects. Receives the dataProvider response as argument.\r\n * @prop {function} onFailure Callback to execute instead of the default error side effects. Receives the dataProvider error response as argument.\r\n * @prop {function} transform Callback to execute before calling the dataProvider. Receives the data from the form, must return that transformed data. Can be asynchronous (and return a Promise)\r\n *\r\n * @param {Props} props\r\n *\r\n * @example // with custom redirection\r\n *\r\n * <SaveButton label=\"post.action.save_and_edit\" redirect=\"edit\" />\r\n *\r\n * @example // with no redirection\r\n *\r\n * <SaveButton label=\"post.action.save_and_add\" redirect={false} />\r\n *\r\n * @example // with custom success side effect\r\n *\r\n * const MySaveButton = props => {\r\n *     const notify = useNotify();\r\n *     const redirect = useRedirect();\r\n *     const onSuccess = (response) => {\r\n *         notify(`Post \"${response.data.title}\" saved!`);\r\n *         redirect('/posts');\r\n *     };\r\n *     return <SaveButton {...props} onSuccess={onSuccess} />;\r\n * }\r\n */\n\nvar SaveButton = function SaveButton(props) {\n  var className = props.className,\n      classesOverride = props.classes,\n      invalid = props.invalid,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.action.save' : _a,\n      disabled = props.disabled,\n      redirect = props.redirect,\n      saving = props.saving,\n      submitOnEnter = props.submitOnEnter,\n      _b = props.variant,\n      variant = _b === void 0 ? 'contained' : _b,\n      _c = props.icon,\n      icon = _c === void 0 ? defaultIcon : _c,\n      onClick = props.onClick,\n      handleSubmitWithRedirect = props.handleSubmitWithRedirect,\n      onSave = props.onSave,\n      onSuccess = props.onSuccess,\n      onFailure = props.onFailure,\n      transform = props.transform,\n      rest = __rest(props, [\"className\", \"classes\", \"invalid\", \"label\", \"disabled\", \"redirect\", \"saving\", \"submitOnEnter\", \"variant\", \"icon\", \"onClick\", \"handleSubmitWithRedirect\", \"onSave\", \"onSuccess\", \"onFailure\", \"transform\"]);\n\n  var classes = useStyles(props);\n  var notify = useNotify();\n  var translate = useTranslate();\n  var formContext = useFormContext();\n\n  var _d = useSaveContext(props),\n      setOnSuccess = _d.setOnSuccess,\n      setOnFailure = _d.setOnFailure,\n      setTransform = _d.setTransform;\n\n  var handleClick = function handleClick(event) {\n    // deprecated: use onSuccess and transform instead of onSave\n    if (typeof onSave === 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('<SaveButton onSave> prop is deprecated, use the onSuccess prop instead.');\n\n        if (!formContext || !formContext.setOnSave) {\n          console.warn('Using <SaveButton> outside a FormContext is deprecated.');\n        }\n      }\n\n      if (formContext && formContext.setOnSave) {\n        formContext.setOnSave(onSave);\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production' && (!formContext || !formContext.setOnSave)) {\n        console.warn('Using <SaveButton> outside a FormContext is deprecated.');\n      }\n\n      if (formContext && formContext.setOnSave) {\n        // we reset to the Form default save function\n        formContext.setOnSave();\n      }\n    }\n\n    if (onSuccess) {\n      setOnSuccess(onSuccess);\n    }\n\n    if (onFailure) {\n      setOnFailure(onFailure);\n    }\n\n    if (transform) {\n      setTransform(transform);\n    }\n\n    if (saving) {\n      // prevent double submission\n      event.preventDefault();\n    } else {\n      if (invalid) {\n        notify('ra.message.invalid_form', 'warning');\n      } // always submit form explicitly regardless of button type\n\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      handleSubmitWithRedirect(redirect);\n    }\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  };\n\n  var type = submitOnEnter ? 'submit' : 'button';\n  var displayedLabel = label && translate(label, {\n    _: label\n  });\n  return React.createElement(Button, __assign({\n    className: classnames(classes.button, className),\n    variant: variant,\n    type: type,\n    onClick: handleClick,\n    color: saving ? 'default' : 'primary',\n    \"aria-label\": displayedLabel,\n    disabled: disabled\n  }, sanitizeButtonRestProps(rest)), saving ? React.createElement(CircularProgress, {\n    size: 18,\n    thickness: 2,\n    className: classes.leftIcon\n  }) : cloneElement(icon, {\n    className: classnames(classes.leftIcon, classes.icon)\n  }), displayedLabel);\n};\n\nvar defaultIcon = React.createElement(ContentSave, null);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    button: {\n      position: 'relative'\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1)\n    },\n    icon: {\n      fontSize: 18\n    }\n  };\n}, {\n  name: 'RaSaveButton'\n});\nSaveButton.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  handleSubmitWithRedirect: PropTypes.func,\n  // @deprecated\n  onSave: PropTypes.func,\n  invalid: PropTypes.bool,\n  label: PropTypes.string,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  variant: PropTypes.oneOf(['text', 'outlined', 'contained']),\n  icon: PropTypes.element\n};\nexport default SaveButton;","map":null,"metadata":{},"sourceType":"module"}