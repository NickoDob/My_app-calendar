{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody } from '@material-ui/core';\nimport classnames from 'classnames';\nimport { shallowEqual } from 'react-redux';\nimport DatagridRow, { PureDatagridRow } from './DatagridRow';\nvar DatagridBody = React.forwardRef(function (_a, ref) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      classes = _a.classes,\n      className = _a.className,\n      data = _a.data,\n      expand = _a.expand,\n      hasBulkActions = _a.hasBulkActions,\n      hover = _a.hover,\n      ids = _a.ids,\n      onToggleItem = _a.onToggleItem,\n      resource = _a.resource,\n      row = _a.row,\n      rowClick = _a.rowClick,\n      rowStyle = _a.rowStyle,\n      selectedIds = _a.selectedIds,\n      isRowSelectable = _a.isRowSelectable,\n      rest = __rest(_a, [\"basePath\", \"children\", \"classes\", \"className\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"ids\", \"onToggleItem\", \"resource\", \"row\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"isRowSelectable\"]);\n\n  return React.createElement(TableBody, __assign({\n    ref: ref,\n    className: classnames('datagrid-body', className)\n  }, rest), ids.map(function (id, rowIndex) {\n    var _a;\n\n    return cloneElement(row, {\n      basePath: basePath,\n      classes: classes,\n      className: classnames(classes.row, (_a = {}, _a[classes.rowEven] = rowIndex % 2 === 0, _a[classes.rowOdd] = rowIndex % 2 !== 0, _a[classes.clickableRow] = rowClick, _a)),\n      expand: expand,\n      hasBulkActions: hasBulkActions && !!selectedIds,\n      hover: hover,\n      id: id,\n      key: id,\n      onToggleItem: onToggleItem,\n      record: data[id],\n      resource: resource,\n      rowClick: rowClick,\n      selectable: !isRowSelectable || isRowSelectable(data[id]),\n      selected: selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(id),\n      style: rowStyle ? rowStyle(data[id], rowIndex) : null\n    }, children);\n  }));\n});\nDatagridBody.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.any,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  // @ts-ignore\n  data: PropTypes.object.isRequired,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any).isRequired,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  row: PropTypes.element,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  styles: PropTypes.object,\n  isRowSelectable: PropTypes.func\n};\nDatagridBody.defaultProps = {\n  data: {},\n  hasBulkActions: false,\n  ids: [],\n  row: React.createElement(DatagridRow, null)\n}; // trick material-ui Table into thinking this is one of the child type it supports\n// @ts-ignore\n\nDatagridBody.muiName = 'TableBody';\n\nvar areEqual = function areEqual(prevProps, nextProps) {\n  var _1 = prevProps.children,\n      _2 = prevProps.expand,\n      _3 = prevProps.row,\n      prevPropsWithoutChildren = __rest(prevProps, [\"children\", \"expand\", \"row\"]);\n\n  var _4 = nextProps.children,\n      _5 = nextProps.expand,\n      _6 = nextProps.row,\n      nextPropsWithoutChildren = __rest(nextProps, [\"children\", \"expand\", \"row\"]);\n\n  return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\n\nexport var PureDatagridBody = memo(DatagridBody, areEqual); // trick material-ui Table into thinking this is one of the child type it supports\n// @ts-ignore\n\nPureDatagridBody.muiName = 'TableBody'; // @ts-ignore\n\nPureDatagridBody.defaultProps = {\n  row: React.createElement(PureDatagridRow, null)\n};\nexport default DatagridBody;","map":null,"metadata":{},"sourceType":"module"}