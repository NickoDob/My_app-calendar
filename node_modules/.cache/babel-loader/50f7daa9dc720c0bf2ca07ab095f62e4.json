{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CreateContextProvider, ResourceContextProvider, useCheckMinimumRequiredProps, useCreateController } from 'ra-core';\nimport { CreateView } from './CreateView';\n/**\r\n * Page component for the Create view\r\n *\r\n * The `<Create>` component renders the page title and actions.\r\n * It is not responsible for rendering the actual form -\r\n * that's the job of its child component (usually `<SimpleForm>`),\r\n * to which it passes the `record` as prop.\r\n *\r\n * The <Create> component accepts the following props:\r\n *\r\n * - actions\r\n * - aside\r\n * - component\r\n * - successMessage\r\n * - title\r\n *\r\n * @example\r\n *\r\n * // in src/posts.js\r\n * import * as React from \"react\";\r\n * import { Create, SimpleForm, TextInput } from 'react-admin';\r\n *\r\n * export const PostCreate = (props) => (\r\n *     <Create {...props}>\r\n *         <SimpleForm>\r\n *             <TextInput source=\"title\" />\r\n *         </SimpleForm>\r\n *     </Create>\r\n * );\r\n *\r\n * // in src/App.js\r\n * import * as React from \"react\";\r\n * import { Admin, Resource } from 'react-admin';\r\n *\r\n * import { PostCreate } from './posts';\r\n *\r\n * const App = () => (\r\n *     <Admin dataProvider={...}>\r\n *         <Resource name=\"posts\" create={PostCreate} />\r\n *     </Admin>\r\n * );\r\n * export default App;\r\n */\n\nexport var Create = function Create(props) {\n  useCheckMinimumRequiredProps('Create', ['children'], props);\n  var controllerProps = useCreateController(props);\n  var body = React.createElement(CreateContextProvider, {\n    value: controllerProps\n  }, React.createElement(CreateView, __assign({}, props, controllerProps)));\n  return props.resource ? // support resource override via props\n  React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, body) : body;\n};\nCreate.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.element,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string,\n  title: PropTypes.node,\n  record: PropTypes.object,\n  hasList: PropTypes.bool,\n  successMessage: PropTypes.string,\n  onSuccess: PropTypes.func,\n  onFailure: PropTypes.func,\n  transform: PropTypes.func\n};\nexport default Create;","map":null,"metadata":{},"sourceType":"module"}