{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { escapePath } from 'ra-core';\nimport Toolbar from './Toolbar';\nimport TabbedFormTabs, { getTabFullPath } from './TabbedFormTabs';\nexport var TabbedFormView = function TabbedFormView(props) {\n  var basePath = props.basePath,\n      children = props.children,\n      className = props.className,\n      classesOverride = props.classes,\n      handleSubmit = props.handleSubmit,\n      handleSubmitWithRedirect = props.handleSubmitWithRedirect,\n      invalid = props.invalid,\n      mutationMode = props.mutationMode,\n      pristine = props.pristine,\n      record = props.record,\n      defaultRedirect = props.redirect,\n      resource = props.resource,\n      saving = props.saving,\n      submitOnEnter = props.submitOnEnter,\n      _a = props.syncWithLocation,\n      syncWithLocation = _a === void 0 ? true : _a,\n      tabs = props.tabs,\n      toolbar = props.toolbar,\n      undoable = props.undoable,\n      variant = props.variant,\n      margin = props.margin,\n      validating = props.validating,\n      rest = __rest(props, [\"basePath\", \"children\", \"className\", \"classes\", \"handleSubmit\", \"handleSubmitWithRedirect\", \"invalid\", \"mutationMode\", \"pristine\", \"record\", \"redirect\", \"resource\", \"saving\", \"submitOnEnter\", \"syncWithLocation\", \"tabs\", \"toolbar\", \"undoable\", \"variant\", \"margin\", \"validating\"]);\n\n  var classes = useTabbedFormViewStyles(props);\n  var match = useRouteMatch();\n  var location = useLocation();\n  var url = match ? match.url : location.pathname;\n\n  var _b = useState(0),\n      tabValue = _b[0],\n      setTabValue = _b[1];\n\n  var handleTabChange = function handleTabChange(event, value) {\n    if (!syncWithLocation) {\n      setTabValue(value);\n    }\n  };\n\n  return React.createElement(\"form\", __assign({\n    className: classnames('tabbed-form', className)\n  }, sanitizeRestProps(rest)), cloneElement(tabs, {\n    classes: classes,\n    url: url,\n    syncWithLocation: syncWithLocation,\n    onChange: handleTabChange,\n    value: tabValue\n  }, children), React.createElement(Divider, null), React.createElement(\"div\", {\n    className: classes.content\n  }, Children.map(children, function (tab, index) {\n    if (!tab) {\n      return;\n    }\n\n    var tabPath = getTabFullPath(tab, index, url);\n    return React.createElement(Route, {\n      exact: true,\n      path: escapePath(tabPath)\n    }, function (routeProps) {\n      return isValidElement(tab) ? React.cloneElement(tab, {\n        intent: 'content',\n        classes: classes,\n        resource: resource,\n        record: record,\n        basePath: basePath,\n        hidden: syncWithLocation ? !routeProps.match : tabValue !== index,\n        variant: tab.props.variant || variant,\n        margin: tab.props.margin || margin,\n        value: syncWithLocation ? tabPath : index\n      }) : null;\n    });\n  })), toolbar && React.cloneElement(toolbar, {\n    basePath: basePath,\n    className: 'toolbar',\n    handleSubmitWithRedirect: handleSubmitWithRedirect,\n    handleSubmit: handleSubmit,\n    invalid: invalid,\n    mutationMode: mutationMode,\n    pristine: pristine,\n    record: record,\n    redirect: defaultRedirect,\n    resource: resource,\n    saving: saving,\n    submitOnEnter: submitOnEnter,\n    validating: validating,\n    undoable: undoable\n  }));\n};\nexport var useTabbedFormViewStyles = makeStyles(function (theme) {\n  return {\n    errorTabButton: {\n      color: theme.palette.error.main\n    },\n    content: {\n      paddingTop: theme.spacing(1),\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaTabbedForm'\n});\nTabbedFormView.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  handleSubmit: PropTypes.func,\n  initialValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  invalid: PropTypes.bool,\n  location: PropTypes.object,\n  match: PropTypes.object,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  pristine: PropTypes.bool,\n  // @ts-ignore\n  record: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  save: PropTypes.func,\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  tabs: PropTypes.element.isRequired,\n  toolbar: PropTypes.element,\n  translate: PropTypes.func,\n  undoable: PropTypes.bool,\n  validate: PropTypes.func,\n  value: PropTypes.number,\n  version: PropTypes.number\n};\nTabbedFormView.defaultProps = {\n  submitOnEnter: true,\n  tabs: React.createElement(TabbedFormTabs, null),\n  toolbar: React.createElement(Toolbar, null)\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var active = _a.active,\n      dirty = _a.dirty,\n      dirtyFields = _a.dirtyFields,\n      dirtyFieldsSinceLastSubmit = _a.dirtyFieldsSinceLastSubmit,\n      dirtySinceLastSubmit = _a.dirtySinceLastSubmit,\n      error = _a.error,\n      errors = _a.errors,\n      form = _a.form,\n      hasSubmitErrors = _a.hasSubmitErrors,\n      hasValidationErrors = _a.hasValidationErrors,\n      initialValues = _a.initialValues,\n      _b = _a.modified,\n      modified = _b === void 0 ? null : _b,\n      modifiedSinceLastSubmit = _a.modifiedSinceLastSubmit,\n      _c = _a.save,\n      save = _c === void 0 ? null : _c,\n      submitError = _a.submitError,\n      submitErrors = _a.submitErrors,\n      submitFailed = _a.submitFailed,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting,\n      _d = _a.touched,\n      touched = _d === void 0 ? null : _d,\n      valid = _a.valid,\n      values = _a.values,\n      _e = _a.visited,\n      visited = _e === void 0 ? null : _e,\n      _f = _a.__versions,\n      __versions = _f === void 0 ? null : _f,\n      props = __rest(_a, [\"active\", \"dirty\", \"dirtyFields\", \"dirtyFieldsSinceLastSubmit\", \"dirtySinceLastSubmit\", \"error\", \"errors\", \"form\", \"hasSubmitErrors\", \"hasValidationErrors\", \"initialValues\", \"modified\", \"modifiedSinceLastSubmit\", \"save\", \"submitError\", \"submitErrors\", \"submitFailed\", \"submitSucceeded\", \"submitting\", \"touched\", \"valid\", \"values\", \"visited\", \"__versions\"]);\n\n  return props;\n};","map":null,"metadata":{},"sourceType":"module"}