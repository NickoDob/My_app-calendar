{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowContextProvider, ResourceContextProvider, useCheckMinimumRequiredProps, useShowController } from 'ra-core';\nimport { ShowView } from './ShowView';\n/**\r\n * Page component for the Show view\r\n *\r\n * The `<Show>` component renders the page title and actions,\r\n * fetches the record from the data provider.\r\n * It is not responsible for rendering the actual form -\r\n * that's the job of its child component (usually `<SimpleShowLayout>`),\r\n * to which it passes the `record` as prop.\r\n *\r\n * The <Show> component accepts the following props:\r\n *\r\n * - actions\r\n * - aside\r\n * - component\r\n * - title\r\n *\r\n * @example\r\n *\r\n * // in src/posts.js\r\n * import * as React from \"react\";\r\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\r\n *\r\n * export const PostShow = (props) => (\r\n *     <Show {...props}>\r\n *         <SimpleShowLayout>\r\n *             <TextField source=\"title\" />\r\n *         </SimpleShowLayout>\r\n *     </Show>\r\n * );\r\n *\r\n * // in src/App.js\r\n * import * as React from \"react\";\r\n * import { Admin, Resource } from 'react-admin';\r\n *\r\n * import { PostShow } from './posts';\r\n *\r\n * const App = () => (\r\n *     <Admin dataProvider={...}>\r\n *         <Resource name=\"posts\" show={PostShow} />\r\n *     </Admin>\r\n * );\r\n * export default App;\r\n */\n\nexport var Show = function Show(props) {\n  useCheckMinimumRequiredProps('Show', ['children'], props);\n  var controllerProps = useShowController(props);\n  var body = React.createElement(ShowContextProvider, {\n    value: controllerProps\n  }, React.createElement(ShowView, __assign({}, props, controllerProps)));\n  return props.resource ? // support resource override via props\n  React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, body) : body;\n};\nShow.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  aside: PropTypes.element,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  id: PropTypes.any.isRequired,\n  resource: PropTypes.string,\n  title: PropTypes.node\n};","map":null,"metadata":{},"sourceType":"module"}