{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { getFieldLabelTranslationArgs } from '../util';\nimport useLocale from './useLocale';\nimport useTranslate from './useTranslate';\n/**\r\n * Hook supplying the logic to translate a field value in multiple languages.\r\n *\r\n * @param options The hook options\r\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\r\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\r\n *\r\n * @returns\r\n * An object with following properties and methods:\r\n * - selectedLocale: The locale of the currently selected locale\r\n * - locales: An array of the supported locales\r\n * - getLabel: A function which returns the translated label for the given field\r\n * - getSource: A function which returns the source for the given field\r\n * - selectLocale: A function which set the selected locale\r\n */\n\nexport var useTranslatable = function useTranslatable(options) {\n  var localeFromUI = useLocale();\n  var _a = options.defaultLocale,\n      defaultLocale = _a === void 0 ? localeFromUI : _a,\n      locales = options.locales;\n\n  var _b = useState(defaultLocale),\n      selectedLocale = _b[0],\n      setSelectedLocale = _b[1];\n\n  var resource = useResourceContext({});\n  var translate = useTranslate();\n  var context = useMemo(function () {\n    return {\n      getSource: function getSource(source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n\n        return source + \".\" + locale;\n      },\n      getLabel: function getLabel(source, label) {\n        return translate.apply(void 0, getFieldLabelTranslationArgs({\n          source: source,\n          resource: resource,\n          label: label\n        }));\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translate]);\n  return context;\n};","map":null,"metadata":{},"sourceType":"module"}