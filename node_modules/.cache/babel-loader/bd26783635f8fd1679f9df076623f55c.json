{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FilterForm } from './filter';\nimport { FilterContext } from './FilterContext';\nvar useStyles = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    toolbar: (_a = {\n      justifyContent: 'space-between',\n      alignItems: 'flex-start',\n      paddingRight: 0\n    }, _a[theme.breakpoints.up('xs')] = {\n      paddingLeft: 0\n    }, _a[theme.breakpoints.down('xs')] = {\n      paddingLeft: theme.spacing(2),\n      backgroundColor: theme.palette.background.paper\n    }, _a),\n    actions: (_b = {\n      paddingTop: theme.spacing(3),\n      minHeight: theme.spacing(5)\n    }, _b[theme.breakpoints.down('xs')] = {\n      padding: theme.spacing(1),\n      backgroundColor: theme.palette.background.paper\n    }, _b)\n  };\n}, {\n  name: 'RaListToolbar'\n});\n\nvar ListToolbar = function ListToolbar(props) {\n  var classesOverride = props.classes,\n      filters = props.filters,\n      actions = props.actions,\n      rest = __rest(props, [\"classes\", \"filters\", \"actions\"]);\n\n  var classes = useStyles(props);\n  return Array.isArray(filters) ? React.createElement(FilterContext.Provider, {\n    value: filters\n  }, React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, React.createElement(FilterForm, null), React.createElement(\"span\", null), actions && React.cloneElement(actions, __assign(__assign(__assign({}, rest), {\n    className: classes.actions\n  }), actions.props)))) : React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, filters && React.cloneElement(filters, __assign(__assign({}, rest), {\n    context: 'form'\n  })), React.createElement(\"span\", null), actions && React.cloneElement(actions, __assign(__assign(__assign({}, rest), {\n    className: classes.actions,\n    filters: filters\n  }), actions.props)));\n};\n\nListToolbar.propTypes = {\n  classes: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  // @ts-ignore\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n};\nexport default React.memo(ListToolbar);","map":null,"metadata":{},"sourceType":"module"}