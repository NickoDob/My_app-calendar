{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - bulkActionButtons\n * - component\n * - empty\n * - exporter\n * - filter (the permanent filter to apply to the query)\n * - filterDefaultValues (the default values for `alwaysOn` filters)\n * - filters (a list of inputs used to display the filter button/form combo)\n * - pagination\n * - perPage\n * - sort\n * - title\n * - syncWithLocation\n *\n * @example\n *\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nvar List = function List(props) {\n  useCheckMinimumRequiredProps('List', ['children'], props);\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListView, __assign({}, props, controllerProps)));\n};\n\nList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  title: TitlePropType,\n  // the props managed by react-admin\n  authProvider: PropTypes.func,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  location: PropTypes.any,\n  match: PropTypes.any,\n  path: PropTypes.string,\n  resource: PropTypes.string,\n  syncWithLocation: PropTypes.bool\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10\n};\nexport default List;","map":null,"metadata":{},"sourceType":"module"}