{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement, ListContextProvider, useResourceContext } from 'ra-core';\nimport ListView from './ListView';\nimport listFieldTypes from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\n\nvar ListGuesser = function ListGuesser(props) {\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListViewGuesser, __assign({}, props, controllerProps)));\n};\n\nvar ListViewGuesser = function ListViewGuesser(props) {\n  var ids = props.ids,\n      data = props.data;\n  var resource = useResourceContext(props);\n\n  var _a = useState(null),\n      inferredChild = _a[0],\n      setInferredChild = _a[1];\n\n  useEffect(function () {\n    if (ids.length > 0 && data && !inferredChild) {\n      var inferredElements = getElementsFromRecords(ids.map(function (id) {\n        return data[id];\n      }), listFieldTypes);\n      var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n      process.env.NODE_ENV !== 'production' && // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n      setInferredChild(inferredChild_1.getElement());\n    }\n  }, [data, ids, inferredChild, resource]);\n  return React.createElement(ListView, __assign({}, props), inferredChild);\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\nexport default ListGuesser;","map":null,"metadata":{},"sourceType":"module"}