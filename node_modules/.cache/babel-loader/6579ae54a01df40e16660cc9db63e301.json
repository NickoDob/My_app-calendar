{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@material-ui/icons/GetApp';\nimport { fetchRelatedRecords, useDataProvider, useNotify, useListContext } from 'ra-core';\nimport Button from './Button';\n/**\n * Export the selected rows\n *\n * To be used inside the <List bulkActionButtons> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkDeleteButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = ({ basePath }) => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkDeleteButton basePath={basePath} />\n *     </Fragment>\n * );\n *\n * export const PostList = (props) => (\n *     <List {...props} bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\n\nvar BulkExportButton = function BulkExportButton(props) {\n  var onClick = props.onClick,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.action.export' : _a,\n      _b = props.icon,\n      icon = _b === void 0 ? defaultIcon : _b,\n      customExporter = props.exporter,\n      rest = __rest(props, [\"onClick\", \"label\", \"icon\", \"exporter\"]);\n\n  var _c = useListContext(props),\n      exporterFromContext = _c.exporter,\n      resource = _c.resource,\n      selectedIds = _c.selectedIds;\n\n  var exporter = customExporter || exporterFromContext;\n  var dataProvider = useDataProvider();\n  var notify = useNotify();\n  var handleClick = useCallback(function (event) {\n    exporter && dataProvider.getMany(resource, {\n      ids: selectedIds\n    }).then(function (_a) {\n      var data = _a.data;\n      return exporter(data, fetchRelatedRecords(dataProvider), dataProvider, resource);\n    }).catch(function (error) {\n      console.error(error);\n      notify('ra.notification.http_error', 'warning');\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [dataProvider, exporter, notify, onClick, resource, selectedIds]);\n  return React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon);\n};\n\nvar defaultIcon = React.createElement(DownloadIcon, null);\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      filterValues = _a.filterValues,\n      selectedIds = _a.selectedIds,\n      resource = _a.resource,\n      rest = __rest(_a, [\"basePath\", \"filterValues\", \"selectedIds\", \"resource\"]);\n\n  return rest;\n};\n\nBulkExportButton.propTypes = {\n  basePath: PropTypes.string,\n  exporter: PropTypes.func,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any).isRequired,\n  icon: PropTypes.element\n};\nexport default BulkExportButton;","map":null,"metadata":{},"sourceType":"module"}