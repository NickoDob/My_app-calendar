{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport React, { useCallback, useEffect, useRef, useMemo, isValidElement } from 'react';\nimport Downshift from 'downshift';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport { TextField, Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useInput, FieldTitle, useSuggestions, warning } from 'ra-core';\nimport debounce from 'lodash/debounce';\nimport InputHelperText from './InputHelperText';\nimport AutocompleteSuggestionList from './AutocompleteSuggestionList';\nimport AutocompleteSuggestionItem from './AutocompleteSuggestionItem';\nimport { AutocompleteInputLoader } from './AutocompleteInputLoader';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\n/**\n * An Input component for an autocomplete field, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <AutocompleteArrayInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <AutocompleteArrayInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * Note that you must also specify the `matchSuggestion` prop\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const matchSuggestion = (filterValue, choice) => choice.first_name.match(filterValue) || choice.last_name.match(filterValue);\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />} matchSuggestion={matchSuggestion} />\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <AutocompleteArrayInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n *\n * @example\n * <AutocompleteArrayInput source=\"author_id\" options={{ color: 'secondary' }} />\n */\n\nvar AutocompleteArrayInput = function AutocompleteArrayInput(props) {\n  var allowDuplicates = props.allowDuplicates,\n      allowEmpty = props.allowEmpty,\n      classesOverride = props.classes,\n      _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      create = props.create,\n      createLabel = props.createLabel,\n      createItemLabel = props.createItemLabel,\n      createValue = props.createValue,\n      _b = props.debounce,\n      debounceDelay = _b === void 0 ? 250 : _b,\n      disabled = props.disabled,\n      emptyText = props.emptyText,\n      emptyValue = props.emptyValue,\n      format = props.format,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      idOverride = props.id,\n      inputOverride = props.input,\n      isRequiredOverride = props.isRequired,\n      label = props.label,\n      loaded = props.loaded,\n      loading = props.loading,\n      limitChoicesToValue = props.limitChoicesToValue,\n      _c = props.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      matchSuggestion = props.matchSuggestion,\n      metaOverride = props.meta,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onCreate = props.onCreate,\n      onFocus = props.onFocus,\n      _d = props.options,\n      _e = _d === void 0 ? {} : _d,\n      suggestionsContainerProps = _e.suggestionsContainerProps,\n      labelProps = _e.labelProps,\n      InputProps = _e.InputProps,\n      options = __rest(_e, [\"suggestionsContainerProps\", \"labelProps\", \"InputProps\"]),\n      _f = props.optionText,\n      optionText = _f === void 0 ? 'name' : _f,\n      _g = props.optionValue,\n      optionValue = _g === void 0 ? 'id' : _g,\n      parse = props.parse,\n      resource = props.resource,\n      setFilter = props.setFilter,\n      shouldRenderSuggestionsOverride = props.shouldRenderSuggestions,\n      source = props.source,\n      suggestionLimit = props.suggestionLimit,\n      _h = props.translateChoice,\n      translateChoice = _h === void 0 ? true : _h,\n      validate = props.validate,\n      _j = props.variant,\n      variant = _j === void 0 ? 'filled' : _j,\n      rest = __rest(props, [\"allowDuplicates\", \"allowEmpty\", \"classes\", \"choices\", \"create\", \"createLabel\", \"createItemLabel\", \"createValue\", \"debounce\", \"disabled\", \"emptyText\", \"emptyValue\", \"format\", \"fullWidth\", \"helperText\", \"id\", \"input\", \"isRequired\", \"label\", \"loaded\", \"loading\", \"limitChoicesToValue\", \"margin\", \"matchSuggestion\", \"meta\", \"onBlur\", \"onChange\", \"onCreate\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"setFilter\", \"shouldRenderSuggestions\", \"source\", \"suggestionLimit\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  warning(isValidElement(optionText) && !matchSuggestion, \"If the optionText prop is a React element, you must also specify the matchSuggestion prop:\\n<AutocompleteArrayInput\\n    matchSuggestion={(filterValue, suggestion) => true}\\n/>\\n        \");\n  warning(source === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the AutocompleteArrayInput inside a ReferenceArrayInput, you must provide the choices prop\");\n  var classes = useStyles(props);\n  var inputEl = useRef();\n  var anchorEl = useRef();\n\n  var _k = useInput(__assign({\n    format: format,\n    id: idOverride,\n    input: inputOverride,\n    meta: metaOverride,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _k.id,\n      input = _k.input,\n      isRequired = _k.isRequired,\n      _l = _k.meta,\n      touched = _l.touched,\n      error = _l.error,\n      submitError = _l.submitError;\n\n  var values = input.value || emptyArray;\n\n  var _m = React.useState(''),\n      filterValue = _m[0],\n      setFilterValue = _m[1];\n\n  var getSuggestionFromValue = useCallback(function (value) {\n    return choices.find(function (choice) {\n      return get(choice, optionValue) === value;\n    });\n  }, [choices, optionValue]);\n  var selectedItems = useMemo(function () {\n    return values.map(getSuggestionFromValue);\n  }, [getSuggestionFromValue, values]);\n\n  var _o = useSuggestions({\n    allowDuplicates: allowDuplicates,\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: emptyText,\n    emptyValue: emptyValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItems,\n    suggestionLimit: suggestionLimit,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _o.getChoiceText,\n      getChoiceValue = _o.getChoiceValue,\n      getSuggestions = _o.getSuggestions; // eslint-disable-next-line\n\n\n  var debouncedSetFilter = useCallback(debounce(setFilter || DefaultSetFilter, debounceDelay), [setFilter, debounceDelay]);\n  var handleFilterChange = useCallback(function (eventOrValue) {\n    var event = eventOrValue;\n    var value = event.target ? event.target.value : eventOrValue;\n    setFilterValue(value);\n\n    if (setFilter) {\n      debouncedSetFilter(value);\n    }\n  }, [debouncedSetFilter, setFilter, setFilterValue]); // We must reset the filter every time the value changes to ensure we\n  // display at least some choices even if the input has a value.\n  // Otherwise, it would only display the currently selected one and the user\n  // would have to first clear the input before seeing any other choices\n\n  useEffect(function () {\n    handleFilterChange('');\n  }, [values.join(','), handleFilterChange]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleKeyDown = useCallback(function (event) {\n    // Remove latest item from array when user hits backspace with no text\n    if (selectedItems.length && !filterValue.length && event.key === 'Backspace') {\n      var newSelectedItems = selectedItems.slice(0, selectedItems.length - 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    }\n  }, [filterValue.length, getChoiceValue, input, selectedItems]);\n  var handleChange = useCallback(function (item, newItem) {\n    var finalItem = newItem || item;\n    var newSelectedItems = !allowDuplicates && selectedItems.includes(finalItem) ? __spreadArrays(selectedItems) : __spreadArrays(selectedItems, [finalItem]);\n    setFilterValue('');\n    input.onChange(newSelectedItems.map(getChoiceValue));\n  }, [allowDuplicates, getChoiceValue, input, selectedItems, setFilterValue]);\n\n  var _p = useSupportCreateSuggestion({\n    create: create,\n    createLabel: createLabel,\n    createItemLabel: createItemLabel,\n    createValue: createValue,\n    handleChange: handleChange,\n    filter: filterValue,\n    onCreate: onCreate\n  }),\n      getCreateItem = _p.getCreateItem,\n      handleChangeWithCreateSupport = _p.handleChange,\n      createElement = _p.createElement;\n\n  var handleDelete = useCallback(function (item) {\n    return function () {\n      var newSelectedItems = __spreadArrays(selectedItems);\n\n      newSelectedItems.splice(newSelectedItems.indexOf(item), 1);\n      input.onChange(newSelectedItems.map(getChoiceValue));\n    };\n  }, [input, selectedItems, getChoiceValue]); // This function ensures that the suggestion list stay aligned to the\n  // input element even if it moves (because user scrolled for example)\n\n  var updateAnchorEl = function updateAnchorEl() {\n    if (!inputEl.current) {\n      return;\n    }\n\n    var inputPosition = inputEl.current.getBoundingClientRect(); // It works by implementing a mock element providing the only method used\n    // by the PopOver component, getBoundingClientRect, which will return a\n    // position based on the input position\n\n    if (!anchorEl.current) {\n      anchorEl.current = {\n        getBoundingClientRect: function getBoundingClientRect() {\n          return inputPosition;\n        }\n      };\n    } else {\n      var anchorPosition = anchorEl.current.getBoundingClientRect();\n\n      if (anchorPosition.x !== inputPosition.x || anchorPosition.y !== inputPosition.y) {\n        anchorEl.current = {\n          getBoundingClientRect: function getBoundingClientRect() {\n            return inputPosition;\n          }\n        };\n      }\n    }\n  };\n\n  var storeInputRef = function storeInputRef(input) {\n    inputEl.current = input;\n    updateAnchorEl();\n  };\n\n  var handleBlur = useCallback(function (event) {\n    setFilterValue('');\n    handleFilterChange('');\n    input.onBlur(event);\n  }, [handleFilterChange, input, setFilterValue]);\n  var handleFocus = useCallback(function (openMenu) {\n    return function (event) {\n      openMenu(event);\n      input.onFocus(event);\n    };\n  }, [input]);\n  var handleClick = useCallback(function (openMenu) {\n    return function (event) {\n      if (event.target === inputEl.current) {\n        openMenu(event);\n      }\n    };\n  }, []);\n\n  var shouldRenderSuggestions = function shouldRenderSuggestions(val) {\n    if (shouldRenderSuggestionsOverride !== undefined && typeof shouldRenderSuggestionsOverride === 'function') {\n      return shouldRenderSuggestionsOverride(val);\n    }\n\n    return true;\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Downshift, __assign({\n    inputValue: filterValue,\n    onChange: handleChangeWithCreateSupport,\n    selectedItem: selectedItems,\n    itemToString: function itemToString(item) {\n      return getChoiceValue(item);\n    }\n  }, rest), function (_a) {\n    var _b, _c;\n\n    var getInputProps = _a.getInputProps,\n        getItemProps = _a.getItemProps,\n        getLabelProps = _a.getLabelProps,\n        getMenuProps = _a.getMenuProps,\n        isOpen = _a.isOpen,\n        suggestionFilter = _a.inputValue,\n        highlightedIndex = _a.highlightedIndex,\n        openMenu = _a.openMenu;\n    var isMenuOpen = isOpen && shouldRenderSuggestions(suggestionFilter);\n\n    var _d = getInputProps({\n      onBlur: handleBlur,\n      onFocus: handleFocus(openMenu),\n      onClick: handleClick(openMenu),\n      onKeyDown: handleKeyDown\n    }),\n        idFromDownshift = _d.id,\n        onBlur = _d.onBlur,\n        _onChange = _d.onChange,\n        onFocus = _d.onFocus,\n        ref = _d.ref,\n        color = _d.color,\n        size = _d.size,\n        inputProps = __rest(_d, [\"id\", \"onBlur\", \"onChange\", \"onFocus\", \"ref\", \"color\", \"size\"]);\n\n    var suggestions = __spreadArrays(getSuggestions(suggestionFilter), onCreate || create ? [getCreateItem()] : []);\n\n    return React.createElement(\"div\", {\n      className: classes.container\n    }, React.createElement(TextField, __assign({\n      id: id,\n      fullWidth: fullWidth,\n      InputProps: {\n        inputRef: storeInputRef,\n        classes: {\n          root: classNames(classes.inputRoot, (_b = {}, _b[classes.inputRootFilled] = variant === 'filled', _b)),\n          input: classes.inputInput\n        },\n        startAdornment: React.createElement(\"div\", {\n          className: classNames((_c = {}, _c[classes.chipContainerFilled] = variant === 'filled', _c[classes.chipContainerOutlined] = variant === 'outlined', _c))\n        }, selectedItems.map(function (item, index) {\n          return React.createElement(Chip, {\n            key: index,\n            tabIndex: -1,\n            label: getChoiceText(item),\n            className: classes.chip,\n            onDelete: handleDelete(item)\n          });\n        })),\n        endAdornment: loading && React.createElement(AutocompleteInputLoader, null),\n        onBlur: onBlur,\n        onChange: function onChange(event) {\n          handleFilterChange(event);\n\n          _onChange(event);\n        },\n        onFocus: onFocus\n      },\n      error: !!(touched && (error || submitError)),\n      label: React.createElement(FieldTitle, __assign({\n        label: label\n      }, labelProps, {\n        source: source,\n        resource: resource,\n        isRequired: typeof isRequiredOverride !== 'undefined' ? isRequiredOverride : isRequired\n      })),\n      InputLabelProps: getLabelProps({\n        htmlFor: id\n      }),\n      helperText: React.createElement(InputHelperText, {\n        touched: touched,\n        error: error || submitError,\n        helperText: helperText\n      }),\n      variant: variant,\n      margin: margin,\n      color: color,\n      size: size,\n      disabled: disabled\n    }, inputProps, options)), React.createElement(AutocompleteSuggestionList, {\n      isOpen: isMenuOpen,\n      menuProps: getMenuProps({}, // https://github.com/downshift-js/downshift/issues/235\n      {\n        suppressRefError: true\n      }),\n      inputEl: inputEl.current,\n      suggestionsContainerProps: suggestionsContainerProps,\n      className: classes.suggestionsContainer\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(AutocompleteSuggestionItem, __assign({\n        key: getChoiceValue(suggestion),\n        createValue: createValue,\n        suggestion: suggestion,\n        index: index,\n        highlightedIndex: highlightedIndex,\n        isSelected: selectedItems.map(getChoiceValue).includes(getChoiceValue(suggestion)),\n        filterValue: filterValue,\n        getSuggestionText: getChoiceText\n      }, getItemProps({\n        item: suggestion\n      })));\n    })));\n  }), createElement);\n};\n\nvar emptyArray = [];\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      flexGrow: 1,\n      position: 'relative'\n    },\n    suggestionsContainer: {\n      zIndex: theme.zIndex.modal\n    },\n    chip: {\n      margin: theme.spacing(0.5, 0.5, 0.5, 0)\n    },\n    chipContainerFilled: {\n      margin: '27px 12px 10px 0'\n    },\n    chipContainerOutlined: {\n      margin: '12px 12px 10px 0'\n    },\n    inputRoot: {\n      flexWrap: 'wrap'\n    },\n    inputRootFilled: {\n      flexWrap: 'wrap',\n      '& $chip': {\n        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'\n      }\n    },\n    inputInput: {\n      width: 'auto',\n      flexGrow: 1\n    }\n  };\n}, {\n  name: 'RaAutocompleteArrayInput'\n});\n\nvar DefaultSetFilter = function DefaultSetFilter() {};\n\nexport default AutocompleteArrayInput;","map":null,"metadata":{},"sourceType":"module"}