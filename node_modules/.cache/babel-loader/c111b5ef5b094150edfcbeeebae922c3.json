{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport { useLocation } from 'react-router-dom';\n\nvar TabbedFormTabs = function TabbedFormTabs(_a) {\n  var children = _a.children,\n      classes = _a.classes,\n      url = _a.url,\n      syncWithLocation = _a.syncWithLocation,\n      value = _a.value,\n      rest = __rest(_a, [\"children\", \"classes\", \"url\", \"syncWithLocation\", \"value\"]);\n\n  var location = useLocation();\n  var validTabPaths = Children.map(children, function (tab, index) {\n    if (!isValidElement(tab)) return undefined;\n    return getTabFullPath(tab, index, url);\n  }); // This ensures we don't get warnings from material-ui Tabs component when\n  // the current location pathname targets a dynamically added Tab\n  // In the case the targeted Tab is not present at first render (when\n  // using permissions for example) we temporarily switch to the first\n  // available tab. The current location will be applied again on the\n  // first render containing the targeted tab. This is almost transparent\n  // for the user who may just see a short tab selection animation\n\n  var tabValue = validTabPaths.includes(location.pathname) ? location.pathname : validTabPaths[0];\n  return React.createElement(Tabs, __assign({\n    value: syncWithLocation ? tabValue : value,\n    indicatorColor: \"primary\"\n  }, rest), Children.map(children, function (tab, index) {\n    if (!isValidElement(tab)) return null; // Builds the full tab which is the concatenation of the last matched route in the\n    // TabbedShowLayout hierarchy (ex: '/posts/create', '/posts/12', , '/posts/12/show')\n    // and the tab path.\n    // This will be used as the Tab's value\n\n    var tabPath = getTabFullPath(tab, index, url);\n    return cloneElement(tab, {\n      intent: 'header',\n      value: syncWithLocation ? tabPath : index,\n      classes: classes,\n      syncWithLocation: syncWithLocation\n    });\n  }));\n};\n\nTabbedFormTabs.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  url: PropTypes.string,\n  tabsWithErrors: PropTypes.arrayOf(PropTypes.string)\n};\nexport var getTabFullPath = function getTabFullPath(tab, index, baseUrl) {\n  return (\"\" + baseUrl + (tab.props.path ? \"/\" + tab.props.path : index > 0 ? \"/\" + index : '')).replace('//', '/');\n}; // Because baseUrl can be a single / when on the first tab\n\nexport default TabbedFormTabs;","map":null,"metadata":{},"sourceType":"module"}