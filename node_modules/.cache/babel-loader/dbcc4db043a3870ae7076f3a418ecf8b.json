{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport FilterButton from './filter/FilterButton';\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@material-ui/core/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ basePath, filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\n\nvar ListActions = function ListActions(props) {\n  var className = props.className,\n      exporter = props.exporter,\n      filtersProp = props.filters,\n      rest = __rest(props, [\"className\", \"exporter\", \"filters\"]);\n\n  var _a = useListContext(props),\n      currentSort = _a.currentSort,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      basePath = _a.basePath,\n      selectedIds = _a.selectedIds,\n      showFilter = _a.showFilter,\n      total = _a.total;\n\n  var resource = useResourceContext(rest);\n  var hasCreate = useResourceDefinition(rest).hasCreate;\n  var filters = useContext(FilterContext) || filtersProp;\n  return useMemo(function () {\n    return React.createElement(TopToolbar, __assign({\n      className: className\n    }, sanitizeListRestProps(rest)), filtersProp ? cloneElement(filtersProp, {\n      resource: resource,\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues,\n      context: 'button'\n    }) : filters && React.createElement(FilterButton, null), hasCreate && React.createElement(CreateButton, {\n      basePath: basePath\n    }), exporter !== false && React.createElement(ExportButton, {\n      disabled: total === 0,\n      resource: resource,\n      sort: currentSort,\n      filterValues: filterValues\n    }));\n  }, [resource, displayedFilters, filterValues, selectedIds, filters, total] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n};\n\nListActions.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  currentSort: PropTypes.any,\n  displayedFilters: PropTypes.object,\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filters: PropTypes.element,\n  filterValues: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  resource: PropTypes.string,\n  onUnselectItems: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  showFilter: PropTypes.func,\n  total: PropTypes.number\n};\nListActions.defaultProps = {\n  selectedIds: [],\n  onUnselectItems: function onUnselectItems() {\n    return null;\n  }\n};\nexport default ListActions;","map":null,"metadata":{},"sourceType":"module"}