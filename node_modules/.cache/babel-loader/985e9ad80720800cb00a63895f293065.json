{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useRef } from 'react';\nexport var SideEffectContext = createContext({});\nexport var SideEffectContextProvider = function SideEffectContextProvider(_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(SideEffectContext.Provider, {\n    value: value\n  }, children);\n};\n/**\n * Get modifiers for a save() function, and the way to update them.\n *\n * Used in useCreateController and useEditController.\n *\n * @example\n *\n * const {\n *     onSuccessRef,\n *     setOnSuccess,\n *     onFailureRef,\n *     setOnFailure,\n *     transformRef,\n *     setTransform,\n * } = useSaveModifiers({ onSuccess, onFailure, transform });\n */\n\nexport var useSaveModifiers = function useSaveModifiers(_a) {\n  var onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      transform = _a.transform;\n  var onSuccessRef = useRef(onSuccess);\n\n  var setOnSuccess = function setOnSuccess(onSuccess) {\n    onSuccessRef.current = function (response) {\n      // reset onSuccess for next submission\n      onSuccessRef.current = undefined;\n      return onSuccess(response);\n    };\n  };\n\n  var onFailureRef = useRef(onFailure);\n\n  var setOnFailure = function setOnFailure(onFailure) {\n    onFailureRef.current = function (error) {\n      // reset onFailure for next submission\n      onFailureRef.current = undefined;\n      return onFailure(error);\n    };\n  };\n\n  var transformRef = useRef(transform);\n\n  var setTransform = function setTransform(transform) {\n    transformRef.current = function (data) {\n      // reset transform for next submission\n      transformRef.current = undefined;\n      return transform(data);\n    };\n  };\n\n  return {\n    onSuccessRef: onSuccessRef,\n    setOnSuccess: setOnSuccess,\n    onFailureRef: onFailureRef,\n    setOnFailure: setOnFailure,\n    transformRef: transformRef,\n    setTransform: setTransform\n  };\n};","map":null,"metadata":{},"sourceType":"module"}