{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, Fragment, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport MuiToolbar from '@material-ui/core/Toolbar';\nimport withWidth from '@material-ui/core/withWidth';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { SaveButton, DeleteButton } from '../button';\nvar useStyles = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    toolbar: {\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900]\n    },\n    desktopToolbar: {\n      marginTop: theme.spacing(2)\n    },\n    mobileToolbar: {\n      position: 'fixed',\n      bottom: 0,\n      left: 0,\n      right: 0,\n      padding: '16px',\n      width: '100%',\n      boxSizing: 'border-box',\n      flexShrink: 0,\n      zIndex: 2\n    },\n    defaultToolbar: {\n      flex: 1,\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    spacer: (_a = {}, _a[theme.breakpoints.down('xs')] = {\n      height: '5em'\n    }, _a)\n  };\n}, {\n  name: 'RaToolbar'\n});\n\nvar valueOrDefault = function valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n};\n/**\n * The Toolbar displayed at the bottom of forms.\n *\n * @example Always enable the <SaveButton />\n *\n * import * as React from 'react';\n * import {\n *     Create,\n *     DateInput,\n *     TextInput,\n *     SimpleForm,\n *     Toolbar,\n *     required,\n * } from 'react-admin';\n *\n * const now = new Date();\n * const defaultSort = { field: 'title', order: 'ASC' };\n *\n * const CommentCreate = props => (\n *     <Create {...props}>\n *         <SimpleForm redirect={false} toolbar={<Toolbar alwaysEnableSaveButton={true} />}>\n *             <TextInput\n *                 source=\"author.name\"\n *                 fullWidth\n *             />\n *             <DateInput source=\"created_at\" defaultValue={now} />\n *             <TextInput source=\"body\" fullWidth={true} multiline={true} />\n *         </SimpleForm>\n *     </Create>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by the <SimpleForm>)\n * @prop {boolean} alwaysEnableSaveButton Force enabling the <SaveButton>. If it's not defined, the <SaveButton> will be enabled using the `pristine` and `validating` props (disabled if pristine or validating, enabled otherwise).\n * @prop {ReactElement[]} children Customize the buttons you want to display in the <Toolbar>.\n * @prop {string} width Apply to the mobile or desktop classes depending on its value. Pass `xs` to display the mobile version.\n *\n */\n\n\nvar Toolbar = function Toolbar(props) {\n  var _a;\n\n  var alwaysEnableSaveButton = props.alwaysEnableSaveButton,\n      basePath = props.basePath,\n      children = props.children,\n      className = props.className,\n      classesOverride = props.classes,\n      handleSubmit = props.handleSubmit,\n      handleSubmitWithRedirect = props.handleSubmitWithRedirect,\n      invalid = props.invalid,\n      pristine = props.pristine,\n      record = props.record,\n      redirect = props.redirect,\n      resource = props.resource,\n      saving = props.saving,\n      submitOnEnter = props.submitOnEnter,\n      undoable = props.undoable,\n      mutationMode = props.mutationMode,\n      validating = props.validating,\n      width = props.width,\n      rest = __rest(props, [\"alwaysEnableSaveButton\", \"basePath\", \"children\", \"className\", \"classes\", \"handleSubmit\", \"handleSubmitWithRedirect\", \"invalid\", \"pristine\", \"record\", \"redirect\", \"resource\", \"saving\", \"submitOnEnter\", \"undoable\", \"mutationMode\", \"validating\", \"width\"]);\n\n  var classes = useStyles(props); // Use form pristine and validating to enable or disable the save button\n  // if alwaysEnableSaveButton is undefined\n\n  var disabled = !valueOrDefault(alwaysEnableSaveButton, !pristine && !validating);\n  return React.createElement(Fragment, null, React.createElement(MuiToolbar, __assign({\n    className: classnames(classes.toolbar, (_a = {}, _a[classes.mobileToolbar] = width === 'xs', _a[classes.desktopToolbar] = width !== 'xs', _a), className),\n    role: \"toolbar\"\n  }, rest), Children.count(children) === 0 ? React.createElement(\"div\", {\n    className: classes.defaultToolbar\n  }, React.createElement(SaveButton, {\n    handleSubmitWithRedirect: handleSubmitWithRedirect || handleSubmit,\n    disabled: disabled,\n    invalid: invalid,\n    redirect: redirect,\n    saving: saving || validating,\n    submitOnEnter: submitOnEnter\n  }), record && typeof record.id !== 'undefined' && React.createElement(DeleteButton, {\n    basePath: basePath,\n    record: record,\n    resource: resource,\n    undoable: undoable,\n    mutationMode: mutationMode\n  })) : Children.map(children, function (button) {\n    return button && isValidElement(button) ? React.cloneElement(button, {\n      basePath: valueOrDefault(button.props.basePath, basePath),\n      handleSubmit: valueOrDefault(button.props.handleSubmit, handleSubmit),\n      handleSubmitWithRedirect: valueOrDefault(button.props.handleSubmitWithRedirect, handleSubmitWithRedirect),\n      onSave: button.props.onSave,\n      invalid: invalid,\n      pristine: pristine,\n      record: valueOrDefault(button.props.record, record),\n      resource: valueOrDefault(button.props.resource, resource),\n      saving: saving,\n      submitOnEnter: valueOrDefault(button.props.submitOnEnter, submitOnEnter),\n      undoable: valueOrDefault(button.props.undoable, undoable)\n    }) : null;\n  })), React.createElement(\"div\", {\n    className: classes.spacer\n  }));\n};\n\nToolbar.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  handleSubmitWithRedirect: PropTypes.func,\n  invalid: PropTypes.bool,\n  pristine: PropTypes.bool,\n  record: PropTypes.any,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  undoable: PropTypes.bool,\n  validating: PropTypes.bool,\n  width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n};\nToolbar.defaultProps = {\n  submitOnEnter: true\n};\nexport default withWidth({\n  initialWidth: 'xs'\n})(Toolbar);","map":null,"metadata":{},"sourceType":"module"}