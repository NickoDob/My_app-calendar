{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useTranslate, sanitizeListRestProps, useListContext } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    toolbar: {\n      zIndex: 3,\n      color: theme.palette.type === 'light' ? theme.palette.primary.main : theme.palette.text.primary,\n      justifyContent: 'space-between',\n      backgroundColor: theme.palette.type === 'light' ? lighten(theme.palette.primary.light, 0.85) : theme.palette.primary.dark,\n      minHeight: theme.spacing(8),\n      height: theme.spacing(8),\n      transition: theme.transitions.create('height') + \", \" + theme.transitions.create('min-height')\n    },\n    topToolbar: {\n      paddingTop: theme.spacing(2)\n    },\n    buttons: {},\n    collapsed: {\n      minHeight: 0,\n      height: 0,\n      overflowY: 'hidden'\n    },\n    title: {\n      display: 'flex',\n      flex: '0 0 auto'\n    },\n    icon: {\n      marginLeft: '-0.5em',\n      marginRight: '0.5em'\n    }\n  };\n}, {\n  name: 'RaBulkActionsToolbar'\n});\n\nvar BulkActionsToolbar = function BulkActionsToolbar(props) {\n  var _a;\n\n  var classesOverride = props.classes,\n      _b = props.label,\n      label = _b === void 0 ? 'ra.action.bulk_actions' : _b,\n      children = props.children,\n      rest = __rest(props, [\"classes\", \"label\", \"children\"]);\n\n  var _c = useListContext(props),\n      basePath = _c.basePath,\n      filterValues = _c.filterValues,\n      resource = _c.resource,\n      selectedIds = _c.selectedIds,\n      onUnselectItems = _c.onUnselectItems;\n\n  var classes = useStyles(props);\n  var translate = useTranslate();\n  return React.createElement(Toolbar, __assign({\n    \"data-test\": \"bulk-actions-toolbar\",\n    className: classnames(classes.toolbar, (_a = {}, _a[classes.collapsed] = selectedIds.length === 0, _a))\n  }, sanitizeListRestProps(rest)), React.createElement(\"div\", {\n    className: classes.title\n  }, React.createElement(IconButton, {\n    className: classes.icon,\n    \"aria-label\": translate('ra.action.unselect'),\n    title: translate('ra.action.unselect'),\n    onClick: onUnselectItems,\n    size: \"small\"\n  }, React.createElement(CloseIcon, {\n    fontSize: \"small\"\n  })), React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"subtitle1\"\n  }, translate(label, {\n    _: label,\n    smart_count: selectedIds.length\n  }))), React.createElement(TopToolbar, {\n    className: classes.topToolbar\n  }, Children.map(children, function (child) {\n    return isValidElement(child) ? cloneElement(child, {\n      basePath: basePath,\n      filterValues: filterValues,\n      resource: resource,\n      selectedIds: selectedIds\n    }) : null;\n  })));\n};\n\nBulkActionsToolbar.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  label: PropTypes.string\n};\nexport default BulkActionsToolbar;","map":null,"metadata":{},"sourceType":"module"}