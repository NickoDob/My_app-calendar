{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormWithRedirect } from 'ra-core';\nimport get from 'lodash/get';\nimport { TabbedFormView } from './TabbedFormView';\n/**\r\n * Form layout where inputs are divided by tab, one input per line.\r\n *\r\n * Pass FormTab components as children.\r\n *\r\n * @example\r\n *\r\n * import * as React from \"react\";\r\n * import {\r\n *     Edit,\r\n *     TabbedForm,\r\n *     FormTab,\r\n *     Datagrid,\r\n *     TextField,\r\n *     DateField,\r\n *     TextInput,\r\n *     ReferenceManyField,\r\n *     NumberInput,\r\n *     DateInput,\r\n *     BooleanInput,\r\n *     EditButton\r\n * } from 'react-admin';\r\n *\r\n * export const PostEdit = (props) => (\r\n *     <Edit {...props}>\r\n *         <TabbedForm>\r\n *             <FormTab label=\"summary\">\r\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\r\n *                 <TextInput source=\"title\" validate={required()} />\r\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\r\n *             </FormTab>\r\n *             <FormTab label=\"body\">\r\n *                 <RichTextInput source=\"body\" validate={required()} addLabel={false} />\r\n *             </FormTab>\r\n *             <FormTab label=\"Miscellaneous\">\r\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\r\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\r\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\r\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\r\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\r\n *             </FormTab>\r\n *             <FormTab label=\"comments\">\r\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" addLabel={false}>\r\n *                     <Datagrid>\r\n *                         <TextField source=\"body\" />\r\n *                         <DateField source=\"created_at\" />\r\n *                         <EditButton />\r\n *                     </Datagrid>\r\n *                 </ReferenceManyField>\r\n *             </FormTab>\r\n *         </TabbedForm>\r\n *     </Edit>\r\n * );\r\n *\r\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\r\n * @prop {ReactElement[]} FormTab elements\r\n * @prop {Object} initialValues\r\n * @prop {Function} validate\r\n * @prop {boolean} submitOnEnter\r\n * @prop {string} redirect\r\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\r\n * @prop {string} variant Apply variant to all inputs. Possible values are 'standard', 'outlined', and 'filled' (default)\r\n * @prop {string} margin Apply variant to all inputs. Possible values are 'none', 'normal', and 'dense' (default)\r\n * @prop {boolean} sanitizeEmptyValues Whether or not deleted record attributes should be recreated with a `null` value (default: true)\r\n *\r\n * @param {Props} props\r\n */\n\nexport var TabbedForm = function TabbedForm(props) {\n  return React.createElement(FormWithRedirect, __assign({}, props, {\n    render: function render(formProps) {\n      return React.createElement(TabbedFormView, __assign({}, formProps));\n    }\n  }));\n};\nTabbedForm.propTypes = {\n  children: PropTypes.node,\n  initialValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  // @ts-ignore\n  record: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  save: PropTypes.func,\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  undoable: PropTypes.bool,\n  validate: PropTypes.func,\n  sanitizeEmptyValues: PropTypes.bool\n};\nexport var findTabsWithErrors = function findTabsWithErrors(children, errors) {\n  console.warn('Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/CreateEdit.html#grouping-inputs');\n  return Children.toArray(children).reduce(function (acc, child) {\n    if (!isValidElement(child)) {\n      return acc;\n    }\n\n    var inputs = Children.toArray(child.props.children);\n\n    if (inputs.some(function (input) {\n      return isValidElement(input) && get(errors, input.props.source);\n    })) {\n      return __spreadArrays(acc, [child.props.label]);\n    }\n\n    return acc;\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}