{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences } from '../reducer';\n\nvar referenceSource = function referenceSource(resource, source) {\n  return resource + \"@\" + source;\n};\n/**\r\n * Call the dataProvider.getList() method return the resolved result\r\n * as well as the loading state.\r\n *\r\n * React-admin uses a different store location for the result of this query\r\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\r\n * the ids and total for the resource.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false, refetch }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\r\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The referenced resource name, e.g. 'tags'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\r\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\r\n * @param {Object} options Options object to pass to the dataProvider.\r\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\r\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\r\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\r\n *\r\n * @example\r\n *\r\n * import { useGetMatching } from 'react-admin';\r\n *\r\n * const PostTags = () => {\r\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\r\n *     const { data, loading, error } = useGetMatching(\r\n *         'tags',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' },\r\n *         {},\r\n *         'tag_ids',\r\n *         'posts',\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{data.map(tag =>\r\n *         <li key={tag.id}>{tag.name}</li>\r\n *     )}</ul>;\r\n * };\r\n */\n\n\nvar useGetMatching = function useGetMatching(resource, pagination, sort, filter, source, referencingResource, options) {\n  var relatedTo = referenceSource(referencingResource, source);\n  var payload = {\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  };\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    relatedTo: relatedTo,\n    action: CRUD_GET_MATCHING\n  }), function (state) {\n    return getPossibleReferenceValues(state, {\n      referenceSource: referenceSource,\n      resource: referencingResource,\n      source: source\n    });\n  }, function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', JSON.stringify(payload), 'total'], null);\n  }),\n      possibleValues = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var referenceState = useSelector(function (state) {\n    return getReferenceResource(state, {\n      reference: resource\n    });\n  });\n  var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n  return {\n    data: possibleReferences,\n    ids: possibleValues,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\n\nexport default useGetMatching;","map":null,"metadata":{},"sourceType":"module"}