{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AddIcon from '@material-ui/icons/AddCircleOutline';\nimport CloseIcon from '@material-ui/icons/RemoveCircleOutline';\nimport classNames from 'classnames';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useTranslate, ValidationError } from 'ra-core';\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport FormInput from './FormInput';\nvar useStyles = makeStyles(function (theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      padding: 0,\n      marginBottom: 0,\n      '& > li:last-child': {\n        borderBottom: 'none'\n      }\n    },\n    line: (_a = {\n      display: 'flex',\n      listStyleType: 'none',\n      borderBottom: \"solid 1px \" + theme.palette.divider\n    }, _a[theme.breakpoints.down('xs')] = {\n      display: 'block'\n    }, _a['&.fade-enter'] = {\n      opacity: 0.01,\n      transform: 'translateX(100vw)'\n    }, _a['&.fade-enter-active'] = {\n      opacity: 1,\n      transform: 'translateX(0)',\n      transition: 'all 500ms ease-in'\n    }, _a['&.fade-exit'] = {\n      opacity: 1,\n      transform: 'translateX(0)'\n    }, _a['&.fade-exit-active'] = {\n      opacity: 0.01,\n      transform: 'translateX(100vw)',\n      transition: 'all 500ms ease-in'\n    }, _a),\n    index: (_b = {\n      width: '3em',\n      paddingTop: '1em'\n    }, _b[theme.breakpoints.down('sm')] = {\n      display: 'none'\n    }, _b),\n    form: {\n      flex: 2\n    },\n    action: {\n      paddingTop: '0.5em'\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1)\n    }\n  };\n}, {\n  name: 'RaSimpleFormIterator'\n});\n\nvar DefaultAddButton = function DefaultAddButton(props) {\n  var classes = useStyles(props);\n  var translate = useTranslate();\n  return React.createElement(Button, __assign({\n    size: \"small\"\n  }, props), React.createElement(AddIcon, {\n    className: classes.leftIcon\n  }), translate('ra.action.add'));\n};\n\nvar DefaultLabelFn = function DefaultLabelFn(index) {\n  return index + 1;\n};\n\nvar DefaultRemoveButton = function DefaultRemoveButton(props) {\n  var classes = useStyles(props);\n  var translate = useTranslate();\n  return React.createElement(Button, __assign({\n    size: \"small\"\n  }, props), React.createElement(CloseIcon, {\n    className: classes.leftIcon\n  }), translate('ra.action.remove'));\n};\n\nvar SimpleFormIterator = function SimpleFormIterator(props) {\n  var _a = props.addButton,\n      addButton = _a === void 0 ? React.createElement(DefaultAddButton, null) : _a,\n      _b = props.removeButton,\n      removeButton = _b === void 0 ? React.createElement(DefaultRemoveButton, null) : _b,\n      basePath = props.basePath,\n      children = props.children,\n      className = props.className,\n      fields = props.fields,\n      _c = props.meta,\n      error = _c.error,\n      submitFailed = _c.submitFailed,\n      record = props.record,\n      resource = props.resource,\n      source = props.source,\n      disabled = props.disabled,\n      disableAdd = props.disableAdd,\n      disableRemove = props.disableRemove,\n      variant = props.variant,\n      margin = props.margin,\n      TransitionProps = props.TransitionProps,\n      defaultValue = props.defaultValue,\n      _d = props.getItemLabel,\n      getItemLabel = _d === void 0 ? DefaultLabelFn : _d;\n  var classes = useStyles(props);\n  var nodeRef = useRef(null); // We need a unique id for each field for a proper enter/exit animation\n  // so we keep an internal map between the field position and an auto-increment id\n\n  var nextId = useRef(fields && fields.length ? fields.length : defaultValue ? defaultValue.length : 0); // We check whether we have a defaultValue (which must be an array) before checking\n  // the fields prop which will always be empty for a new record.\n  // Without it, our ids wouldn't match the default value and we would get key warnings\n  // on the CssTransition element inside our render method\n\n  var ids = useRef(nextId.current > 0 ? Array.from(Array(nextId.current).keys()) : []);\n\n  var removeField = function removeField(index) {\n    return function () {\n      ids.current.splice(index, 1);\n      fields.remove(index);\n    };\n  }; // Returns a boolean to indicate whether to disable the remove button for certain fields.\n  // If disableRemove is a function, then call the function with the current record to\n  // determining if the button should be disabled. Otherwise, use a boolean property that\n  // enables or disables the button for all of the fields.\n\n\n  var disableRemoveField = function disableRemoveField(record, disableRemove) {\n    if (typeof disableRemove === 'boolean') {\n      return disableRemove;\n    }\n\n    return disableRemove && disableRemove(record);\n  };\n\n  var addField = function addField() {\n    ids.current.push(nextId.current++);\n    fields.push(undefined);\n  }; // add field and call the onClick event of the button passed as addButton prop\n\n\n  var handleAddButtonClick = function handleAddButtonClick(originalOnClickHandler) {\n    return function (event) {\n      addField();\n\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  }; // remove field and call the onClick event of the button passed as removeButton prop\n\n\n  var handleRemoveButtonClick = function handleRemoveButtonClick(originalOnClickHandler, index) {\n    return function (event) {\n      removeField(index)();\n\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n\n  var records = get(record, source);\n  return fields ? React.createElement(\"ul\", {\n    className: classNames(classes.root, className)\n  }, submitFailed && typeof error !== 'object' && error && React.createElement(FormHelperText, {\n    error: true\n  }, React.createElement(ValidationError, {\n    error: error\n  })), React.createElement(TransitionGroup, {\n    component: null\n  }, fields.map(function (member, index) {\n    return React.createElement(CSSTransition, __assign({\n      nodeRef: nodeRef,\n      key: ids.current[index],\n      timeout: 500,\n      classNames: \"fade\"\n    }, TransitionProps), React.createElement(\"li\", {\n      className: classes.line\n    }, React.createElement(Typography, {\n      variant: \"body1\",\n      className: classes.index\n    }, getItemLabel(index)), React.createElement(\"section\", {\n      className: classes.form\n    }, Children.map(children, function (input, index2) {\n      if (!isValidElement(input)) {\n        return null;\n      }\n\n      var _a = input.props,\n          source = _a.source,\n          inputProps = __rest(_a, [\"source\"]);\n\n      return React.createElement(FormInput, {\n        basePath: input.props.basePath || basePath,\n        input: cloneElement(input, __assign({\n          source: source ? member + \".\" + source : member,\n          index: source ? undefined : index2,\n          label: typeof input.props.label === 'undefined' ? source ? \"resources.\" + resource + \".fields.\" + source : undefined : input.props.label,\n          disabled: disabled\n        }, inputProps)),\n        record: records && records[index] || {},\n        resource: resource,\n        variant: variant,\n        margin: margin\n      });\n    })), !disabled && !disableRemoveField(records && records[index] || {}, disableRemove) && React.createElement(\"span\", {\n      className: classes.action\n    }, cloneElement(removeButton, {\n      onClick: handleRemoveButtonClick(removeButton.props.onClick, index),\n      className: classNames('button-remove', \"button-remove-\" + source + \"-\" + index)\n    }))));\n  })), !disabled && !disableAdd && React.createElement(\"li\", {\n    className: classes.line\n  }, React.createElement(\"span\", {\n    className: classes.action\n  }, cloneElement(addButton, {\n    onClick: handleAddButtonClick(addButton.props.onClick),\n    className: classNames('button-add', \"button-add-\" + source)\n  })))) : null;\n};\n\nSimpleFormIterator.defaultProps = {\n  disableAdd: false,\n  disableRemove: false\n};\nSimpleFormIterator.propTypes = {\n  defaultValue: PropTypes.any,\n  addButton: PropTypes.element,\n  removeButton: PropTypes.element,\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  // @ts-ignore\n  fields: PropTypes.object,\n  meta: PropTypes.object,\n  // @ts-ignore\n  record: PropTypes.object,\n  source: PropTypes.string,\n  resource: PropTypes.string,\n  translate: PropTypes.func,\n  disableAdd: PropTypes.bool,\n  disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  TransitionProps: PropTypes.shape({})\n};\nexport default SimpleFormIterator;","map":null,"metadata":{},"sourceType":"module"}