{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormWithRedirect } from 'ra-core';\nimport { SimpleFormView } from './SimpleFormView';\n/**\r\n * Form with a one column layout, one input per line.\r\n *\r\n * Pass input components as children.\r\n *\r\n * @example\r\n *\r\n * import * as React from \"react\";\r\n * import { Create, Edit, SimpleForm, TextInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton } from 'react-admin';\r\n * import RichTextInput from 'ra-input-rich-text';\r\n *\r\n * export const PostCreate = (props) => (\r\n *     <Create {...props}>\r\n *         <SimpleForm>\r\n *             <TextInput source=\"title\" />\r\n *             <TextInput source=\"teaser\" options={{ multiline: true }} />\r\n *             <RichTextInput source=\"body\" />\r\n *             <DateInput label=\"Publication date\" source=\"published_at\" defaultValue={new Date()} />\r\n *         </SimpleForm>\r\n *     </Create>\r\n * );\r\n *\r\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\r\n * @prop {ReactElement[]} children Input elements\r\n * @prop {Object} initialValues\r\n * @prop {Function} validate\r\n * @prop {boolean} submitOnEnter\r\n * @prop {string} redirect\r\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\r\n * @prop {string} variant Apply variant to all inputs. Possible values are 'standard', 'outlined', and 'filled' (default)\r\n * @prop {string} margin Apply variant to all inputs. Possible values are 'none', 'normal', and 'dense' (default)\r\n * @prop {boolean} sanitizeEmptyValues Whether or not deleted record attributes should be recreated with a `null` value (default: true)\r\n *\r\n * @param {Props} props\r\n */\n\nvar SimpleForm = function SimpleForm(props) {\n  return React.createElement(FormWithRedirect, __assign({}, props, {\n    render: function render(formProps) {\n      return React.createElement(SimpleFormView, __assign({}, formProps));\n    }\n  }));\n};\n\nSimpleForm.propTypes = {\n  children: PropTypes.node,\n  initialValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  // @ts-ignore\n  record: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  save: PropTypes.func,\n  saving: PropTypes.bool,\n  submitOnEnter: PropTypes.bool,\n  toolbar: PropTypes.element,\n  undoable: PropTypes.bool,\n  validate: PropTypes.func,\n  version: PropTypes.number,\n  sanitizeEmptyValues: PropTypes.bool\n};\nexport default SimpleForm;","map":null,"metadata":{},"sourceType":"module"}