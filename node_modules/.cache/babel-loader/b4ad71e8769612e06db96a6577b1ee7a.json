{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useCreateContext, useResourceDefinition } from 'ra-core';\n/**\r\n * Action Toolbar for the Create view\r\n *\r\n * Internal component. If you want to add or remove actions for a Create view,\r\n * write your own CreateActions Component. Then, in the <Create> component,\r\n * use it in the `actions` prop to pass a custom component.\r\n *\r\n * @example\r\n *     import Button from '@material-ui/core/Button';\r\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\r\n *\r\n *     const PostCreateActions = ({ basePath }) => (\r\n *         <TopToolbar>\r\n *             <ListButton basePath={basePath} />\r\n *             // Add your custom actions here //\r\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\r\n *         </TopToolbar>\r\n *     );\r\n *\r\n *     export const PostCreate = (props) => (\r\n *         <Create actions={<PostCreateActions />} {...props}>\r\n *             ...\r\n *         </Create>\r\n *     );\r\n */\n\nexport var CreateActions = function CreateActions(_a) {\n  var className = _a.className,\n      rest = __rest(_a, [\"className\"]);\n\n  var basePath = useCreateContext(rest).basePath;\n  var hasList = useResourceDefinition(rest).hasList;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, {\n    basePath: basePath\n  }));\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var _b = _a.basePath,\n      basePath = _b === void 0 ? null : _b,\n      _c = _a.className,\n      className = _c === void 0 ? null : _c,\n      _d = _a.hasList,\n      hasList = _d === void 0 ? null : _d,\n      _e = _a.resource,\n      resource = _e === void 0 ? null : _e,\n      rest = __rest(_a, [\"basePath\", \"className\", \"hasList\", \"resource\"]);\n\n  return rest;\n};\n\nCreateActions.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}