{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport classnames from 'classnames';\nimport { useRecordContext } from 'ra-core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\n\nvar FileField = function FileField(props) {\n  var className = props.className,\n      classesOverride = props.classes,\n      emptyText = props.emptyText,\n      source = props.source,\n      title = props.title,\n      src = props.src,\n      target = props.target,\n      download = props.download,\n      ping = props.ping,\n      rel = props.rel,\n      rest = __rest(props, [\"className\", \"classes\", \"emptyText\", \"source\", \"title\", \"src\", \"target\", \"download\", \"ping\", \"rel\"]);\n\n  var record = useRecordContext(props);\n  var sourceValue = get(record, source);\n  var classes = useStyles(props);\n\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText) : React.createElement(\"div\", __assign({\n      className: classnames(classes.root, className)\n    }, sanitizeFieldRestProps(rest)));\n  }\n\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(\"ul\", __assign({\n      className: classnames(classes.root, className)\n    }, sanitizeFieldRestProps(rest)), sourceValue.map(function (file, index) {\n      var fileTitleValue = get(file, title) || title;\n      var srcValue = get(file, src) || title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"a\", {\n        href: srcValue,\n        title: fileTitleValue,\n        target: target,\n        download: download,\n        ping: ping,\n        rel: rel\n      }, fileTitleValue));\n    }));\n  }\n\n  var titleValue = get(record, title) || title;\n  return React.createElement(\"div\", __assign({\n    className: classnames(classes.root, className)\n  }, sanitizeFieldRestProps(rest)), React.createElement(\"a\", {\n    href: sourceValue,\n    title: titleValue,\n    target: target,\n    download: download,\n    ping: ping,\n    rel: rel\n  }, titleValue));\n};\n\nFileField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles({\n  root: {\n    display: 'inline-block'\n  }\n}, {\n  name: 'RaFileField'\n});\nFileField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  src: PropTypes.string,\n  title: PropTypes.string,\n  target: PropTypes.string,\n  download: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  ping: PropTypes.string,\n  rel: PropTypes.string\n});\nexport default FileField;","map":null,"metadata":{},"sourceType":"module"}