{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo, useMemo } from 'react';\nimport { InputAdornment } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Form } from 'react-final-form';\nimport { useTranslate, useListFilterContext } from 'ra-core';\nimport TextInput from '../../input/TextInput';\n/**\n * Form and search input for doing a full-text search filter.\n *\n * Triggers a search on change (with debounce).\n *\n * @example\n *\n * const FilterPanel = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterLiveSearch source=\"title\" />\n *         </CardContent>\n *     </Card>\n * );\n */\n\nvar FilterLiveSearch = function FilterLiveSearch(props) {\n  var _a = props.source,\n      source = _a === void 0 ? 'q' : _a,\n      rest = __rest(props, [\"source\"]);\n\n  var _b = useListFilterContext(),\n      filterValues = _b.filterValues,\n      setFilters = _b.setFilters;\n\n  var translate = useTranslate();\n\n  var onSearchChange = function onSearchChange(event) {\n    var _a;\n\n    if (event.target) {\n      setFilters(__assign(__assign({}, filterValues), (_a = {}, _a[source] = event.target.value, _a)), null);\n    } else {\n      var _b = filterValues,\n          _c = source,\n          _1 = _b[_c],\n          filters = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      setFilters(filters, null);\n    }\n  };\n\n  var initialValues = useMemo(function () {\n    var _a;\n\n    return _a = {}, _a[source] = filterValues[source], _a;\n  }, [filterValues, source]);\n\n  var onSubmit = function onSubmit() {\n    return undefined;\n  };\n\n  return React.createElement(Form, {\n    initialValues: initialValues,\n    onSubmit: onSubmit\n  }, function () {\n    return React.createElement(TextInput, __assign({\n      resettable: true,\n      helperText: false,\n      source: source,\n      label: translate('ra.action.search'),\n      InputProps: {\n        endAdornment: React.createElement(InputAdornment, {\n          position: \"end\"\n        }, React.createElement(SearchIcon, {\n          color: \"disabled\"\n        }))\n      },\n      onChange: onSearchChange\n    }, rest));\n  });\n};\n\nexport default memo(FilterLiveSearch);","map":null,"metadata":{},"sourceType":"module"}