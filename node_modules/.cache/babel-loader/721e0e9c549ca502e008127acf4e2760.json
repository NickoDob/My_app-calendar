{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useEffect, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useListContext, useResourceContext } from 'ra-core';\nimport { Form, FormSpy } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport classnames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport lodashSet from 'lodash/set';\nimport lodashGet from 'lodash/get';\nimport FilterFormInput from './FilterFormInput';\nimport { FilterContext } from '../FilterContext';\nexport var FilterForm = function FilterForm(props) {\n  var _a = props.classes,\n      classes = _a === void 0 ? {} : _a,\n      className = props.className,\n      margin = props.margin,\n      filters = props.filters,\n      variant = props.variant,\n      initialValues = props.initialValues,\n      rest = __rest(props, [\"classes\", \"className\", \"margin\", \"filters\", \"variant\", \"initialValues\"]);\n\n  var resource = useResourceContext(props);\n\n  var _b = useListContext(props),\n      _c = _b.displayedFilters,\n      displayedFilters = _c === void 0 ? {} : _c,\n      hideFilter = _b.hideFilter;\n\n  useEffect(function () {\n    filters.forEach(function (filter) {\n      if (filter.props.alwaysOn && filter.props.defaultValue) {\n        throw new Error('Cannot use alwaysOn and defaultValue on a filter input. Please set the filterDefaultValues props on the <List> element instead.');\n      }\n    });\n  }, [filters]);\n\n  var getShownFilters = function getShownFilters() {\n    return filters.filter(function (filterElement) {\n      return filterElement.props.alwaysOn || displayedFilters[filterElement.props.source] || typeof lodashGet(initialValues, filterElement.props.source) !== 'undefined';\n    });\n  };\n\n  var handleHide = useCallback(function (event) {\n    return hideFilter(event.currentTarget.dataset.key);\n  }, [hideFilter]);\n  return React.createElement(\"form\", __assign({\n    className: classnames(className, classes.form)\n  }, sanitizeRestProps(rest), {\n    onSubmit: handleSubmit\n  }), getShownFilters().map(function (filterElement) {\n    return React.createElement(FilterFormInput, {\n      key: filterElement.props.source,\n      filterElement: filterElement,\n      handleHide: handleHide,\n      resource: resource,\n      variant: filterElement.props.variant || variant,\n      margin: filterElement.props.margin || margin\n    });\n  }), React.createElement(\"div\", {\n    className: classes.clearFix\n  }));\n};\n\nvar handleSubmit = function handleSubmit(event) {\n  event.preventDefault();\n  return false;\n};\n\nFilterForm.propTypes = {\n  resource: PropTypes.string,\n  filters: PropTypes.arrayOf(PropTypes.node).isRequired,\n  displayedFilters: PropTypes.object,\n  hideFilter: PropTypes.func,\n  initialValues: PropTypes.object,\n  classes: PropTypes.object,\n  className: PropTypes.string\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    form: {\n      marginTop: -theme.spacing(2),\n      paddingTop: 0,\n      display: 'flex',\n      alignItems: 'flex-end',\n      flexWrap: 'wrap',\n      minHeight: theme.spacing(10),\n      pointerEvents: 'none'\n    },\n    clearFix: {\n      clear: 'right'\n    }\n  };\n}, {\n  name: 'RaFilterForm'\n});\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var active = _a.active,\n      dirty = _a.dirty,\n      dirtyFields = _a.dirtyFields,\n      dirtyFieldsSinceLastSubmit = _a.dirtyFieldsSinceLastSubmit,\n      dirtySinceLastSubmit = _a.dirtySinceLastSubmit,\n      displayedFilters = _a.displayedFilters,\n      error = _a.error,\n      errors = _a.errors,\n      filterValues = _a.filterValues,\n      form = _a.form,\n      handleSubmit = _a.handleSubmit,\n      hasSubmitErrors = _a.hasSubmitErrors,\n      hasValidationErrors = _a.hasValidationErrors,\n      hideFilter = _a.hideFilter,\n      invalid = _a.invalid,\n      modified = _a.modified,\n      modifiedSinceLastSubmit = _a.modifiedSinceLastSubmit,\n      pristine = _a.pristine,\n      resource = _a.resource,\n      setFilters = _a.setFilters,\n      submitError = _a.submitError,\n      submitErrors = _a.submitErrors,\n      submitFailed = _a.submitFailed,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting,\n      touched = _a.touched,\n      valid = _a.valid,\n      validating = _a.validating,\n      values = _a.values,\n      visited = _a.visited,\n      props = __rest(_a, [\"active\", \"dirty\", \"dirtyFields\", \"dirtyFieldsSinceLastSubmit\", \"dirtySinceLastSubmit\", \"displayedFilters\", \"error\", \"errors\", \"filterValues\", \"form\", \"handleSubmit\", \"hasSubmitErrors\", \"hasValidationErrors\", \"hideFilter\", \"invalid\", \"modified\", \"modifiedSinceLastSubmit\", \"pristine\", \"resource\", \"setFilters\", \"submitError\", \"submitErrors\", \"submitFailed\", \"submitSucceeded\", \"submitting\", \"touched\", \"valid\", \"validating\", \"values\", \"visited\"]);\n\n  return props;\n};\n\nexport var mergeInitialValuesWithDefaultValues = function mergeInitialValuesWithDefaultValues(initialValues, filters) {\n  return __assign(__assign({}, filters.filter(function (filterElement) {\n    return filterElement.props.alwaysOn && filterElement.props.defaultValue;\n  }).reduce(function (acc, filterElement) {\n    return lodashSet(__assign({}, acc), filterElement.props.source, filterElement.props.defaultValue);\n  }, {})), initialValues);\n};\n\nvar EnhancedFilterForm = function EnhancedFilterForm(props) {\n  var classesOverride = props.classes,\n      filtersProps = props.filters,\n      initialValues = props.initialValues,\n      rest = __rest(props, [\"classes\", \"filters\", \"initialValues\"]);\n\n  var classes = useStyles(props);\n\n  var _a = useListContext(props),\n      setFilters = _a.setFilters,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues;\n\n  var filters = useContext(FilterContext) || filtersProps;\n  var mergedInitialValuesWithDefaultValues = mergeInitialValuesWithDefaultValues(initialValues || filterValues, filters);\n  return React.createElement(Form, {\n    onSubmit: handleFinalFormSubmit,\n    initialValues: mergedInitialValuesWithDefaultValues,\n    mutators: __assign({}, arrayMutators),\n    render: function render(formProps) {\n      return React.createElement(React.Fragment, null, React.createElement(FormSpy, {\n        subscription: FormSpySubscription,\n        onChange: function onChange(_a) {\n          var pristine = _a.pristine,\n              values = _a.values,\n              invalid = _a.invalid;\n\n          if (pristine || invalid) {\n            return;\n          }\n\n          setFilters(values, displayedFilters);\n        }\n      }), React.createElement(FilterForm, __assign({\n        classes: classes\n      }, formProps, rest, {\n        filters: filters\n      })));\n    }\n  });\n};\n\nvar handleFinalFormSubmit = function handleFinalFormSubmit() {}; // Options to instruct the FormSpy that it should only listen to the values and pristine changes\n\n\nvar FormSpySubscription = {\n  values: true,\n  pristine: true,\n  invalid: true\n};\nexport default EnhancedFilterForm;","map":null,"metadata":{},"sourceType":"module"}