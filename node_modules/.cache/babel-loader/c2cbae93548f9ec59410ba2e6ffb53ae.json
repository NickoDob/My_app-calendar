{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMutationMode } from 'ra-core';\nimport DeleteWithUndoButton from './DeleteWithUndoButton';\nimport DeleteWithConfirmButton from './DeleteWithConfirmButton';\n/**\r\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\r\n *\r\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\r\n * @prop {boolean} undoable Confirm the deletion using an undo button in a notification or a confirmation dialog. Defaults to 'false'.\r\n * @prop {Object} record The current resource record\r\n * @prop {string} className\r\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\r\n * @prop {boolean} disabled Disable the button.\r\n * @prop {string} variant Material-ui variant for the button. Defaults to 'contained'.\r\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from material-ui.\r\n *\r\n * @param {Props} props\r\n *\r\n * @example Usage in the <TopToolbar> of an <Edit> form\r\n *\r\n * import * as React from 'react';\r\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\r\n *\r\n * const EditActions = props => {\r\n *     const { basePath, data, resource } = props;\r\n *     return (\r\n *         <TopToolbar>\r\n *             <DeleteButton\r\n *                 basePath={basePath}\r\n *                 record={data}\r\n *                 resource={resource}\r\n *                 undoable={false} // Renders the <DeleteWithConfirmButton>\r\n *             />\r\n *         </TopToolbar>\r\n *     );\r\n * };\r\n *\r\n * const Edit = props => {\r\n *     return <Edit actions={<EditActions />} {...props} />;\r\n * };\r\n */\n\nvar DeleteButton = function DeleteButton(_a) {\n  var undoable = _a.undoable,\n      mutationMode = _a.mutationMode,\n      record = _a.record,\n      props = __rest(_a, [\"undoable\", \"mutationMode\", \"record\"]);\n\n  var mode = getMutationMode(mutationMode, undoable);\n\n  if (!record || record.id == null) {\n    return null;\n  }\n\n  return mode === 'undoable' ? React.createElement(DeleteWithUndoButton, __assign({\n    record: record\n  }, props)) : React.createElement(DeleteWithConfirmButton, __assign({\n    mutationMode: mode,\n    record: record\n  }, props));\n};\n\nDeleteButton.propTypes = {\n  basePath: PropTypes.string,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  // @ts-ignore\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  undoable: PropTypes.bool,\n  icon: PropTypes.element\n};\nexport default DeleteButton;","map":null,"metadata":{},"sourceType":"module"}