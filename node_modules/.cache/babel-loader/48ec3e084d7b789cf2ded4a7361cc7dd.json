{"ast":null,"code":"import { useGetMany } from '../dataProvider';\n/**\r\n * @typedef ReferenceProps\r\n * @type {Object}\r\n * @property {boolean} loading: boolean indicating if the reference is loading\r\n * @property {boolean} loaded: boolean indicating if the reference has loaded\r\n * @property {Object} referenceRecord: the referenced record.\r\n */\n\n/**\r\n * Fetch reference record, and return it when available\r\n *\r\n * The reference prop should be the name of one of the <Resource> components\r\n * added as <Admin> child.\r\n *\r\n * @example\r\n *\r\n * const { loading, loaded, referenceRecord } = useReference({\r\n *     id: 7,\r\n *     reference: 'users',\r\n * });\r\n *\r\n * @param {Object} option\r\n * @param {string} option.reference The linked resource name\r\n * @param {string} option.id The id of the reference\r\n *\r\n * @returns {ReferenceProps} The reference record\r\n */\n\nexport var useReference = function useReference(_a) {\n  var reference = _a.reference,\n      id = _a.id;\n\n  var _b = useGetMany(reference, [id]),\n      data = _b.data,\n      error = _b.error,\n      loading = _b.loading,\n      loaded = _b.loaded,\n      refetch = _b.refetch;\n\n  return {\n    referenceRecord: error ? undefined : data[0],\n    refetch: refetch,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\nexport default useReference;","map":null,"metadata":{},"sourceType":"module"}