{"ast":null,"code":"import inferElementFromValues from './inferElementFromValues';\nimport getValuesFromRecords from './getValuesFromRecords';\n/**\r\n * Get a list of React-admin field components from a list of records\r\n *\r\n * @example\r\n * const records = [\r\n *     {\r\n *         \"id\": 1,\r\n *         \"title\": \"Lorem Ipsum\",\r\n *         \"views\": 254,\r\n *         \"user_id\": 123,\r\n *     },\r\n *     {\r\n *         \"id\": 2,\r\n *         \"title\": \"Sic Dolor amet\",\r\n *         \"user_id\": 456,\r\n *     },\r\n * ];\r\n * const types = {\r\n *     id: NumberField,\r\n *     string: TextField,\r\n *     number: NumberField,\r\n *     reference: ReferenceField\r\n * };\r\n * const components = getElementsFromRecords(records, types);\r\n * // [\r\n * //    <NumberField source=\"id\" />,\r\n * //    <TextField source=\"title\" />,\r\n * //    <NumberField source=\"views\" />,\r\n * //    <ReferenceField source=\"user_id\" reference=\"users\"><NumberField source=\"id\" /></ReferenceField>,\r\n * // ];\r\n */\n\nexport default (function (records, types) {\n  var fieldValues = getValuesFromRecords(records);\n  return Object.keys(fieldValues).reduce(function (fields, fieldName) {\n    return fields.concat(inferElementFromValues(fieldName, fieldValues[fieldName], types));\n  }, []).filter(function (inferredElement) {\n    return inferredElement.isDefined();\n  });\n});","map":null,"metadata":{},"sourceType":"module"}