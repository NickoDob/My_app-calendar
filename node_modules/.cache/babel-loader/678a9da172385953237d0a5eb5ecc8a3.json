{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\n\nvar getPermissionsWithoutProvider = function getPermissionsWithoutProvider() {\n  return Promise.resolve([]);\n};\n/**\r\n * Get a callback for calling the authProvider.getPermissions() method.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} getPermissions callback\r\n *\r\n * This is a low level hook. See those more specialized hooks\r\n * offering state handling.\r\n *\r\n * @see usePermissions\r\n *\r\n * @example\r\n *\r\n * import { useGetPermissions } from 'react-admin';\r\n *\r\n * const Roles = () => {\r\n *     const [permissions, setPermissions] = useState([]);\r\n *     const getPermissions = useGetPermissions();\r\n *     useEffect(() => {\r\n *         getPermissions().then(permissions => setPermissions(permissions))\r\n *     }, [])\r\n *     return (\r\n *         <ul>\r\n *             {permissions.map((permission, key) => (\r\n *                 <li key={key}>{permission}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n */\n\n\nvar useGetPermissions = function useGetPermissions() {\n  var authProvider = useAuthProvider();\n  var getPermissions = useCallback(function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.getPermissions(params);\n  }, [authProvider]);\n  return authProvider ? getPermissions : getPermissionsWithoutProvider;\n};\n\nexport default useGetPermissions;","map":null,"metadata":{},"sourceType":"module"}