{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  data: {},\n  ids: []\n};\n\nvar getDataAndIds = function getDataAndIds(record, source, fieldKey) {\n  var list = get(record, source);\n\n  if (!list) {\n    return initialState;\n  }\n\n  return fieldKey ? {\n    data: list.reduce(function (prev, item) {\n      prev[item[fieldKey]] = item;\n      return prev;\n    }, {}),\n    ids: list.map(function (item) {\n      return item[fieldKey];\n    })\n  } : {\n    data: list.reduce(function (prev, item) {\n      prev[JSON.stringify(item)] = item;\n      return prev;\n    }, {}),\n    ids: list.map(JSON.stringify)\n  };\n};\n/**\r\n * Display a collection\r\n *\r\n * Ideal for embedded arrays of objects, e.g.\r\n * {\r\n *   id: 123\r\n *   tags: [\r\n *     { name: 'foo' },\r\n *     { name: 'bar' }\r\n *   ]\r\n * }\r\n *\r\n * The child must be an iterator component\r\n * (like <Datagrid> or <SingleFieldList>).\r\n *\r\n * @example Display all the backlinks of the current post as a <Datagrid>\r\n * // post = {\r\n * //   id: 123\r\n * //   backlinks: [\r\n * //       {\r\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\r\n * //           date: '2012-08-10T00:00:00.000Z',\r\n * //           url: 'http://example.com/foo/bar.html',\r\n * //       },\r\n * //       {\r\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\r\n * //           date: '2012-08-14T00:00:00.000Z',\r\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\r\n * //       }\r\n * //    ]\r\n * // }\r\n *     <ArrayField source=\"backlinks\">\r\n *         <Datagrid>\r\n *             <DateField source=\"date\" />\r\n *             <UrlField source=\"url\" />\r\n *         </Datagrid>\r\n *     </ArrayField>\r\n *\r\n * @example Display all the tags of the current post as <Chip> components\r\n * // post = {\r\n * //   id: 123\r\n * //   tags: [\r\n * //     { name: 'foo' },\r\n * //     { name: 'bar' }\r\n * //   ]\r\n * // }\r\n *     <ArrayField source=\"tags\">\r\n *         <SingleFieldList>\r\n *             <ChipField source=\"name\" />\r\n *         </SingleFieldList>\r\n *     </ArrayField>\r\n *\r\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\r\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\r\n *\r\n * @example\r\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\r\n *         ...\r\n *     </ArrayField>\r\n *\r\n * If you need to render a collection in a custom way, it's often simpler\r\n * to write your own component:\r\n *\r\n * @example\r\n *     const TagsField = ({ record }) => (\r\n *          <ul>\r\n *              {record.tags.map(item => (\r\n *                  <li key={item.name}>{item.name}</li>\r\n *              ))}\r\n *          </ul>\r\n *     );\r\n *     TagsField.defaultProps = { addLabel: true };\r\n */\n\n\nexport var ArrayField = memo(function (props) {\n  var addLabel = props.addLabel,\n      basePath = props.basePath,\n      children = props.children,\n      _record = props.record,\n      resource = props.resource,\n      sortable = props.sortable,\n      source = props.source,\n      fieldKey = props.fieldKey,\n      rest = __rest(props, [\"addLabel\", \"basePath\", \"children\", \"record\", \"resource\", \"sortable\", \"source\", \"fieldKey\"]);\n\n  var record = useRecordContext(props);\n\n  var _a = useState(initialState.ids),\n      ids = _a[0],\n      setIds = _a[1];\n\n  var _b = useState(initialState.data),\n      data = _b[0],\n      setData = _b[1];\n\n  useEffect(function () {\n    var _a = getDataAndIds(record, source, fieldKey),\n        ids = _a.ids,\n        data = _a.data;\n\n    setIds(ids);\n    setData(data);\n  }, [record, source, fieldKey]);\n  return React.createElement(ListContextProvider, {\n    value: {\n      ids: ids,\n      data: data,\n      loading: false,\n      basePath: basePath,\n      selectedIds: [],\n      currentSort: {\n        field: null,\n        order: null\n      },\n      displayedFilters: null,\n      filterValues: null,\n      hasCreate: null,\n      hideFilter: null,\n      loaded: null,\n      onSelect: null,\n      onToggleItem: null,\n      onUnselectItems: null,\n      page: null,\n      perPage: null,\n      resource: resource,\n      setFilters: null,\n      setPage: null,\n      setPerPage: null,\n      setSort: null,\n      showFilter: null,\n      total: null\n    }\n  }, cloneElement(Children.only(children), __assign({\n    ids: ids,\n    data: data,\n    loading: false,\n    basePath: basePath,\n    currentSort: {\n      field: null,\n      order: null\n    },\n    resource: resource\n  }, rest)));\n});\nArrayField.defaultProps = {\n  addLabel: true\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  fieldKey: PropTypes.string\n});\nArrayField.displayName = 'ArrayField';\nexport default ArrayField;","map":null,"metadata":{},"sourceType":"module"}