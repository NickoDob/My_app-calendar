{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { AppBar as MuiAppBar, IconButton, Toolbar, Tooltip, Typography, useMediaQuery } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { toggleSidebar, useTranslate, ComponentPropType } from 'ra-core';\nimport LoadingIndicator from './LoadingIndicator';\nimport DefaultUserMenu from './UserMenu';\nimport HideOnScroll from './HideOnScroll';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    toolbar: {\n      paddingRight: 24\n    },\n    menuButton: {\n      marginLeft: '0.2em',\n      marginRight: '0.2em'\n    },\n    menuButtonIconClosed: {\n      transition: theme.transitions.create(['transform'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      transform: 'rotate(0deg)'\n    },\n    menuButtonIconOpen: {\n      transition: theme.transitions.create(['transform'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      transform: 'rotate(180deg)'\n    },\n    title: {\n      flex: 1,\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden'\n    }\n  };\n}, {\n  name: 'RaAppBar'\n});\n/**\r\n * The AppBar component renders a custom MuiAppBar.\r\n *\r\n * @param {Object} props\r\n * @param {ReactNode} props.children React node/s to be render as children of the AppBar\r\n * @param {Object} props.classes CSS class names\r\n * @param {string} props.className CSS class applied to the MuiAppBar component\r\n * @param {string} props.color The color of the AppBar\r\n * @param {Component} props.logout The logout button component that will be pass to the UserMenu component\r\n * @param {boolean} props.open State of the <Admin/> Sidebar\r\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\r\n *\r\n * @example\r\n *\r\n * const MyAppBar = props => {\r\n *   const classes = useStyles();\r\n *   return (\r\n *       <AppBar {...props}>\r\n *           <Typography\r\n *               variant=\"h6\"\r\n *               color=\"inherit\"\r\n *               className={classes.title}\r\n *               id=\"react-admin-title\"\r\n *           />\r\n *       </AppBar>\r\n *   );\r\n *};\r\n *\r\n * @example Without a user menu\r\n *\r\n * const MyAppBar = props => {\r\n *   const classes = useStyles();\r\n *   return (\r\n *       <AppBar {...props} userMenu={false} />\r\n *   );\r\n *};\r\n */\n\nvar AppBar = function AppBar(props) {\n  var children = props.children,\n      classesOverride = props.classes,\n      className = props.className,\n      _a = props.color,\n      color = _a === void 0 ? 'secondary' : _a,\n      logout = props.logout,\n      open = props.open,\n      title = props.title,\n      userMenu = props.userMenu,\n      Container = props.container,\n      rest = __rest(props, [\"children\", \"classes\", \"className\", \"color\", \"logout\", \"open\", \"title\", \"userMenu\", \"container\"]);\n\n  var classes = useStyles(props);\n  var dispatch = useDispatch();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n  var translate = useTranslate();\n  return React.createElement(Container, null, React.createElement(MuiAppBar, __assign({\n    className: className,\n    color: color\n  }, rest), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: isXSmall ? 'regular' : 'dense',\n    className: classes.toolbar\n  }, React.createElement(Tooltip, {\n    title: translate(open ? 'ra.action.close_menu' : 'ra.action.open_menu', {\n      _: 'Open/Close menu'\n    }),\n    enterDelay: 500\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: function onClick() {\n      return dispatch(toggleSidebar());\n    },\n    className: classNames(classes.menuButton)\n  }, React.createElement(MenuIcon, {\n    classes: {\n      root: open ? classes.menuButtonIconOpen : classes.menuButtonIconClosed\n    }\n  }))), Children.count(children) === 0 ? React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"inherit\",\n    className: classes.title,\n    id: \"react-admin-title\"\n  }) : children, React.createElement(LoadingIndicator, null), typeof userMenu === 'boolean' ? userMenu === true ? React.createElement(DefaultUserMenu, {\n    logout: logout\n  }) : null : cloneElement(userMenu, {\n    logout: logout\n  }))));\n};\n\nAppBar.propTypes = {\n  children: PropTypes.node,\n  // @ts-ignore\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']),\n  container: ComponentPropType,\n  logout: PropTypes.element,\n  open: PropTypes.bool,\n  userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool])\n};\nAppBar.defaultProps = {\n  userMenu: React.createElement(DefaultUserMenu, null),\n  container: HideOnScroll\n};\nexport default memo(AppBar);","map":null,"metadata":{},"sourceType":"module"}