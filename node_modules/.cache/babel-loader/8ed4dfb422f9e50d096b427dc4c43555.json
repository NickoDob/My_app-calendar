{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { CRUD_DELETE } from '../../actions';\nimport { useRefresh, useNotify, useRedirect } from '../../sideEffect';\nimport { useResourceContext } from '../../core';\n/**\r\n * Prepare callback for a Delete button with undo support\r\n *\r\n * @example\r\n *\r\n * import React from 'react';\r\n * import ActionDelete from '@material-ui/icons/Delete';\r\n * import { Button, useDeleteWithUndoController } from 'react-admin';\r\n *\r\n * const DeleteButton = ({\r\n *     resource,\r\n *     record,\r\n *     basePath,\r\n *     redirect,\r\n *     onClick,\r\n *     ...rest\r\n * }) => {\r\n *     const { loading, handleDelete } = useDeleteWithUndoController({\r\n *         resource,\r\n *         record,\r\n *         basePath,\r\n *         redirect,\r\n *         onClick,\r\n *     });\r\n *\r\n *     return (\r\n *         <Button\r\n *             onClick={handleDelete}\r\n *             disabled={loading}\r\n *             label=\"ra.action.delete\"\r\n *             {...rest}\r\n *         >\r\n *             <ActionDelete />\r\n *         </Button>\r\n *     );\r\n * };\r\n */\n\nvar useDeleteWithUndoController = function useDeleteWithUndoController(props) {\n  var record = props.record,\n      basePath = props.basePath,\n      _a = props.redirect,\n      redirectTo = _a === void 0 ? 'list' : _a,\n      onClick = props.onClick,\n      onSuccess = props.onSuccess,\n      onFailure = props.onFailure;\n  var resource = useResourceContext(props);\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n\n  var _b = useDelete(resource, null, null, {\n    action: CRUD_DELETE,\n    onSuccess: onSuccess !== undefined ? onSuccess : function () {\n      notify('ra.notification.deleted', 'info', {\n        smart_count: 1\n      }, true);\n      redirect(redirectTo, basePath || \"/\" + resource);\n      refresh();\n    },\n    onFailure: onFailure !== undefined ? onFailure : function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n        _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n      });\n      refresh();\n    },\n    mutationMode: 'undoable'\n  }),\n      deleteOne = _b[0],\n      loading = _b[1].loading;\n\n  var handleDelete = useCallback(function (event) {\n    event.stopPropagation();\n    deleteOne({\n      payload: {\n        id: record.id,\n        previousData: record\n      }\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [deleteOne, onClick, record]);\n  return {\n    loading: loading,\n    handleDelete: handleDelete\n  };\n};\n\nexport default useDeleteWithUndoController;","map":null,"metadata":{},"sourceType":"module"}