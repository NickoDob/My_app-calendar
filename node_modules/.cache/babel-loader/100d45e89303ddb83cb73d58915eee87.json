{"ast":null,"code":"import * as React from 'react';\nimport ListContext from './ListContext';\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\nimport ListPaginationContext, { usePickPaginationContext } from './ListPaginationContext';\n/**\r\n * Create a List Context and several thematic List subcontext.\r\n *\r\n * Allows children to subscribe to part of the ListContext, and bail out of\r\n * rendering when some parts of the context that they don't depend on change\r\n * (because unfortunately React doesn't allow to use context selectors yet).\r\n *\r\n * @example\r\n *\r\n * const MyList = (props) => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListContextProvider value={controllerProps}>\r\n *             <MyListView>\r\n *         </ListContextProvider>\r\n *     );\r\n * };\r\n *\r\n * const MyListView = () => {\r\n *     const { data, ids, filterValues, setFilters } = useListContext();\r\n *     // or, to rerender only when filters change but not data\r\n *     const { filterValues, setFilters } = useListFilterContext();\r\n * }\r\n *\r\n * @see ListContext\r\n * @see ListFilterContext\r\n */\n\nvar ListContextProvider = function ListContextProvider(_a) {\n  var value = _a.value,\n      children = _a.children;\n  return React.createElement(ListContext.Provider, {\n    value: value\n  }, React.createElement(ListFilterContext.Provider, {\n    value: usePickFilterContext(value)\n  }, React.createElement(ListSortContext.Provider, {\n    value: usePickSortContext(value)\n  }, React.createElement(ListPaginationContext.Provider, {\n    value: usePickPaginationContext(value)\n  }, children))));\n};\n\nexport default ListContextProvider;","map":null,"metadata":{},"sourceType":"module"}