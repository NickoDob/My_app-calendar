{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContextProvider, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { useSelector } from 'react-redux';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\n/**\r\n * Render related records to the current one.\r\n *\r\n * You must define the fields to be passed to the iterator component as children.\r\n *\r\n * @example Display all the comments of the current post as a datagrid\r\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\r\n *     <Datagrid>\r\n *         <TextField source=\"id\" />\r\n *         <TextField source=\"body\" />\r\n *         <DateField source=\"created_at\" />\r\n *         <EditButton />\r\n *     </Datagrid>\r\n * </ReferenceManyField>\r\n *\r\n * @example Display all the books by the current author, only the title\r\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\r\n *     <SingleFieldList>\r\n *         <ChipField source=\"title\" />\r\n *     </SingleFieldList>\r\n * </ReferenceManyField>\r\n *\r\n * By default, restricts the displayed values to 25. You can extend this limit\r\n * by setting the `perPage` prop.\r\n *\r\n * @example\r\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\r\n *    ...\r\n * </ReferenceManyField>\r\n *\r\n * By default, orders the possible values by id desc. You can change this order\r\n * by setting the `sort` prop (an object with `field` and `order` properties).\r\n *\r\n * @example\r\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\r\n *    ...\r\n * </ReferenceManyField>\r\n *\r\n * Also, you can filter the query used to populate the possible values. Use the\r\n * `filter` prop for that.\r\n *\r\n * @example\r\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\r\n *    ...\r\n * </ReferenceManyField>\r\n */\n\nexport var ReferenceManyField = function ReferenceManyField(props) {\n  var basePath = props.basePath,\n      children = props.children,\n      filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source,\n      target = props.target;\n  var record = useRecordContext(props);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n  }\n\n  var isReferenceDeclared = useSelector(function (state) {\n    return typeof state.admin.resources[props.reference] !== 'undefined';\n  });\n\n  if (!isReferenceDeclared) {\n    throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceManyField reference=\\\"\" + props.reference + \"\\\">\");\n  }\n\n  var controllerProps = useReferenceManyFieldController({\n    basePath: basePath,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ReferenceManyFieldView, __assign({}, props, controllerProps))));\n};\nReferenceManyField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id',\n  addLabel: true\n};\nexport var ReferenceManyFieldView = function ReferenceManyFieldView(props) {\n  var basePath = props.basePath,\n      children = props.children,\n      pagination = props.pagination,\n      reference = props.reference,\n      rest = __rest(props, [\"basePath\", \"children\", \"pagination\", \"reference\"]);\n\n  return React.createElement(React.Fragment, null, cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), {\n    basePath: basePath,\n    resource: reference\n  })), pagination && props.total !== undefined && cloneElement(pagination));\n};\nReferenceManyFieldView.propTypes = {\n  basePath: PropTypes.string.isRequired,\n  children: PropTypes.element,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  setSort: PropTypes.func\n};\nexport default ReferenceManyField;","map":null,"metadata":{},"sourceType":"module"}