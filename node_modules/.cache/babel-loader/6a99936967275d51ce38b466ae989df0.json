{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\kolya\\\\IdeaProjects\\\\my-app2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\kolya\\\\IdeaProjects\\\\my-app2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kolya\\\\IdeaProjects\\\\my-app2\\\\src\\\\MyCalendar.js\";\nimport React, { useState, Component, useEffect, setState, setInterval } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './App.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport { Alert, useAlert } from 'react-alert';\nimport { userName } from './Home';\n\nfunction MyCalendar() {\n  var localizer = momentLocalizer(moment);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventsList = _useState2[0],\n      setEventsList = _useState2[1];\n\n  function handleSelect(_ref) {\n    var start = _ref.start,\n        end = _ref.end,\n        userName = _ref.userName;\n    var title = window.prompt(\"New Event name\");\n\n    if (title) {\n      var newEvent = {\n        userName: {\n          userName: userName\n        },\n        start: start,\n        end: end,\n        title: title\n      };\n      setEventsList([].concat(_toConsumableArray(eventsList), [newEvent]));\n    }\n  }\n\n  ;\n\n  function Clock(props) {\n    var _useState3 = useState(new Date()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        date = _useState4[0],\n        setDate = _useState4[1]; //Replaces componentDidMount and componentWillUnmount\n\n\n    useEffect(function () {\n      var timerID = setInterval(function () {\n        return tick();\n      }, 1000);\n      return function cleanup() {\n        clearInterval(timerID);\n      };\n    });\n\n    function tick() {\n      setDate(new Date());\n    }\n\n    function Alarm() {\n      var state = {\n        currentTime: '',\n        alarmTime: '11:58:05'\n      };\n      useEffect(function () {\n        var clock = setInterval(function () {\n          return setState({\n            currentTime: new Date().toLocaleTimeString('ru', {\n              hour12: false\n            })\n          });\n        }, 1000);\n        var interval = setInterval(function () {\n          if (state.currentTime === state.alarmTime) {\n            alert(\"its time!\");\n          } else {\n            console.log(\"not yet\");\n          }\n        }, 1000);\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      messages: {\n        next: 'Следущий',\n        previous: 'Предыдущий',\n        today: 'Сегодня',\n        month: 'Месяц',\n        week: 'Неделя',\n        day: 'День',\n        yesterday: 'Вчера',\n        tomorrow: 'Завтра',\n        agenda: 'Мероприятия',\n        noEventsInRange: 'Не найдено никаких мероприятий в текущем периоде.',\n        showMore: function showMore(total) {\n          return '+' + total + 'событий';\n        }\n      },\n      selectable: true,\n      defaultView: \"week\",\n      defaultDate: new Date(),\n      localizer: localizer,\n      events: eventsList,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      style: {\n        height: 500\n      },\n      onSelectSlot: handleSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"It is \", date.toLocaleTimeString(), \".\"));\n  }\n}\n\nexport default MyCalendar;","map":{"version":3,"sources":["C:/Users/kolya/IdeaProjects/my-app2/src/MyCalendar.js"],"names":["React","useState","Component","useEffect","setState","setInterval","ReactDOM","Calendar","momentLocalizer","moment","Alert","useAlert","userName","MyCalendar","localizer","eventsList","setEventsList","handleSelect","start","end","title","window","prompt","newEvent","Clock","props","Date","date","setDate","timerID","tick","cleanup","clearInterval","Alarm","state","currentTime","alarmTime","clock","toLocaleTimeString","hour12","interval","alert","console","log","next","previous","today","month","week","day","yesterday","tomorrow","agenda","noEventsInRange","showMore","total","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,EAAgDC,QAAhD,EAA0DC,WAA1D,QAA8E,OAA9E;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,WAAP;AACA,OAAO,mDAAP;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;AACA,SAAQC,QAAR,QAAuB,QAAvB;;AAGA,SAASC,UAAT,GAAuB;AAEnB,MAAMC,SAAS,GAAGN,eAAe,CAACC,MAAD,CAAjC;;AAFmB,kBAGiBR,QAAQ,CAAC,EAAD,CAHzB;AAAA;AAAA,MAGZc,UAHY;AAAA,MAGAC,aAHA;;AAKnB,WAASC,YAAT,OAAgD;AAAA,QAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,QAAjBC,GAAiB,QAAjBA,GAAiB;AAAA,QAAZP,QAAY,QAAZA,QAAY;AAC5C,QAAMQ,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,gBAAd,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACT,UAAIG,QAAQ,GAAG;AACbX,QAAAA,QAAQ,EAAE;AAACA,UAAAA,QAAQ,EAARA;AAAD,SADG;AAEbM,QAAAA,KAAK,EAAEA,KAFM;AAGbC,QAAAA,GAAG,EAAEA,GAHQ;AAIbC,QAAAA,KAAK,EAAEA;AAJM,OAAf;AAMAJ,MAAAA,aAAa,8BAAKD,UAAL,IAAiBQ,QAAjB,GAAb;AAED;AACF;;AAAA;;AAED,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,qBACIxB,QAAQ,CAAC,IAAIyB,IAAJ,EAAD,CADZ;AAAA;AAAA,QACbC,IADa;AAAA,QACPC,OADO,kBAGrB;;;AACAzB,IAAAA,SAAS,CAAC,YAAM;AACf,UAAI0B,OAAO,GAAGxB,WAAW,CAAE;AAAA,eAAMyB,IAAI,EAAV;AAAA,OAAF,EAAgB,IAAhB,CAAzB;AAEA,aAAO,SAASC,OAAT,GAAmB;AACtBC,QAAAA,aAAa,CAACH,OAAD,CAAb;AACD,OAFH;AAGA,KANQ,CAAT;;AAQE,aAASC,IAAT,GAAgB;AACfF,MAAAA,OAAO,CAAC,IAAIF,IAAJ,EAAD,CAAP;AACA;;AAEN,aAASO,KAAT,GAAiB;AACb,UAAIC,KAAK,GAAG;AACVC,QAAAA,WAAW,EAAE,EADH;AAEVC,QAAAA,SAAS,EAAE;AAFD,OAAZ;AAIAjC,MAAAA,SAAS,CAAC,YAAM;AACL,YAAMkC,KAAK,GAAGhC,WAAW,CAAC;AAAA,iBAAMD,QAAQ,CAAC;AACzC+B,YAAAA,WAAW,EAAE,IAAIT,IAAJ,GAAWY,kBAAX,CAA8B,IAA9B,EAAoC;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAApC;AAD4B,WAAD,CAAd;AAAA,SAAD,EAErB,IAFqB,CAAzB;AAIC,YAAMC,QAAQ,GAAGnC,WAAW,CAAC,YAAM;AACnC,cAAG6B,KAAK,CAACC,WAAN,KAAsBD,KAAK,CAACE,SAA/B,EAA0C;AACjCK,YAAAA,KAAK,CAAC,WAAD,CAAL;AACP,WAFF,MAEQ;AACPC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACI;AAAC,SALsB,EAKpB,IALoB,CAA5B;AAMD,OAXF,CAAT;AAYP;;AAGG,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,QAAD;AACA,MAAA,QAAQ,EAAE;AACAC,QAAAA,IAAI,EAAE,UADN;AAEAC,QAAAA,QAAQ,EAAE,YAFV;AAGAC,QAAAA,KAAK,EAAE,SAHP;AAIAC,QAAAA,KAAK,EAAE,OAJP;AAKAC,QAAAA,IAAI,EAAE,QALN;AAMAC,QAAAA,GAAG,EAAE,MANL;AAOAC,QAAAA,SAAS,EAAE,OAPX;AAQAC,QAAAA,QAAQ,EAAE,QARV;AASAC,QAAAA,MAAM,EAAE,aATR;AAUAC,QAAAA,eAAe,EAAE,mDAVjB;AAYAC,QAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACjC,iBAAO,MAAMA,KAAN,GAAc,SAArB;AACD;AAdD,OADV;AAiBA,MAAA,UAAU,MAjBV;AAkBA,MAAA,WAAW,EAAC,MAlBZ;AAmBA,MAAA,WAAW,EAAE,IAAI7B,IAAJ,EAnBb;AAoBA,MAAA,SAAS,EAAEZ,SApBX;AAqBA,MAAA,MAAM,EAAEC,UArBR;AAsBA,MAAA,aAAa,EAAC,OAtBd;AAuBA,MAAA,WAAW,EAAC,KAvBZ;AAwBA,MAAA,KAAK,EAAE;AAAEyC,QAAAA,MAAM,EAAE;AAAV,OAxBP;AAyBA,MAAA,YAAY,EAAEvC,YAzBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWU,IAAI,CAACW,kBAAL,EAAX,MA5BA,CADJ;AA+BE;AACL;;AAED,eAAezB,UAAf","sourcesContent":["import React, { useState, Component, useEffect, setState, setInterval  } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport './App.css';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'\r\nimport { Alert, useAlert } from 'react-alert'\r\nimport {userName} from './Home';\r\n\r\n\r\nfunction MyCalendar()  {\r\n\r\n    const localizer = momentLocalizer(moment);\r\n    const [eventsList, setEventsList] = useState([]);\r\n\r\n    function handleSelect({ start, end, userName }) {\r\n        const title = window.prompt(\"New Event name\");\r\n        if (title) {\r\n          var newEvent = {\r\n            userName: {userName},\r\n            start: start,\r\n            end: end,\r\n            title: title,\r\n          };\r\n          setEventsList([...eventsList, newEvent]) ;\r\n\r\n        }\r\n      };\r\n\r\n      function Clock(props) {\r\n        const [date, setDate] = useState(new Date());\r\n\r\n       //Replaces componentDidMount and componentWillUnmount\r\n       useEffect(() => {\r\n        var timerID = setInterval( () => tick(), 1000 );\r\n\r\n        return function cleanup() {\r\n            clearInterval(timerID);\r\n          };\r\n       });\r\n\r\n         function tick() {\r\n          setDate(new Date());\r\n         }\r\n\r\n    function Alarm() {\r\n        var state = {\r\n          currentTime: '',\r\n          alarmTime: '11:58:05',\r\n        }\r\n        useEffect(() => {\r\n                   const clock = setInterval(() => setState({\r\n                   currentTime: new Date().toLocaleTimeString('ru', { hour12: false })\r\n                   }), 1000);\r\n\r\n                    const interval = setInterval(() => {\r\n                    if(state.currentTime === state.alarmTime) {\r\n                             alert(\"its time!\");\r\n                     } else {\r\n                     console.log(\"not yet\");\r\n                        }}, 1000);\r\n                  })\r\n}\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Calendar\r\n        messages={{\r\n                  next: 'Следущий',\r\n                  previous: 'Предыдущий',\r\n                  today: 'Сегодня',\r\n                  month: 'Месяц',\r\n                  week: 'Неделя',\r\n                  day: 'День',\r\n                  yesterday: 'Вчера',\r\n                  tomorrow: 'Завтра',\r\n                  agenda: 'Мероприятия',\r\n                  noEventsInRange: 'Не найдено никаких мероприятий в текущем периоде.',\r\n\r\n                  showMore: function showMore(total) {\r\n                    return '+' + total + 'событий';\r\n                  }\r\n        }}\r\n        selectable\r\n        defaultView=\"week\"\r\n        defaultDate={new Date()}\r\n        localizer={localizer}\r\n        events={eventsList}\r\n        startAccessor=\"start\"\r\n        endAccessor=\"end\"\r\n        style={{ height: 500 }}\r\n        onSelectSlot={handleSelect}\r\n        />\r\n        <h2>It is {date.toLocaleTimeString()}.</h2>\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default MyCalendar;"]},"metadata":{},"sourceType":"module"}