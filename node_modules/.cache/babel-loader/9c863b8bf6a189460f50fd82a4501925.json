{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\nexport var SaveContext = createContext(undefined);\nexport var SaveContextProvider = function SaveContextProvider(_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(SaveContext.Provider, {\n    value: value\n  }, children);\n};\n/**\r\n * Get the save() function and its status\r\n *\r\n * Used in forms.\r\n *\r\n * @example\r\n *\r\n * const {\r\n *     save,\r\n *     saving\r\n * } = useSaveContext();\r\n */\n\nexport var useSaveContext = function useSaveContext(props) {\n  var context = useContext(SaveContext);\n\n  if (!context || !context.save || !context.setOnFailure) {\n    /**\r\n     * The element isn't inside a <SaveContextProvider>\r\n     * To avoid breakage in that case, fallback to props\r\n     *\r\n     * @deprecated - to be removed in 4.0\r\n     */\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"Edit or Create child components must be used inside a <SaveContextProvider>. Relying on props rather than context to get persistence related data and callbacks is deprecated and won't be supported in the next major version of react-admin.\");\n    }\n\n    return props;\n  }\n\n  return context;\n};\nexport var usePickSaveContext = function usePickSaveContext(context) {\n  var value = useMemo(function () {\n    return pick(context, ['save', 'saving', 'setOnFailure', 'setOnSuccess', 'setTransform', 'onSuccessRef', 'onFailureRef', 'transformRef']);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [context.save, context.saving, context.setOnFailure, context.setOnSuccess, context.setTransform, context.setTransform, context.onFailureRef, context.onSuccessRef, context.transformRef]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  );\n  return value;\n};","map":null,"metadata":{},"sourceType":"module"}