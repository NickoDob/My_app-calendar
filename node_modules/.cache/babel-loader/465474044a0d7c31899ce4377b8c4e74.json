{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useEditController } from './useEditController';\nimport { EditContextProvider } from './EditContextProvider';\n/**\r\n * Call useEditController and put the value in a EditContext\r\n *\r\n * Base class for <Edit> components, without UI.\r\n *\r\n * Accepts any props accepted by useEditController:\r\n * - id: The record identifier\r\n * - resource: The resource\r\n *\r\n * @example // Custom edit layout\r\n *\r\n * const PostEdit = props => (\r\n *     <EditBase {...props}>\r\n *         <Grid container>\r\n *             <Grid item xs={8}>\r\n *                 <SimpleForm>\r\n *                     ...\r\n *                 </SimpleForm>\r\n *             </Grid>\r\n *             <Grid item xs={4}>\r\n *                 Edit instructions...\r\n *             </Grid>\r\n *         </Grid>\r\n *         <div>\r\n *             Post related links...\r\n *         </div>\r\n *     </EditBase>\r\n * );\r\n */\n\nexport var EditBase = function EditBase(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return React.createElement(EditContextProvider, {\n    value: useEditController(props)\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}