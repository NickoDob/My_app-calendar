{"ast":null,"code":"import { performOptimisticQuery } from './performOptimisticQuery';\nimport { performUndoableQuery } from './performUndoableQuery';\nimport { performPessimisticQuery } from './performPessimisticQuery';\nimport { answerWithCache } from './answerWithCache';\nimport { canReplyWithCache } from '../replyWithCache';\n/**\n * Execute a dataProvider call\n *\n * Delegates execution to cache, optimistic, undoable, or pessimistic queries\n *\n * @see useDataProvider\n */\n\nexport var doQuery = function doQuery(_a) {\n  var type = _a.type,\n      payload = _a.payload,\n      resource = _a.resource,\n      action = _a.action,\n      rest = _a.rest,\n      onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      dataProvider = _a.dataProvider,\n      dispatch = _a.dispatch,\n      logoutIfAccessDenied = _a.logoutIfAccessDenied,\n      allArguments = _a.allArguments,\n      store = _a.store,\n      mutationMode = _a.mutationMode;\n  var resourceState = store.getState().admin.resources[resource];\n\n  if (canReplyWithCache(type, payload, resourceState)) {\n    return answerWithCache({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      resourceState: resourceState,\n      dispatch: dispatch\n    });\n  } else if (mutationMode === 'optimistic') {\n    return performOptimisticQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  } else if (mutationMode === 'undoable') {\n    return performUndoableQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  } else {\n    return performPessimisticQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}