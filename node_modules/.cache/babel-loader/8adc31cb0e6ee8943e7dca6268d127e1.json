{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Progress from '@material-ui/core/LinearProgress';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { useTimeout } from 'ra-core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      margin: theme.spacing(1) + \"px 0\",\n      width: theme.spacing(20) + \"px\"\n    }\n  };\n}, {\n  name: 'RaLinearProgress'\n});\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\n\nvar LinearProgress = function LinearProgress(_a) {\n  var _b = _a.timeout,\n      timeout = _b === void 0 ? 1000 : _b,\n      props = __rest(_a, [\"timeout\"]);\n\n  var classesOverride = props.classes,\n      className = props.className,\n      rest = __rest(props, [\"classes\", \"className\"]);\n\n  var classes = useStyles(props);\n  var oneSecondHasPassed = useTimeout(timeout);\n  return oneSecondHasPassed ? React.createElement(Progress, __assign({\n    className: classnames(classes.root, className)\n  }, rest)) : null;\n};\n\nLinearProgress.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  timeout: PropTypes.number\n}; // What? TypeScript loses the displayName if we don't set it explicitly\n\nLinearProgress.displayName = 'LinearProgress';\nexport default LinearProgress;","map":null,"metadata":{},"sourceType":"module"}