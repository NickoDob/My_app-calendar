{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { isRequired, FieldTitle, composeSyncValidators } from 'ra-core';\nimport { useFieldArray } from 'react-final-form-arrays';\nimport { InputLabel, FormControl, FormHelperText } from '@material-ui/core';\nimport InputHelperText from './InputHelperText';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\n/**\r\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\r\n *\r\n *  @example\r\n *\r\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\r\n *\r\n *      <ArrayInput source=\"backlinks\">\r\n *          <SimpleFormIterator>\r\n *              <DateInput source=\"date\" />\r\n *              <TextInput source=\"url\" />\r\n *          </SimpleFormIterator>\r\n *      </ArrayInput>\r\n *\r\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\r\n * in the following post record:\r\n *\r\n * {\r\n *   id: 123\r\n *   backlinks: [\r\n *         {\r\n *             date: '2012-08-10T00:00:00.000Z',\r\n *             url: 'http://example.com/foo/bar.html',\r\n *         },\r\n *         {\r\n *             date: '2012-08-14T00:00:00.000Z',\r\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\r\n *         }\r\n *    ]\r\n * }\r\n *\r\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\r\n * A form iterator is a component accepting a fields object as passed by\r\n * react-final-form-arrays's useFieldArray() hook, and defining a layout for\r\n * an array of fields. For instance, the <SimpleFormIterator> component\r\n * displays an array of fields in an unordered list (<ul>), one sub-form by\r\n * list item (<li>). It also provides controls for adding and removing\r\n * a sub-record (a backlink in this example).\r\n *\r\n * @see https://github.com/final-form/react-final-form-arrays\r\n */\n\nvar ArrayInput = function ArrayInput(_a) {\n  var className = _a.className,\n      defaultValue = _a.defaultValue,\n      label = _a.label,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      children = _a.children,\n      helperText = _a.helperText,\n      record = _a.record,\n      resource = _a.resource,\n      source = _a.source,\n      validate = _a.validate,\n      variant = _a.variant,\n      disabled = _a.disabled,\n      _b = _a.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      rest = __rest(_a, [\"className\", \"defaultValue\", \"label\", \"loaded\", \"loading\", \"children\", \"helperText\", \"record\", \"resource\", \"source\", \"validate\", \"variant\", \"disabled\", \"margin\"]);\n\n  var sanitizedValidate = Array.isArray(validate) ? composeSyncValidators(validate) : validate;\n  var fieldProps = useFieldArray(source, __assign({\n    initialValue: defaultValue,\n    validate: sanitizedValidate\n  }, rest));\n\n  if (loading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: className,\n      margin: margin\n    }, React.createElement(LinearProgress, null));\n  }\n\n  var _c = fieldProps.meta,\n      error = _c.error,\n      submitError = _c.submitError,\n      touched = _c.touched,\n      dirty = _c.dirty;\n  var arrayInputError = getArrayInputError(error || submitError);\n  return React.createElement(FormControl, __assign({\n    fullWidth: true,\n    margin: \"normal\",\n    className: className,\n    error: (touched || dirty) && !!arrayInputError\n  }, sanitizeInputRestProps(rest)), React.createElement(InputLabel, {\n    htmlFor: source,\n    shrink: true,\n    error: (touched || dirty) && !!arrayInputError\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired(validate)\n  })), cloneElement(Children.only(children), __assign(__assign({}, fieldProps), {\n    record: record,\n    resource: resource,\n    source: source,\n    variant: variant,\n    margin: margin,\n    disabled: disabled\n  })), !!((touched || dirty) && arrayInputError) || helperText ? React.createElement(FormHelperText, {\n    error: (touched || dirty) && !!arrayInputError\n  }, React.createElement(InputHelperText, {\n    touched: touched || dirty,\n    error: arrayInputError,\n    helperText: helperText\n  })) : null);\n};\n\nArrayInput.propTypes = {\n  // @ts-ignore\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultValue: PropTypes.any,\n  isRequired: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  helperText: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  record: PropTypes.object,\n  options: PropTypes.object,\n  validate: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)])\n};\nArrayInput.defaultProps = {\n  options: {},\n  fullWidth: true\n};\nexport var getArrayInputError = function getArrayInputError(error) {\n  if (Array.isArray(error)) {\n    return undefined;\n  }\n\n  return error;\n};\nexport default ArrayInput;","map":null,"metadata":{},"sourceType":"module"}