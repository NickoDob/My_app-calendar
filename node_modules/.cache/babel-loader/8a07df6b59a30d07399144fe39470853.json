{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\r\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - initial: [create, { loading: false, loaded: false }]\r\n * - start:   [create, { loading: true, loaded: false }]\r\n * - success: [create, { data: [data from response], loading: false, loaded: true }]\r\n * - error:   [create, { error: [error from response], loading: false, loaded: false }]\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param data The data to initialize the new record with, e.g. { title: 'hello, world' }\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as [create, { data, error, loading, loaded }].\r\n *\r\n * The create() function can be called in 3 different ways:\r\n *  - with the same parameters as the useCreate() hook: create(resource, data, options)\r\n *  - with the same syntax as useMutation: create({ resource, payload: { data } }, options)\r\n *  - with no parameter (if they were already passed to useCreate()): create()\r\n *\r\n * @example // set params when calling the update callback\r\n *\r\n * import { useCreate } from 'react-admin';\r\n *\r\n * const LikeButton = ({ record }) => {\r\n *     const like = { postId: record.id };\r\n *     const [create, { loading, error }] = useCreate();\r\n *     const handleClick = () => {\r\n *         create('likes', like)\r\n *     }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={handleClick}>Like</button>;\r\n * };\r\n *\r\n * @example // set params when calling the hook\r\n *\r\n * import { useCreate } from 'react-admin';\r\n *\r\n * const LikeButton = ({ record }) => {\r\n *     const like = { postId: record.id };\r\n *     const [create, { loading, error }] = useCreate('likes', like);\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={create}>Like</button>;\r\n * };\r\n */\n\nvar useCreate = function useCreate(resource, data, options) {\n  var _a = useMutation({\n    type: 'create',\n    resource: resource,\n    payload: {\n      data: data\n    }\n  }, options),\n      mutate = _a[0],\n      state = _a[1];\n\n  var create = useCallback(function (resource, data, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'create',\n        resource: resource,\n        payload: {\n          data: data\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, data);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return [create, state];\n};\n\nexport default useCreate;","map":null,"metadata":{},"sourceType":"module"}