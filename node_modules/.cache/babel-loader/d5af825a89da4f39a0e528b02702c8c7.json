{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport get from 'lodash/get';\nimport { useCallback, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../sideEffect';\nimport usePaginationState from '../usePaginationState';\nimport useSelectionState from '../useSelectionState';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\nvar defaultFilter = {};\n/**\r\n * Fetch reference records, and return them when available\r\n *\r\n * The reference prop should be the name of one of the <Resource> components\r\n * added as <Admin> child.\r\n *\r\n * @example\r\n *\r\n * const { loaded, referenceRecord, resourceLinkPath } = useReferenceManyFieldController({\r\n *     resource\r\n *     reference: 'users',\r\n *     record: {\r\n *         userId: 7\r\n *     }\r\n *     target: 'comments',\r\n *     source: 'userId',\r\n *     basePath: '/comments',\r\n *     page: 1,\r\n *     perPage: 25,\r\n * });\r\n *\r\n * @param {Object} props\r\n * @param {string} props.resource The current resource name\r\n * @param {string} props.reference The linked resource name\r\n * @param {Object} props.record The current resource record\r\n * @param {string} props.target The target resource key\r\n * @param {Object} props.filter The filter applied on the recorded records list\r\n * @param {string} props.source The key of the linked resource identifier\r\n * @param {string} props.basePath basepath to current resource\r\n * @param {number} props.page the page number\r\n * @param {number} props.perPage the number of item per page\r\n * @param {Object} props.sort the sort to apply to the referenced records\r\n *\r\n * @returns {ReferenceManyProps} The reference many props\r\n */\n\nvar useReferenceManyFieldController = function useReferenceManyFieldController(props) {\n  var reference = props.reference,\n      record = props.record,\n      target = props.target,\n      _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      source = props.source,\n      basePath = props.basePath,\n      initialPage = props.page,\n      initialPerPage = props.perPage,\n      _b = props.sort,\n      initialSort = _b === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _b;\n  var resource = useResourceContext(props);\n  var notify = useNotify(); // pagination logic\n\n  var _c = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      page = _c.page,\n      setPage = _c.setPage,\n      perPage = _c.perPage,\n      setPerPage = _c.setPerPage; // sort logic\n\n\n  var _d = useSortState(initialSort),\n      sort = _d.sort,\n      setSortObject = _d.setSort;\n\n  var setSort = useCallback(function (field, order) {\n    if (order === void 0) {\n      order = 'ASC';\n    }\n\n    setSortObject({\n      field: field,\n      order: order\n    });\n    setPage(1);\n  }, [setPage, setSortObject]); // selection logic\n\n  var _e = useSelectionState(),\n      selectedIds = _e.selectedIds,\n      onSelect = _e.onSelect,\n      onToggleItem = _e.onToggleItem,\n      onUnselectItems = _e.onUnselectItems; // filter logic\n\n\n  var filterRef = useRef(filter);\n\n  var _f = useSafeSetState({}),\n      displayedFilters = _f[0],\n      setDisplayedFilters = _f[1];\n\n  var _g = useSafeSetState(filter),\n      filterValues = _g[0],\n      setFilterValues = _g[1];\n\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]); // handle filter prop change\n\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  var referenceId = get(record, source);\n\n  var _h = useGetManyReference(reference, target, referenceId, {\n    page: page,\n    perPage: perPage\n  }, sort, filterValues, resource, {\n    onFailure: function onFailure(error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n        _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n      });\n    }\n  }),\n      data = _h.data,\n      ids = _h.ids,\n      total = _h.total,\n      error = _h.error,\n      loading = _h.loading,\n      loaded = _h.loaded,\n      refetch = _h.refetch;\n\n  return {\n    basePath: basePath ? basePath.replace(resource, reference) : \"/\" + reference,\n    currentSort: sort,\n    data: data,\n    defaultTitle: null,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hasCreate: false,\n    hideFilter: hideFilter,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};\n\nexport default useReferenceManyFieldController;","map":null,"metadata":{},"sourceType":"module"}