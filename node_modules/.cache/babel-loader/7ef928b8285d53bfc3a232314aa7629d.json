{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@material-ui/core';\nimport SortIcon from '@material-ui/icons/Sort';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { shallowEqual } from 'react-redux';\nimport { useListSortContext, useTranslate, getFieldLabelTranslationArgs } from 'ra-core';\n/**\r\n * A button allowing to change the sort field and order.\r\n *\r\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\r\n *\r\n * Expects one 'fields' prop, containing an array of field strings that shall\r\n * be used and displayed for sorting.\r\n *\r\n * When users clicks on the <SortButton>, they see a dropdown list with the\r\n * proposed sorting fields. Once they click on one of these fields, the related\r\n * list refreshes, re-sorted.\r\n *\r\n * @example\r\n *\r\n * import * as React from 'react';\r\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\r\n *\r\n * const ListActions: FC = props => (\r\n *     <TopToolbar>\r\n *         <SortButton fields={['reference', 'sales', 'stock']} />\r\n *         <CreateButton basePath={props.basePath} />\r\n *         <ExportButton />\r\n *     </TopToolbar>\r\n * );\r\n */\n\nvar SortButton = function SortButton(_a) {\n  var fields = _a.fields,\n      _b = _a.label,\n      label = _b === void 0 ? 'ra.sort.sort_by' : _b,\n      _c = _a.icon,\n      icon = _c === void 0 ? defaultIcon : _c;\n\n  var _d = useListSortContext(),\n      resource = _d.resource,\n      currentSort = _d.currentSort,\n      setSort = _d.setSort;\n\n  var translate = useTranslate();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n\n  var _e = React.useState(null),\n      anchorEl = _e[0],\n      setAnchorEl = _e[1];\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var handleChangeSort = function handleChangeSort(event) {\n    var field = event.currentTarget.dataset.sort;\n    setSort(field, field === currentSort.field ? inverseOrder(currentSort.order) : 'ASC');\n    setAnchorEl(null);\n  };\n\n  var buttonLabel = translate(label, {\n    field: translate.apply(void 0, getFieldLabelTranslationArgs({\n      resource: resource,\n      source: currentSort.field\n    })),\n    order: translate(\"ra.sort.\" + currentSort.order),\n    _: label\n  });\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick\n  }, icon)) : React.createElement(Button, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translate.apply(void 0, getFieldLabelTranslationArgs({\n      resource: resource,\n      source: field\n    })), ' ', translate(\"ra.sort.\" + (currentSort.field === field ? inverseOrder(currentSort.order) : 'ASC')));\n  })));\n};\n\nvar defaultIcon = React.createElement(SortIcon, null);\n\nvar inverseOrder = function inverseOrder(sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\n\nvar arePropsEqual = function arePropsEqual(prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\n\nexport default memo(SortButton, arePropsEqual);","map":null,"metadata":{},"sourceType":"module"}