{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { resetNotification } from '../actions/notificationActions';\n/**\r\n * Get a callback for calling the authProvider.login() method\r\n * and redirect to the previous authenticated page (or the home page) on success.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} login callback\r\n *\r\n * @example\r\n *\r\n * import { useLogin } from 'react-admin';\r\n *\r\n * const LoginButton = () => {\r\n *     const [loading, setLoading] = useState(false);\r\n *     const login = useLogin();\r\n *     const handleClick = {\r\n *         setLoading(true);\r\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\r\n *             .then(() => setLoading(false));\r\n *     }\r\n *     return <button onClick={handleClick}>Login</button>;\r\n * }\r\n */\n\nvar useLogin = function useLogin() {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.login(params).then(function (ret) {\n      dispatch(resetNotification());\n      var redirectUrl = pathName ? pathName : nextPathName + nextSearch || defaultAuthParams.afterLoginUrl;\n      history.push(redirectUrl);\n      return ret;\n    });\n  }, [authProvider, history, nextPathName, nextSearch, dispatch]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    dispatch(resetNotification());\n    history.push(defaultAuthParams.afterLoginUrl);\n    return Promise.resolve();\n  }, [history, dispatch]);\n  return authProvider ? login : loginWithoutProvider;\n};\n\nexport default useLogin;","map":null,"metadata":{},"sourceType":"module"}