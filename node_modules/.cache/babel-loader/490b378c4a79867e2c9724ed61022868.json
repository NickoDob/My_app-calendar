{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport MuiTab from '@material-ui/core/Tab';\nimport classnames from 'classnames';\nimport { useTranslate, useFormGroup } from 'ra-core';\nimport { useFormState } from 'react-final-form';\nexport var FormTabHeader = function FormTabHeader(_a) {\n  var _b;\n\n  var classes = _a.classes,\n      label = _a.label,\n      value = _a.value,\n      icon = _a.icon,\n      className = _a.className,\n      syncWithLocation = _a.syncWithLocation,\n      rest = __rest(_a, [\"classes\", \"label\", \"value\", \"icon\", \"className\", \"syncWithLocation\"]);\n\n  var translate = useTranslate();\n  var location = useLocation();\n  var submitFailed = useFormState(UseFormStateOptions).submitFailed;\n  var formGroup = useFormGroup(value.toString());\n  var propsForLink = {\n    component: Link,\n    to: __assign(__assign({}, location), {\n      pathname: value\n    })\n  };\n  return React.createElement(MuiTab, __assign({\n    label: isValidElement(label) ? label : translate(label, {\n      _: label\n    }),\n    value: value,\n    icon: icon,\n    className: classnames('form-tab', className, (_b = {}, _b[classes.errorTabButton] = formGroup.invalid && (formGroup.touched || submitFailed), _b))\n  }, syncWithLocation ? propsForLink : {}, {\n    id: \"tabheader-\" + value,\n    \"aria-controls\": \"tabpanel-\" + value\n  }, rest));\n};\nvar UseFormStateOptions = {\n  subscription: {\n    submitFailed: true\n  }\n};\nFormTabHeader.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  children: PropTypes.node,\n  intent: PropTypes.oneOf(['header', 'content']),\n  hidden: PropTypes.bool,\n  icon: PropTypes.element,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n  path: PropTypes.string,\n  // @ts-ignore\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n};","map":null,"metadata":{},"sourceType":"module"}