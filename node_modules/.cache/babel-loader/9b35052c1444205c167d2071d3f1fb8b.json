{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@material-ui/icons/Update';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport inflection from 'inflection';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslate, useUpdateMany, useRefresh, useNotify, useUnselectAll, CRUD_UPDATE_MANY, useResourceContext } from 'ra-core';\nimport Confirm from '../layout/Confirm';\nimport Button from './Button';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    updateButton: {\n      color: theme.palette.error.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  };\n}, {\n  name: 'RaBulkUpdateWithConfirmButton'\n});\nvar defaultIcon = React.createElement(ActionUpdate, null);\n\nvar BulkUpdateWithConfirmButton = function BulkUpdateWithConfirmButton(props) {\n  var notify = useNotify();\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var unselectAll = useUnselectAll();\n  var resource = useResourceContext(props);\n  var classes = useStyles(props);\n\n  var _a = useState(false),\n      isOpen = _a[0],\n      setOpen = _a[1];\n\n  var basePath = props.basePath,\n      mutationMode = props.mutationMode,\n      classesOverride = props.classes,\n      _b = props.confirmTitle,\n      confirmTitle = _b === void 0 ? 'ra.message.bulk_update_title' : _b,\n      _c = props.confirmContent,\n      confirmContent = _c === void 0 ? 'ra.message.bulk_update_content' : _c,\n      data = props.data,\n      _d = props.icon,\n      icon = _d === void 0 ? defaultIcon : _d,\n      label = props.label,\n      onClick = props.onClick,\n      selectedIds = props.selectedIds,\n      _e = props.onSuccess,\n      onSuccess = _e === void 0 ? function () {\n    refresh();\n    notify('ra.notification.updated', 'info', {\n      smart_count: selectedIds.length\n    });\n    unselectAll(resource);\n  } : _e,\n      _f = props.onFailure,\n      onFailure = _f === void 0 ? function (error) {\n    notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n      _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n    });\n    setOpen(false);\n  } : _f,\n      rest = __rest(props, [\"basePath\", \"mutationMode\", \"classes\", \"confirmTitle\", \"confirmContent\", \"data\", \"icon\", \"label\", \"onClick\", \"selectedIds\", \"onSuccess\", \"onFailure\"]);\n\n  var _g = useUpdateMany(resource, selectedIds, data, {\n    action: CRUD_UPDATE_MANY,\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    mutationMode: mutationMode\n  }),\n      updateMany = _g[0],\n      loading = _g[1].loading;\n\n  var handleClick = function handleClick(e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function handleDialogClose() {\n    setOpen(false);\n  };\n\n  var handleUpdate = function handleUpdate(e) {\n    updateMany();\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(Fragment, null, React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label,\n    className: classes.updateButton\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: loading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\" + resource + \".forcedCaseName\", {\n        smart_count: selectedIds.length,\n        _: inflection.humanize(translate(\"resources.\" + resource + \".name\", {\n          smart_count: selectedIds.length,\n          _: inflection.inflect(resource, selectedIds.length)\n        }), true)\n      })\n    },\n    onConfirm: handleUpdate,\n    onClose: handleDialogClose\n  }));\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      classes = _a.classes,\n      filterValues = _a.filterValues,\n      label = _a.label,\n      onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      rest = __rest(_a, [\"basePath\", \"classes\", \"filterValues\", \"label\", \"onSuccess\", \"onFailure\"]);\n\n  return rest;\n};\n\nBulkUpdateWithConfirmButton.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable'])\n};\nBulkUpdateWithConfirmButton.defaultProps = {\n  label: 'ra.action.update',\n  mutationMode: 'pessimistic'\n};\nexport default BulkUpdateWithConfirmButton;","map":null,"metadata":{},"sourceType":"module"}