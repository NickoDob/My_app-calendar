{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { CRUD_DELETE } from '../../actions';\nimport { useRefresh, useNotify, useRedirect } from '../../sideEffect';\nimport { useResourceContext } from '../../core';\n/**\r\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\r\n *\r\n * @example\r\n *\r\n * const DeleteButton = ({\r\n *     resource,\r\n *     record,\r\n *     basePath,\r\n *     redirect,\r\n *     onClick,\r\n *     ...rest\r\n * }) => {\r\n *     const {\r\n *         open,\r\n *         loading,\r\n *         handleDialogOpen,\r\n *         handleDialogClose,\r\n *         handleDelete,\r\n *     } = useDeleteWithConfirmController({\r\n *         resource,\r\n *         record,\r\n *         redirect,\r\n *         basePath,\r\n *         onClick,\r\n *     });\r\n *\r\n *     return (\r\n *         <Fragment>\r\n *             <Button\r\n *                 onClick={handleDialogOpen}\r\n *                 label=\"ra.action.delete\"\r\n *                 {...rest}\r\n *             >\r\n *                 {icon}\r\n *             </Button>\r\n *             <Confirm\r\n *                 isOpen={open}\r\n *                 loading={loading}\r\n *                 title=\"ra.message.delete_title\"\r\n *                 content=\"ra.message.delete_content\"\r\n *                 translateOptions={{\r\n *                     name: resource,\r\n *                     id: record.id,\r\n *                 }}\r\n *                 onConfirm={handleDelete}\r\n *                 onClose={handleDialogClose}\r\n *             />\r\n *         </Fragment>\r\n *     );\r\n * };\r\n */\n\nvar useDeleteWithConfirmController = function useDeleteWithConfirmController(props) {\n  var record = props.record,\n      redirectTo = props.redirect,\n      basePath = props.basePath,\n      mutationMode = props.mutationMode,\n      onClick = props.onClick,\n      _onSuccess = props.onSuccess,\n      _onFailure = props.onFailure;\n  var resource = useResourceContext(props);\n\n  var _a = useState(false),\n      open = _a[0],\n      setOpen = _a[1];\n\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n\n  var _b = useDelete(resource, null, null, {\n    action: CRUD_DELETE,\n    onSuccess: function onSuccess(response) {\n      setOpen(false);\n\n      if (_onSuccess === undefined) {\n        notify('ra.notification.deleted', 'info', {\n          smart_count: 1\n        });\n        redirect(redirectTo, basePath || \"/\" + resource);\n        refresh();\n      } else {\n        _onSuccess(response);\n      }\n    },\n    onFailure: function onFailure(error) {\n      setOpen(false);\n\n      if (_onFailure === undefined) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        });\n        refresh();\n      } else {\n        _onFailure(error);\n      }\n    },\n    mutationMode: mutationMode\n  }),\n      deleteOne = _b[0],\n      loading = _b[1].loading;\n\n  var handleDialogOpen = function handleDialogOpen(e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function handleDialogClose(e) {\n    setOpen(false);\n    e.stopPropagation();\n  };\n\n  var handleDelete = useCallback(function (event) {\n    event.stopPropagation();\n    deleteOne({\n      payload: {\n        id: record.id,\n        previousData: record\n      }\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [deleteOne, onClick, record]);\n  return {\n    open: open,\n    loading: loading,\n    handleDialogOpen: handleDialogOpen,\n    handleDialogClose: handleDialogClose,\n    handleDelete: handleDelete\n  };\n};\n\nexport default useDeleteWithConfirmController;","map":null,"metadata":{},"sourceType":"module"}