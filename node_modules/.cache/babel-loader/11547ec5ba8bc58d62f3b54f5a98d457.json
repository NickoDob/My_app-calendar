{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport MuiTab from '@material-ui/core/Tab';\nimport { useTranslate } from 'ra-core';\nimport classnames from 'classnames';\nimport Labeled from '../input/Labeled';\n/**\r\n * Tab element for the SimpleShowLayout.\r\n *\r\n * The `<Tab>` component accepts the following props:\r\n *\r\n * - label: The string displayed for each tab\r\n * - icon: The icon to show before the label (optional). Must be a component.\r\n * - path: The string used for custom urls\r\n *\r\n * @example\r\n *     // in src/posts.js\r\n *     import * as React from \"react\";\r\n *     import FavoriteIcon from '@material-ui/icons/Favorite';\r\n *     import PersonPinIcon from '@material-ui/icons/PersonPin';\r\n *     import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\r\n *\r\n *     export const PostShow = (props) => (\r\n *         <Show {...props}>\r\n *             <TabbedShowLayout>\r\n *                 <Tab label=\"Content\" icon={<FavoriteIcon />}>\r\n *                     <TextField source=\"title\" />\r\n *                     <TextField source=\"subtitle\" />\r\n *                </Tab>\r\n *                 <Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\r\n *                     <TextField source=\"category\" />\r\n *                </Tab>\r\n *             </TabbedShowLayout>\r\n *         </Show>\r\n *     );\r\n *\r\n *     // in src/App.js\r\n *     import * as React from \"react\";\r\n *     import { Admin, Resource } from 'react-admin';\r\n *\r\n *     import { PostShow } from './posts';\r\n *\r\n *     const App = () => (\r\n *         <Admin dataProvider={...}>\r\n *             <Resource name=\"posts\" show={PostShow} />\r\n *         </Admin>\r\n *     );\r\n *     export default App;\r\n */\n\nexport var Tab = function Tab(_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      contentClassName = _a.contentClassName,\n      context = _a.context,\n      className = _a.className,\n      icon = _a.icon,\n      label = _a.label,\n      record = _a.record,\n      resource = _a.resource,\n      _b = _a.syncWithLocation,\n      syncWithLocation = _b === void 0 ? true : _b,\n      value = _a.value,\n      rest = __rest(_a, [\"basePath\", \"children\", \"contentClassName\", \"context\", \"className\", \"icon\", \"label\", \"record\", \"resource\", \"syncWithLocation\", \"value\"]);\n\n  var translate = useTranslate();\n  var location = useLocation();\n  var propsForLink = {\n    component: Link,\n    to: __assign(__assign({}, location), {\n      pathname: value\n    })\n  };\n\n  var renderHeader = function renderHeader() {\n    return React.createElement(MuiTab, __assign({\n      key: label,\n      label: translate(label, {\n        _: label\n      }),\n      value: value,\n      icon: icon,\n      className: classnames('show-tab', className)\n    }, syncWithLocation ? propsForLink : {}, rest));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(\"span\", {\n      className: contentClassName\n    }, React.Children.map(children, function (field) {\n      return field && isValidElement(field) ? React.createElement(\"div\", {\n        key: field.props.source,\n        className: classnames('ra-field', \"ra-field-\" + field.props.source, field.props.className)\n      }, field.props.addLabel ? React.createElement(Labeled, {\n        label: field.props.label,\n        source: field.props.source,\n        basePath: basePath,\n        record: record,\n        resource: resource\n      }, field) : typeof field.type === 'string' ? field : React.cloneElement(field, {\n        basePath: basePath,\n        record: record,\n        resource: resource\n      })) : null;\n    }));\n  };\n\n  return context === 'header' ? renderHeader() : renderContent();\n};\nTab.propTypes = {\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  children: PropTypes.node,\n  context: PropTypes.oneOf(['header', 'content']),\n  icon: PropTypes.element,\n  label: PropTypes.string.isRequired,\n  path: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};","map":null,"metadata":{},"sourceType":"module"}