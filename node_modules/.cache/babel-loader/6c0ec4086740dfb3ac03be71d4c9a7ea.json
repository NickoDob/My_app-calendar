{"ast":null,"code":"import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultPagination = {\n  page: 1,\n  perPage: 25\n};\nvar defaultSort = {\n  field: 'id',\n  order: 'DESC'\n};\nvar defaultFilter = {};\nvar defaultIds = [];\nvar defaultData = {};\n/**\r\n * Call the dataProvider.getList() method and return the resolved result\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false, refetch }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\r\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The resource name, e.g. 'posts'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {Object} options Options object to pass to the dataProvider.\r\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\r\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\r\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\r\n *\r\n * @example\r\n *\r\n * import { useGetList } from 'react-admin';\r\n *\r\n * const LatestNews = () => {\r\n *     const { data, ids, loading, error } = useGetList(\r\n *         'posts',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' }\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{ids.map(id =>\r\n *         <li key={id}>{data[id].title}</li>\r\n *     )}</ul>;\r\n * };\r\n */\n\nvar useGetList = function useGetList(resource, pagination, sort, filter, options) {\n  if (pagination === void 0) {\n    pagination = defaultPagination;\n  }\n\n  if (sort === void 0) {\n    sort = defaultSort;\n  }\n\n  if (filter === void 0) {\n    filter = defaultFilter;\n  }\n\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, // ids and data selector\n  function (state) {\n    return {\n      ids: get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], null),\n      allRecords: get(state.admin.resources, [resource, 'data'], defaultData)\n    };\n  }, // total selector (may return undefined)\n  function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']);\n  }, isDataLoaded),\n      _b = _a.data,\n      ids = _b.ids,\n      allRecords = _b.allRecords,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var data = useMemo(function () {\n    return ids === null ? defaultData : ids.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [ids, allRecords]);\n  return {\n    data: data,\n    ids: ids === null ? defaultIds : ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\n\nvar isDataLoaded = function isDataLoaded(data) {\n  return data.ids !== null;\n};\n\nexport default useGetList;","map":null,"metadata":{},"sourceType":"module"}