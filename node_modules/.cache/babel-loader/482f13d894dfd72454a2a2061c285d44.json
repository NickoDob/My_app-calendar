{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useEffect } from 'react';\nimport { useField as useFinalFormField, useForm } from 'react-final-form';\nimport { composeValidators } from './validate';\nimport isRequired from './isRequired';\nimport { useFormGroupContext } from './useFormGroupContext';\nimport { useFormContext } from './useFormContext';\nimport { useRecordContext } from '../controller';\n\nvar useInput = function useInput(_a) {\n  var defaultValue = _a.defaultValue,\n      initialValue = _a.initialValue,\n      id = _a.id,\n      name = _a.name,\n      source = _a.source,\n      validate = _a.validate,\n      customOnBlur = _a.onBlur,\n      customOnChange = _a.onChange,\n      customOnFocus = _a.onFocus,\n      isRequiredOption = _a.isRequired,\n      options = __rest(_a, [\"defaultValue\", \"initialValue\", \"id\", \"name\", \"source\", \"validate\", \"onBlur\", \"onChange\", \"onFocus\", \"isRequired\"]);\n\n  var finalName = name || source;\n  var formGroupName = useFormGroupContext();\n  var formContext = useFormContext();\n  var record = useRecordContext();\n  useEffect(function () {\n    if (!formContext || !formGroupName) {\n      return;\n    }\n\n    formContext.registerField(source, formGroupName);\n    return function () {\n      formContext.unregisterField(source, formGroupName);\n    };\n  }, [formContext, formGroupName, source]);\n  var sanitizedValidate = Array.isArray(validate) ? composeValidators(validate) : validate;\n\n  var _b = useFinalFormField(finalName, __assign({\n    initialValue: initialValue,\n    defaultValue: defaultValue,\n    validate: sanitizedValidate\n  }, options)),\n      input = _b.input,\n      meta = _b.meta; // Extract the event handlers so that we can provide ours\n  // allowing users to provide theirs without breaking the form\n\n\n  var onBlur = input.onBlur,\n      onChange = input.onChange,\n      onFocus = input.onFocus,\n      inputProps = __rest(input, [\"onBlur\", \"onChange\", \"onFocus\"]);\n\n  var handleBlur = useCallback(function (event) {\n    onBlur(event);\n\n    if (typeof customOnBlur === 'function') {\n      customOnBlur(event);\n    }\n  }, [onBlur, customOnBlur]);\n  var handleChange = useCallback(function (event) {\n    onChange(event);\n\n    if (typeof customOnChange === 'function') {\n      customOnChange(event);\n    }\n  }, [onChange, customOnChange]);\n  var handleFocus = useCallback(function (event) {\n    onFocus(event);\n\n    if (typeof customOnFocus === 'function') {\n      customOnFocus(event);\n    }\n  }, [onFocus, customOnFocus]); // Every time the record changes and didn't include a value for this field\n\n  var form = useForm();\n  var recordId = record === null || record === void 0 ? void 0 : record.id;\n  useEffect(function () {\n    if (input.value != null && input.value !== '') {\n      return;\n    } // Apply the default value if provided\n    // We use a change here which will make the form dirty but this is expected\n    // and identical to what FinalForm does (https://final-form.org/docs/final-form/types/FieldConfig#defaultvalue)\n\n\n    if (defaultValue != null) {\n      form.change(source, defaultValue);\n    }\n\n    if (initialValue != null) {\n      form.batch(function () {\n        form.change(source, initialValue);\n        form.resetFieldState(source);\n      });\n    }\n  }, [recordId, input.value, defaultValue, initialValue, source, form]); // If there is an input prop, this input has already been enhanced by final-form\n  // This is required in for inputs used inside other inputs (such as the SelectInput inside a ReferenceInput)\n\n  if (options.input) {\n    return {\n      id: id || source,\n      input: options.input,\n      meta: options.meta,\n      isRequired: isRequiredOption || isRequired(validate)\n    };\n  }\n\n  return {\n    id: id || source,\n    input: __assign(__assign({}, inputProps), {\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus\n    }),\n    meta: meta,\n    isRequired: isRequiredOption || isRequired(validate)\n  };\n};\n\nexport default useInput;","map":null,"metadata":{},"sourceType":"module"}