{"ast":null,"code":"import * as React from 'react';\nimport ListContext from './ListContext';\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\nimport ListPaginationContext, { usePickPaginationContext } from './ListPaginationContext';\n/**\n * Create a List Context and several thematic List subcontext.\n *\n * Allows children to subscribe to part of the ListContext, and bail out of\n * rendering when some parts of the context that they don't depend on change\n * (because unfortunately React doesn't allow to use context selectors yet).\n *\n * @example\n *\n * const MyList = (props) => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContextProvider value={controllerProps}>\n *             <MyListView>\n *         </ListContextProvider>\n *     );\n * };\n *\n * const MyListView = () => {\n *     const { data, ids, filterValues, setFilters } = useListContext();\n *     // or, to rerender only when filters change but not data\n *     const { filterValues, setFilters } = useListFilterContext();\n * }\n *\n * @see ListContext\n * @see ListFilterContext\n */\n\nvar ListContextProvider = function ListContextProvider(_a) {\n  var value = _a.value,\n      children = _a.children;\n  return React.createElement(ListContext.Provider, {\n    value: value\n  }, React.createElement(ListFilterContext.Provider, {\n    value: usePickFilterContext(value)\n  }, React.createElement(ListSortContext.Provider, {\n    value: usePickSortContext(value)\n  }, React.createElement(ListPaginationContext.Provider, {\n    value: usePickPaginationContext(value)\n  }, children))));\n};\n\nexport default ListContextProvider;","map":null,"metadata":{},"sourceType":"module"}