{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\r\n * Get a callback for calling the authProvider.checkAuth() method.\r\n * In case of rejection, redirects to the login page, displays a notification,\r\n * and throws an error.\r\n *\r\n * This is a low level hook. See those more specialized hooks\r\n * for common authentication tasks, based on useCheckAuth.\r\n *\r\n * @see useAuthenticated\r\n * @see useAuthState\r\n *\r\n * @returns {Function} checkAuth callback\r\n *\r\n * @example\r\n *\r\n * import { useCheckAuth } from 'react-admin';\r\n *\r\n * const MyProtectedPage = () => {\r\n *     const checkAuth = useCheckAuth();\r\n *     useEffect(() => {\r\n *         checkAuth().catch(() => {});\r\n *     }, []);\r\n *     return <p>Private content: EZAEZEZAET</p>\r\n * } // tip: use useAuthenticated() hook instead\r\n *\r\n * const MyPage = () => {\r\n *     const checkAuth = useCheckAuth();\r\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\r\n *     useEffect(() => {\r\n *         checkAuth({}, false)\r\n *              .then(() => setAuthenticated(true))\r\n *              .catch(() => setAuthenticated(false));\r\n *     }, []);\r\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\r\n * } // tip: use useAuthState() hook instead\r\n */\n\nvar useCheckAuth = function useCheckAuth() {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    if (disableNotification === void 0) {\n      disableNotification = false;\n    }\n\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = disableNotification || error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), 'warning');\n      }\n\n      throw error;\n    });\n  }, [authProvider, logout, notify]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\n\nvar checkAuthWithoutAuthProvider = function checkAuthWithoutAuthProvider() {\n  return Promise.resolve();\n};\n\nvar getErrorMessage = function getErrorMessage(error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\n\nexport default useCheckAuth;","map":null,"metadata":{},"sourceType":"module"}