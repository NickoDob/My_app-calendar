{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { getResultFromCache } from '../replyWithCache';\nimport getFetchType from '../getFetchType';\nimport { FETCH_END } from '../../actions/fetchActions';\nexport var answerWithCache = function answerWithCache(_a) {\n  var type = _a.type,\n      payload = _a.payload,\n      resource = _a.resource,\n      action = _a.action,\n      rest = _a.rest,\n      onSuccess = _a.onSuccess,\n      resourceState = _a.resourceState,\n      dispatch = _a.dispatch;\n  dispatch({\n    type: action,\n    payload: payload,\n    meta: __assign({\n      resource: resource\n    }, rest)\n  });\n  var response = getResultFromCache(type, payload, resourceState);\n  dispatch({\n    type: action + \"_SUCCESS\",\n    payload: response,\n    requestPayload: payload,\n    meta: __assign(__assign({}, rest), {\n      resource: resource,\n      fetchResponse: getFetchType(type),\n      fetchStatus: FETCH_END,\n      fromCache: true\n    })\n  });\n  onSuccess && onSuccess(response);\n  return Promise.resolve(response);\n};","map":null,"metadata":{},"sourceType":"module"}