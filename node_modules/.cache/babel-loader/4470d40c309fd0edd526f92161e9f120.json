{"ast":null,"code":"import { useCallback } from 'react'; // @ts-ignore\n\nimport { parse } from 'query-string';\nimport { useLocation } from 'react-router-dom';\nimport { useCheckMinimumRequiredProps } from '../checkMinimumRequiredProps';\nimport { useCreate } from '../../dataProvider';\nimport { useNotify, useRedirect } from '../../sideEffect';\nimport { useSaveModifiers } from '../saveModifiers';\nimport { useTranslate } from '../../i18n';\nimport useVersion from '../useVersion';\nimport { CRUD_CREATE } from '../../actions';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\n/**\n * Prepare data for the Create view\n *\n * @param {Object} props The props passed to the Create component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Create view\n *\n * @example\n *\n * import { useCreateController } from 'react-admin';\n * import CreateView from './CreateView';\n *\n * const MyCreate = props => {\n *     const controllerProps = useCreateController(props);\n *     return <CreateView {...controllerProps} {...props} />;\n * }\n */\n\nexport var useCreateController = function useCreateController(props) {\n  useCheckMinimumRequiredProps('Create', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      hasEdit = props.hasEdit,\n      hasShow = props.hasShow,\n      _a = props.record,\n      record = _a === void 0 ? {} : _a,\n      successMessage = props.successMessage,\n      onSuccess = props.onSuccess,\n      onFailure = props.onFailure,\n      transform = props.transform;\n  var resource = useResourceContext(props);\n  var location = useLocation();\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var recordToUse = getRecord(location, record);\n  var version = useVersion();\n\n  if (process.env.NODE_ENV !== 'production' && successMessage) {\n    console.log('<Create successMessage> prop is deprecated, use the onSuccess prop instead.');\n  }\n\n  var _b = useSaveModifiers({\n    onSuccess: onSuccess,\n    onFailure: onFailure,\n    transform: transform\n  }),\n      onSuccessRef = _b.onSuccessRef,\n      setOnSuccess = _b.setOnSuccess,\n      onFailureRef = _b.onFailureRef,\n      setOnFailure = _b.setOnFailure,\n      transformRef = _b.transformRef,\n      setTransform = _b.setTransform;\n\n  var _c = useCreate(resource),\n      create = _c[0],\n      saving = _c[1].loading;\n\n  var save = useCallback(function (data, redirectTo, _a) {\n    if (redirectTo === void 0) {\n      redirectTo = 'list';\n    }\n\n    var _b = _a === void 0 ? {} : _a,\n        onSuccessFromSave = _b.onSuccess,\n        onFailureFromSave = _b.onFailure,\n        transformFromSave = _b.transform;\n\n    return Promise.resolve(transformFromSave ? transformFromSave(data) : transformRef.current ? transformRef.current(data) : data).then(function (data) {\n      return create({\n        payload: {\n          data: data\n        }\n      }, {\n        action: CRUD_CREATE,\n        onSuccess: onSuccessFromSave ? onSuccessFromSave : onSuccessRef.current ? onSuccessRef.current : function (_a) {\n          var newRecord = _a.data;\n          notify(successMessage || 'ra.notification.created', 'info', {\n            smart_count: 1\n          });\n          redirect(redirectTo, basePath, newRecord.id, newRecord);\n        },\n        onFailure: onFailureFromSave ? onFailureFromSave : onFailureRef.current ? onFailureRef.current : function (error) {\n          notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning', {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          });\n        }\n      });\n    });\n  }, [transformRef, create, onSuccessRef, onFailureRef, notify, successMessage, redirect, basePath]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.create', {\n    name: getResourceLabel(resource, 1)\n  });\n  return {\n    loading: false,\n    loaded: true,\n    saving: saving,\n    defaultTitle: defaultTitle,\n    onFailureRef: onFailureRef,\n    onSuccessRef: onSuccessRef,\n    transformRef: transformRef,\n    save: save,\n    setOnSuccess: setOnSuccess,\n    setOnFailure: setOnFailure,\n    setTransform: setTransform,\n    resource: resource,\n    basePath: basePath,\n    record: recordToUse,\n    redirect: getDefaultRedirectRoute(hasShow, hasEdit),\n    version: version\n  };\n};\nexport var getRecord = function getRecord(_a, record) {\n  var state = _a.state,\n      search = _a.search;\n\n  if (record === void 0) {\n    record = {};\n  }\n\n  if (state && state.record) {\n    return state.record;\n  }\n\n  if (search) {\n    try {\n      var searchParams = parse(search);\n\n      if (searchParams.source) {\n        if (Array.isArray(searchParams.source)) {\n          console.error(\"Failed to parse location search parameter '\" + search + \"'. To pre-fill some fields in the Create form, pass a stringified source parameter (e.g. '?source={\\\"title\\\":\\\"foo\\\"}')\");\n          return;\n        }\n\n        return JSON.parse(searchParams.source);\n      }\n    } catch (e) {\n      console.error(\"Failed to parse location search parameter '\" + search + \"'. To pre-fill some fields in the Create form, pass a stringified source parameter (e.g. '?source={\\\"title\\\":\\\"foo\\\"}')\");\n    }\n  }\n\n  return record;\n};\n\nvar getDefaultRedirectRoute = function getDefaultRedirectRoute(hasShow, hasEdit) {\n  if (hasEdit) {\n    return 'edit';\n  }\n\n  if (hasShow) {\n    return 'show';\n  }\n\n  return 'list';\n};","map":null,"metadata":{},"sourceType":"module"}