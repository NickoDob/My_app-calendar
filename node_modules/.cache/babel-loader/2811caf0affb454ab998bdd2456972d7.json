{"ast":null,"code":"import { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {}; // keep a cache of already fetched permissions to initialize state for new\n// components and avoid a useless rerender if the permissions haven't changed\n\nvar alreadyFetchedPermissions = {\n  '{}': undefined\n};\n/**\r\n * Hook for getting user permissions without the loading state.\r\n *\r\n * When compared to usePermissions, this hook doesn't cause a re-render\r\n * when the permissions haven't changed since the last call.\r\n *\r\n * This hook doesn't handle the loading state.\r\n *\r\n * @see usePermissions\r\n *\r\n * Calls the authProvider.getPermissions() method asynchronously.\r\n * If the authProvider returns a rejected promise, returns empty permissions.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start:   { permissions: [previously fetched permissions for these params] }\r\n * - success: { permissions: [permissions returned by the authProvider (usually the same as on start)] }\r\n * - error:   { error: [error from provider] }\r\n *\r\n * Useful to enable features based on user permissions\r\n *\r\n * @param {Object} params Any params you want to pass to the authProvider\r\n *\r\n * @returns The current auth check state. Destructure as { permissions, error }.\r\n *\r\n * @example\r\n *     import { usePermissionsOptimized } from 'react-admin';\r\n *\r\n *     const PostDetail = props => {\r\n *         const { permissions } = usePermissionsOptimized();\r\n *         if (permissions !== 'editor') {\r\n *             return <Redirect to={`posts/${props.id}/show`} />\r\n *         } else {\r\n *             return <PostEdit {...props} />\r\n *         }\r\n *     };\r\n */\n\nvar usePermissionsOptimized = function usePermissionsOptimized(params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var key = JSON.stringify(params);\n\n  var _a = useSafeSetState({\n    permissions: alreadyFetchedPermissions[key]\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var getPermissions = useGetPermissions();\n  useEffect(function () {\n    getPermissions(params).then(function (permissions) {\n      if (!isEqual(permissions, state.permissions)) {\n        alreadyFetchedPermissions[key] = permissions;\n        setState({\n          permissions: permissions\n        });\n      }\n    }).catch(function (error) {\n      setState({\n        error: error\n      });\n    });\n  }, [getPermissions, key]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return state;\n};\n\nexport default usePermissionsOptimized;","map":null,"metadata":{},"sourceType":"module"}