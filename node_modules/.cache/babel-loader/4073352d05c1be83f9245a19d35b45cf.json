{"ast":null,"code":"import inflection from 'inflection';\nimport { useStore } from 'react-redux';\nimport { getResources } from '../reducer';\nimport { useTranslate } from '../i18n';\n/**\r\n * A hook which returns function to get a translated resource name. It will use the label option of the `Resource` component if it was provided.\r\n *\r\n * @returns {GetResourceLabel} A function which takes a resource name and an optional number indicating the number of items (used for pluralization) and returns a translated string.\r\n * @example\r\n * const Menu = () => {\r\n *     const resources = useSelector(getResources, shallowEqual);\r\n *     const getResourceLabel = useGetResourceLabel();\r\n *\r\n *     return (\r\n *         <ul>\r\n *             {resources.map(resource => (\r\n *                 <li key={resource.name}>\r\n *                     {getResourceLabel(resource.name, 2)}\r\n *                 </li>\r\n *             ))}\r\n *         </ul>\r\n *     )\r\n * }\r\n */\n\nexport var useGetResourceLabel = function useGetResourceLabel() {\n  var store = useStore();\n  var translate = useTranslate();\n  return function (resource, count) {\n    if (count === void 0) {\n      count = 2;\n    }\n\n    var resourceDefinition = getResources(store.getState()).find(function (r) {\n      return (r === null || r === void 0 ? void 0 : r.name) === resource;\n    });\n    var label = translate(\"resources.\" + resource + \".name\", {\n      smart_count: count,\n      _: resourceDefinition && resourceDefinition.options && resourceDefinition.options.label ? translate(resourceDefinition.options.label, {\n        smart_count: count,\n        _: resourceDefinition.options.label\n      }) : inflection.humanize(count > 1 ? inflection.pluralize(resource) : inflection.singularize(resource))\n    });\n    return label;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}