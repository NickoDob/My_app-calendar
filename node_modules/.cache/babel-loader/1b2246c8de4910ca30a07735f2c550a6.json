{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../sideEffect';\nimport { useHistory } from 'react-router';\nvar timer;\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfAccessDenied(error);\n *                  notify('server error', 'warning');\n *              })\n *     }, []);\n *     // ...\n * }\n */\n\nvar useLogoutIfAccessDenied = function useLogoutIfAccessDenied() {\n  var authProvider = useAuthProvider();\n  var logout = useLogout();\n  var notify = useNotify();\n  var history = useHistory();\n  var logoutIfAccessDenied = useCallback(function (error, disableNotification) {\n    return authProvider.checkError(error).then(function () {\n      return false;\n    }).catch(function (e) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logoutUser, shouldNotify, redirectTo;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          logoutUser = (_a = e === null || e === void 0 ? void 0 : e.logoutUser) !== null && _a !== void 0 ? _a : true; //manual debounce\n\n          if (timer) {\n            // side effects already triggered in this tick, exit\n            return [2\n            /*return*/\n            , true];\n          }\n\n          timer = setTimeout(function () {\n            timer = undefined;\n          }, 0);\n          shouldNotify = !(disableNotification || e && e.message === false || error && error.message === false);\n\n          if (shouldNotify) {\n            // notify only if not yet logged out\n            authProvider.checkAuth({}).then(function () {\n              if (logoutUser) {\n                notify('ra.notification.logged_out', 'warning');\n              } else {\n                notify('ra.notification.not_authorized', 'warning');\n              }\n            }).catch(function () {});\n          }\n\n          redirectTo = e && e.redirectTo ? e.redirectTo : error && error.redirectTo ? error.redirectTo : undefined;\n\n          if (logoutUser) {\n            logout({}, redirectTo);\n          } else {\n            history.push(redirectTo);\n          }\n\n          return [2\n          /*return*/\n          , true];\n        });\n      });\n    });\n  }, [authProvider, logout, notify, history]);\n  return authProvider ? logoutIfAccessDenied : logoutIfAccessDeniedWithoutProvider;\n};\n\nvar logoutIfAccessDeniedWithoutProvider = function logoutIfAccessDeniedWithoutProvider() {\n  return Promise.resolve(false);\n};\n\nexport default useLogoutIfAccessDenied;","map":null,"metadata":{},"sourceType":"module"}