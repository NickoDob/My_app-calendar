{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { indexById, removeEmpty, useSafeSetState } from '../util';\nimport usePaginationState from './usePaginationState';\nimport useSortState from './useSortState';\nimport useSelectionState from './useSelectionState';\n/**\r\n * Handle filtering, sorting and pagination on local data.\r\n *\r\n * Returns the data and callbacks expected by <ListContext>.\r\n *\r\n * @example\r\n * const data = [\r\n *     { id: 1, name: 'Arnold' },\r\n *     { id: 2, name: 'Sylvester' },\r\n *     { id: 3, name: 'Jean-Claude' },\r\n * ]\r\n * const ids = [1, 2, 3];\r\n *\r\n * const MyComponent = () => {\r\n *     const listContext = useList({\r\n *         initialData: data,\r\n *         initialIds: ids,\r\n *         basePath: '/resource';\r\n *         resource: 'resource';\r\n *     });\r\n *     return (\r\n *         <ListContextProvider value={listContext}>\r\n *             <Datagrid>\r\n *                 <TextField source=\"id\" />\r\n *                 <TextField source=\"name\" />\r\n *             </Datagrid>\r\n *         </ListContextProvider>\r\n *     );\r\n * };\r\n *\r\n * @param {UseListOptions} props\r\n * @param {Record[]} props.data An array of records\r\n * @param {Identifier[]} props.ids An array of the record identifiers\r\n * @param {Boolean} props.loaded: A boolean indicating whether the data has been loaded at least once\r\n * @param {Boolean} props.loading: A boolean indicating whether the data is being loaded\r\n * @param {Error | String} props.error: Optional. The error if any occured while loading the data\r\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\r\n * @param {Number} props.page: Optional. The initial page index\r\n * @param {Number} props.perPage: Optional. The initial page size\r\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\r\n */\n\nexport var useList = function useList(props) {\n  var data = props.data,\n      error = props.error,\n      _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      ids = props.ids,\n      loaded = props.loaded,\n      loading = props.loading,\n      _b = props.page,\n      initialPage = _b === void 0 ? 1 : _b,\n      _c = props.perPage,\n      initialPerPage = _c === void 0 ? 1000 : _c,\n      _d = props.sort,\n      initialSort = _d === void 0 ? defaultSort : _d;\n\n  var _e = useSafeSetState(loading),\n      loadingState = _e[0],\n      setLoadingState = _e[1];\n\n  var _f = useSafeSetState(loaded),\n      loadedState = _f[0],\n      setLoadedState = _f[1];\n\n  var _g = useSafeSetState(function () {\n    return {\n      data: indexById(data),\n      ids: ids\n    };\n  }),\n      finalItems = _g[0],\n      setFinalItems = _g[1]; // pagination logic\n\n\n  var _h = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      page = _h.page,\n      setPage = _h.setPage,\n      perPage = _h.perPage,\n      setPerPage = _h.setPerPage; // sort logic\n\n\n  var _j = useSortState(initialSort),\n      sort = _j.sort,\n      setSortObject = _j.setSort;\n\n  var setSort = useCallback(function (field, order) {\n    if (order === void 0) {\n      order = 'ASC';\n    }\n\n    setSortObject({\n      field: field,\n      order: order\n    });\n    setPage(1);\n  }, [setPage, setSortObject]); // selection logic\n\n  var _k = useSelectionState(),\n      selectedIds = _k.selectedIds,\n      onSelect = _k.onSelect,\n      onToggleItem = _k.onToggleItem,\n      onUnselectItems = _k.onUnselectItems; // filter logic\n\n\n  var filterRef = useRef(filter);\n\n  var _l = useSafeSetState({}),\n      displayedFilters = _l[0],\n      setDisplayedFilters = _l[1];\n\n  var _m = useSafeSetState(filter),\n      filterValues = _m[0],\n      setFilterValues = _m[1];\n\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n\n      return removeEmpty(__assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a)));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n\n    if (displayedFilters) {\n      setDisplayedFilters(displayedFilters);\n    }\n\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]); // handle filter prop change\n\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  }); // We do all the data processing (filtering, sorting, paginating) client-side\n\n  useEffect(function () {\n    if (!loaded) return; // 1. filter\n\n    var tempData = data.filter(function (record) {\n      return Object.entries(filterValues).every(function (_a) {\n        var filterName = _a[0],\n            filterValue = _a[1];\n        var recordValue = get(record, filterName);\n        var result = Array.isArray(recordValue) ? Array.isArray(filterValue) ? recordValue.some(function (item) {\n          return filterValue.includes(item);\n        }) : recordValue.includes(filterValue) : Array.isArray(filterValue) ? filterValue.includes(recordValue) : filterValue == recordValue; // eslint-disable-line eqeqeq\n\n        return result;\n      });\n    }); // 2. sort\n\n    if (sort.field) {\n      tempData = tempData.sort(function (a, b) {\n        if (get(a, sort.field) > get(b, sort.field)) {\n          return sort.order === 'ASC' ? 1 : -1;\n        }\n\n        if (get(a, sort.field) < get(b, sort.field)) {\n          return sort.order === 'ASC' ? -1 : 1;\n        }\n\n        return 0;\n      });\n    } // 3. paginate\n\n\n    tempData = tempData.slice((page - 1) * perPage, page * perPage);\n    var finalData = indexById(tempData);\n    var finalIds = tempData.filter(function (data) {\n      return typeof data !== 'undefined';\n    }).map(function (data) {\n      return data.id;\n    });\n    setFinalItems({\n      data: finalData,\n      ids: finalIds\n    });\n  }, [data, filterValues, loaded, page, perPage, setFinalItems, sort.field, sort.order]);\n  useEffect(function () {\n    if (loaded !== loadedState) {\n      setLoadedState(loaded);\n    }\n  }, [loaded, loadedState, setLoadedState]);\n  useEffect(function () {\n    if (loading !== loadingState) {\n      setLoadingState(loading);\n    }\n  }, [loading, loadingState, setLoadingState]);\n  return {\n    currentSort: sort,\n    data: finalItems.data,\n    error: error,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    ids: finalItems.ids,\n    loaded: loadedState,\n    loading: loadingState,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: finalItems.ids.length\n  };\n};\nvar defaultFilter = {};\nvar defaultSort = {\n  field: null,\n  order: null\n};","map":null,"metadata":{},"sourceType":"module"}