{"ast":null,"code":"import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\r\n * Hook for getting the authentication status\r\n *\r\n * Calls the authProvider.checkAuth() method asynchronously.\r\n *\r\n * The return value updates according to the authProvider request state:\r\n *\r\n * - loading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\r\n * - loaded: the opposite of loading.\r\n * - authenticated: true while loading. then true or false depending on the authProvider response.\r\n *\r\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\r\n * instead of the useAuthenticated() hook.\r\n *\r\n * You can render different content depending on the authenticated status.\r\n *\r\n * @see useAuthenticated()\r\n *\r\n * @param {Object} params Any params you want to pass to the authProvider\r\n *\r\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\r\n *\r\n * @example\r\n * import { useAuthState, Loading } from 'react-admin';\r\n *\r\n * const MyPage = () => {\r\n *     const { loading, authenticated } = useAuthState();\r\n *     if (loading) {\r\n *         return <Loading />;\r\n *     }\r\n *     if (authenticated) {\r\n *        return <AuthenticatedContent />;\r\n *     }\r\n *     return <AnonymousContent />;\r\n * };\r\n */\n\nvar useAuthState = function useAuthState(params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    loading: true,\n    loaded: false,\n    authenticated: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, false).then(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, setState]);\n  return state;\n};\n\nexport default useAuthState;","map":null,"metadata":{},"sourceType":"module"}