{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * Uses a special cache to avoid showing an empty list while re-fetching the\n * list after changing params.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMainList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetMainList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\n\nexport var useGetMainList = function useGetMainList(resource, pagination, sort, filter, options) {\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n  var memo = useRef({});\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, // ids and data selector\n  function (state) {\n    var ids = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids']); // default value undefined\n\n    var total = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']); // default value undefined\n    // When the user changes the page/sort/filter, the list of ids from\n    // the cached requests is empty. To avoid rendering an empty list\n    // at that moment, we override the ids and total with the latest\n    // loaded ones.\n\n    var mainIds = get(state.admin.resources, [resource, 'list', 'ids']); // default value [] (see list.ids reducer)\n    // Since the total can be empty during the loading phase\n    // We need to override that total with the latest loaded one\n\n    var mainTotal = get(state.admin.resources, [resource, 'list', 'total']); // default value null (see list.total reducer)\n    // Is [] for a page that was never loaded\n\n    var finalIds = typeof ids === 'undefined' ? mainIds : ids; // Is null for a page that was never loaded.\n\n    var finalTotal = typeof total === 'undefined' ? mainTotal : total;\n    var allRecords = get(state.admin.resources, [resource, 'data'], defaultData); // poor man's useMemo inside a hook using a ref\n\n    if (memo.current.finalIds !== finalIds || memo.current.finalTotal !== finalTotal || memo.current.allRecords !== allRecords) {\n      var result = {\n        finalIds: finalIds,\n        finalTotal: finalTotal,\n        allRecords: allRecords\n      };\n      memo.current = {\n        finalIds: finalIds,\n        finalTotal: finalTotal,\n        allRecords: allRecords,\n        result: result\n      };\n    }\n\n    return memo.current.result;\n  }, function () {\n    return null;\n  }, isDataLoaded),\n      _b = _a.data,\n      finalIds = _b.finalIds,\n      finalTotal = _b.finalTotal,\n      allRecords = _b.allRecords,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var data = useMemo(function () {\n    return typeof finalIds === 'undefined' ? defaultData : finalIds.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [finalIds, allRecords]);\n  return {\n    data: data,\n    ids: typeof finalIds === 'undefined' ? defaultIds : finalIds,\n    total: finalTotal,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\n\nvar isDataLoaded = function isDataLoaded(data) {\n  return data.finalTotal != null;\n}; // null or undefined","map":null,"metadata":{},"sourceType":"module"}