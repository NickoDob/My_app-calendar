{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemIcon, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport { linkToRecord, sanitizeListRestProps, useListContext } from 'ra-core';\nimport SimpleListLoading from './SimpleListLoading';\nvar useStyles = makeStyles({\n  tertiary: {\n    float: 'right',\n    opacity: 0.541176\n  }\n}, {\n  name: 'RaSimpleList'\n});\n/**\r\n * The <SimpleList> component renders a list of records as a material-ui <List>.\r\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\r\n *\r\n * Also widely used on Mobile.\r\n *\r\n * Props:\r\n * - primaryText: function returning a React element (or some text) based on the record\r\n * - secondaryText: same\r\n * - tertiaryText: same\r\n * - leftAvatar: function returning a React element based on the record\r\n * - leftIcon: same\r\n * - rightAvatar: same\r\n * - rightIcon: same\r\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\r\n * - rowStyle: function returning a style object based on (record, index)\r\n *\r\n * @example // Display all posts as a List\r\n * const postRowStyle = (record, index) => ({\r\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\r\n * });\r\n * export const PostList = (props) => (\r\n *     <List {...props}>\r\n *         <SimpleList\r\n *             primaryText={record => record.title}\r\n *             secondaryText={record => `${record.views} views`}\r\n *             tertiaryText={record =>\r\n *                 new Date(record.published_at).toLocaleDateString()\r\n *             }\r\n *             rowStyle={postRowStyle}\r\n *          />\r\n *     </List>\r\n * );\r\n */\n\nvar SimpleList = function SimpleList(props) {\n  var className = props.className,\n      classesOverride = props.classes,\n      hasBulkActions = props.hasBulkActions,\n      leftAvatar = props.leftAvatar,\n      leftIcon = props.leftIcon,\n      _a = props.linkType,\n      linkType = _a === void 0 ? 'edit' : _a,\n      primaryText = props.primaryText,\n      rightAvatar = props.rightAvatar,\n      rightIcon = props.rightIcon,\n      secondaryText = props.secondaryText,\n      tertiaryText = props.tertiaryText,\n      rowStyle = props.rowStyle,\n      rest = __rest(props, [\"className\", \"classes\", \"hasBulkActions\", \"leftAvatar\", \"leftIcon\", \"linkType\", \"primaryText\", \"rightAvatar\", \"rightIcon\", \"secondaryText\", \"tertiaryText\", \"rowStyle\"]);\n\n  var _b = useListContext(props),\n      basePath = _b.basePath,\n      data = _b.data,\n      ids = _b.ids,\n      loaded = _b.loaded,\n      total = _b.total;\n\n  var classes = useStyles(props);\n\n  if (loaded === false) {\n    return React.createElement(SimpleListLoading, {\n      classes: classes,\n      className: className,\n      hasLeftAvatarOrIcon: !!leftIcon || !!leftAvatar,\n      hasRightAvatarOrIcon: !!rightIcon || !!rightAvatar,\n      hasSecondaryText: !!secondaryText,\n      hasTertiaryText: !!tertiaryText\n    });\n  }\n\n  var renderAvatar = function renderAvatar(id, avatarCallback) {\n    var avatarValue = avatarCallback(data[id], id);\n\n    if (typeof avatarValue === 'string' && (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))) {\n      return React.createElement(Avatar, {\n        src: avatarValue\n      });\n    } else {\n      return React.createElement(Avatar, null, avatarValue);\n    }\n  };\n\n  return total > 0 && React.createElement(List, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), ids.map(function (id, rowIndex) {\n    return React.createElement(LinkOrNot, {\n      linkType: linkType,\n      basePath: basePath,\n      id: id,\n      key: id,\n      record: data[id]\n    }, React.createElement(ListItem, {\n      button: !!linkType,\n      style: rowStyle ? rowStyle(data[id], rowIndex) : undefined\n    }, leftIcon && React.createElement(ListItemIcon, null, leftIcon(data[id], id)), leftAvatar && React.createElement(ListItemAvatar, null, renderAvatar(id, leftAvatar)), React.createElement(ListItemText, {\n      primary: React.createElement(\"div\", null, primaryText(data[id], id), tertiaryText && React.createElement(\"span\", {\n        className: classes.tertiary\n      }, tertiaryText(data[id], id))),\n      secondary: secondaryText && secondaryText(data[id], id)\n    }), (rightAvatar || rightIcon) && React.createElement(ListItemSecondaryAction, null, rightAvatar && React.createElement(Avatar, null, renderAvatar(id, rightAvatar)), rightIcon && React.createElement(ListItemIcon, null, rightIcon(data[id], id)))));\n  }));\n};\n\nSimpleList.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  leftAvatar: PropTypes.func,\n  leftIcon: PropTypes.func,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  primaryText: PropTypes.func,\n  rightAvatar: PropTypes.func,\n  rightIcon: PropTypes.func,\n  secondaryText: PropTypes.func,\n  tertiaryText: PropTypes.func,\n  rowStyle: PropTypes.func\n};\nvar useLinkOrNotStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n    color: 'inherit'\n  }\n}, {\n  name: 'RaLinkOrNot'\n});\n\nvar LinkOrNot = function LinkOrNot(_a) {\n  var classesOverride = _a.classes,\n      linkType = _a.linkType,\n      basePath = _a.basePath,\n      id = _a.id,\n      children = _a.children,\n      record = _a.record;\n  var classes = useLinkOrNotStyles({\n    classes: classesOverride\n  });\n  var link = typeof linkType === 'function' ? linkType(record, id) : linkType;\n  return link === 'edit' || link === true ? React.createElement(Link, {\n    to: linkToRecord(basePath, id),\n    className: classes.link\n  }, children) : link === 'show' ? React.createElement(Link, {\n    to: linkToRecord(basePath, id) + \"/show\",\n    className: classes.link\n  }, children) : React.createElement(\"span\", null, children);\n};\n\nexport default SimpleList;","map":null,"metadata":{},"sourceType":"module"}