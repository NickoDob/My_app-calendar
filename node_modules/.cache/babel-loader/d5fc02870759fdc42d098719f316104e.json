{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { sanitizeListRestProps, useListContext } from 'ra-core';\nimport FilterForm from './FilterForm';\nimport FilterButton from './FilterButton';\nvar useStyles = makeStyles({\n  button: {},\n  form: {}\n}, {\n  name: 'RaFilter'\n});\n/**\r\n * Filter button/form combo\r\n *\r\n * @example\r\n *\r\n * const PostFilter = (props) => (\r\n *     <Filter {...props}>\r\n *         <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n *         <TextInput label=\"Title\" source=\"title\" defaultValue=\"Hello, World!\" />\r\n *     </Filter>\r\n * );\r\n *\r\n * export const PostList = (props) => (\r\n *     <List {...props} filters={<PostFilter />}>\r\n *         ...\r\n *     </List>\r\n * );\r\n *\r\n */\n\nvar Filter = function Filter(props) {\n  var classes = useStyles(props);\n\n  var _a = useListContext(props),\n      resource = _a.resource,\n      showFilter = _a.showFilter,\n      hideFilter = _a.hideFilter,\n      setFilters = _a.setFilters,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues;\n\n  var renderButton = function renderButton() {\n    var classesOverride = props.classes,\n        context = props.context,\n        children = props.children,\n        variant = props.variant,\n        rest = __rest(props, [\"classes\", \"context\", \"children\", \"variant\"]);\n\n    return React.createElement(FilterButton, __assign({\n      className: classes.button,\n      resource: resource,\n      filters: React.Children.toArray(children),\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues\n    }, sanitizeListRestProps(rest)));\n  };\n\n  var renderForm = function renderForm() {\n    var classesOverride = props.classes,\n        context = props.context,\n        children = props.children,\n        rest = __rest(props, [\"classes\", \"context\", \"children\"]);\n\n    return React.createElement(FilterForm, __assign({\n      className: classes.form,\n      resource: resource,\n      filters: React.Children.toArray(children),\n      hideFilter: hideFilter,\n      displayedFilters: displayedFilters,\n      initialValues: filterValues,\n      setFilters: setFilters\n    }, sanitizeListRestProps(rest)));\n  };\n\n  return props.context === 'button' ? renderButton() : renderForm();\n};\n\nFilter.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  context: PropTypes.oneOf(['form', 'button'])\n};\nexport default Filter;","map":null,"metadata":{},"sourceType":"module"}