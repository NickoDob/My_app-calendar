{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useTranslate } from '../../i18n';\nimport { useEditController } from './useEditController';\n/**\r\n * Render prop version of the useEditController hook\r\n *\r\n * @see useEditController\r\n * @example\r\n *\r\n * const EditView = () => <div>...</div>\r\n * const MyEdit = props => (\r\n *     <EditController {...props}>\r\n *         {controllerProps => <EditView {...controllerProps} {...props} />}\r\n *     </EditController>\r\n * );\r\n */\n\nexport var EditController = function EditController(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var controllerProps = useEditController(props);\n  var translate = useTranslate(); // injected for backwards compatibility\n\n  return children(__assign({\n    translate: translate\n  }, controllerProps));\n};","map":null,"metadata":{},"sourceType":"module"}