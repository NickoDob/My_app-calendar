{"ast":null,"code":"import { useContext, useCallback } from 'react';\nimport { TranslationContext } from './TranslationContext';\nimport { useUpdateLoading } from '../loading';\nimport { useNotify } from '../sideEffect';\n/**\r\n * Set the current locale using the TranslationContext\r\n *\r\n * This hook re-renders when the locale changes.\r\n *\r\n * @example\r\n *\r\n * import { useSetLocale } from 'react-admin';\r\n *\r\n * const availableLanguages = {\r\n *     en: 'English',\r\n *     fr: 'FranÃ§ais',\r\n * }\r\n * const LanguageSwitcher = () => {\r\n *     const setLocale = useSetLocale();\r\n *     return (\r\n *         <ul>{\r\n *             Object.keys(availableLanguages).map(locale => {\r\n *                  <li key={locale} onClick={() => setLocale(locale)}>\r\n *                      {availableLanguages[locale]}\r\n *                  </li>\r\n *              })\r\n *         }</ul>\r\n *     );\r\n * }\r\n */\n\nvar useSetLocale = function useSetLocale() {\n  var _a = useContext(TranslationContext),\n      setLocale = _a.setLocale,\n      i18nProvider = _a.i18nProvider;\n\n  var _b = useUpdateLoading(),\n      startLoading = _b.startLoading,\n      stopLoading = _b.stopLoading;\n\n  var notify = useNotify();\n  return useCallback(function (newLocale) {\n    return new Promise(function (resolve) {\n      startLoading(); // so we systematically return a Promise for the messages\n      // i18nProvider may return a Promise for language changes,\n\n      resolve(i18nProvider.changeLocale(newLocale));\n    }).then(function () {\n      stopLoading();\n      setLocale(newLocale);\n    }).catch(function (error) {\n      stopLoading();\n      notify('ra.notification.i18n_error', 'warning');\n      console.error(error);\n    });\n  }, [i18nProvider, notify, setLocale, startLoading, stopLoading]);\n};\n\nexport default useSetLocale;","map":null,"metadata":{},"sourceType":"module"}