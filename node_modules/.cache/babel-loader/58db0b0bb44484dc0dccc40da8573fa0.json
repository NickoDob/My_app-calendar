{"ast":null,"code":"var fiveMinutes = 5 * 60 * 1000;\n/**\r\n * Wrap a dataProvider in a Proxy that modifies responses to add caching.\r\n *\r\n * This proxy adds a validUntil field to the response of read queries\r\n * (getList, getMany, getOne) so that the useDataProvider enables caching\r\n * for these calls.\r\n *\r\n * @param {DataProvider} dataProvider A data provider object\r\n * @param {number} duration Cache duration in milliseconds. Defaults to 5 minutes.\r\n *\r\n * @example\r\n *\r\n * import { cacheDataProviderProxy } from 'ra-core';\r\n *\r\n * const cacheEnabledDataProvider = cacheDataProviderProxy(dataProvider);\r\n */\n\nexport default (function (dataProvider, duration) {\n  if (duration === void 0) {\n    duration = fiveMinutes;\n  }\n\n  return new Proxy(dataProvider, {\n    get: function get(target, name) {\n      if (typeof name === 'symbol') {\n        return;\n      }\n\n      return function (resource, params) {\n        if (name === 'getList' || name === 'getMany' || name === 'getOne') {\n          // @ts-ignore\n          return dataProvider[name](resource, params).then(function (response) {\n            var validUntil = new Date();\n            validUntil.setTime(validUntil.getTime() + duration);\n            response.validUntil = validUntil;\n            return response;\n          });\n        }\n\n        return dataProvider[name](resource, params);\n      };\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}