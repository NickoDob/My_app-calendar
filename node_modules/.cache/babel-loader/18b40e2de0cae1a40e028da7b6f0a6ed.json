{"ast":null,"code":"import useVersion from '../useVersion';\nimport { useCheckMinimumRequiredProps } from '../checkMinimumRequiredProps';\nimport { useGetOne } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useNotify, useRedirect, useRefresh } from '../../sideEffect';\nimport { CRUD_GET_ONE } from '../../actions';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\n/**\r\n * Prepare data for the Show view\r\n *\r\n * @param {Object} props The props passed to the Show component.\r\n *\r\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\r\n *\r\n * @example\r\n *\r\n * import { useShowController } from 'react-admin';\r\n * import ShowView from './ShowView';\r\n *\r\n * const MyShow = props => {\r\n *     const controllerProps = useShowController(props);\r\n *     return <ShowView {...controllerProps} {...props} />;\r\n * }\r\n */\n\nexport var useShowController = function useShowController(props) {\n  useCheckMinimumRequiredProps('Show', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      hasCreate = props.hasCreate,\n      hasEdit = props.hasEdit,\n      hasList = props.hasList,\n      hasShow = props.hasShow,\n      id = props.id;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var version = useVersion();\n\n  var _a = useGetOne(resource, id, {\n    action: CRUD_GET_ONE,\n    onFailure: function onFailure() {\n      notify('ra.notification.item_doesnt_exist', 'warning');\n      redirect('list', basePath);\n      refresh();\n    }\n  }),\n      record = _a.data,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.show', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record\n  });\n  return {\n    loading: loading,\n    loaded: loaded,\n    defaultTitle: defaultTitle,\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    refetch: refetch,\n    hasCreate: hasCreate,\n    hasEdit: hasEdit,\n    hasList: hasList,\n    hasShow: hasShow,\n    version: version\n  };\n};","map":null,"metadata":{},"sourceType":"module"}