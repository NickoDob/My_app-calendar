{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { LinearProgress } from '../layout';\n/**\r\n * A container component that fetches records from another resource specified\r\n * by an array of *ids* in current record.\r\n *\r\n * You must define the fields to be passed to the iterator component as children.\r\n *\r\n * @example Display all the products of the current order as datagrid\r\n * // order = {\r\n * //   id: 123,\r\n * //   product_ids: [456, 457, 458],\r\n * // }\r\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\r\n *     <Datagrid>\r\n *         <TextField source=\"id\" />\r\n *         <TextField source=\"description\" />\r\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\r\n *         <EditButton />\r\n *     </Datagrid>\r\n * </ReferenceArrayField>\r\n *\r\n * @example Display all the categories of the current product as a list of chips\r\n * // product = {\r\n * //   id: 456,\r\n * //   category_ids: [11, 22, 33],\r\n * // }\r\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\r\n *     <SingleFieldList>\r\n *         <ChipField source=\"name\" />\r\n *     </SingleFieldList>\r\n * </ReferenceArrayField>\r\n *\r\n * By default, restricts the displayed values to 1000. You can extend this limit\r\n * by setting the `perPage` prop.\r\n *\r\n * @example\r\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\r\n *    ...\r\n * </ReferenceArrayField>\r\n *\r\n * By default, the field displays the results in the order in which they are referenced\r\n * (i.e. in the order of the list of ids). You can change this order\r\n * by setting the `sort` prop (an object with `field` and `order` properties).\r\n *\r\n * @example\r\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\r\n *    ...\r\n * </ReferenceArrayField>\r\n *\r\n * Also, you can filter the results to display only a subset of values. Use the\r\n * `filter` prop for that.\r\n *\r\n * @example\r\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\r\n *    ...\r\n * </ReferenceArrayField>\r\n */\n\nvar ReferenceArrayField = function ReferenceArrayField(props) {\n  var basePath = props.basePath,\n      children = props.children,\n      filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source;\n  var record = useRecordContext(props);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  var isReferenceDeclared = useSelector(function (state) {\n    return typeof state.admin.resources[props.reference] !== 'undefined';\n  });\n\n  if (!isReferenceDeclared) {\n    throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceArrayField reference=\\\"\" + props.reference + \"\\\">\");\n  }\n\n  var controllerProps = useReferenceArrayFieldController({\n    basePath: basePath,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props, controllerProps))));\n};\n\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    progress: {\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaReferenceArrayField'\n});\nexport var ReferenceArrayFieldView = function ReferenceArrayFieldView(props) {\n  var children = props.children,\n      pagination = props.pagination,\n      className = props.className,\n      resource = props.resource,\n      reference = props.reference,\n      rest = __rest(props, [\"children\", \"pagination\", \"className\", \"resource\", \"reference\"]);\n\n  var classes = useStyles(props);\n  var loaded = useListContext(props).loaded;\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return React.createElement(React.Fragment, null, cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), {\n    className: className,\n    resource: resource\n  })), ' ', pagination && props.total !== undefined && cloneElement(pagination, sanitizeFieldRestProps(rest)));\n};\nReferenceArrayFieldView.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.any,\n  className: PropTypes.string,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;","map":null,"metadata":{},"sourceType":"module"}