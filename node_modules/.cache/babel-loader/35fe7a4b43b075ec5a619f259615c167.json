{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\r\n * Higher-order component for fetching the dataProvider\r\n *\r\n * Injects a dataProvider object, which behaves just like the real dataProvider\r\n * (same methods returning a Promise). But it's actually a Proxy object, which\r\n * dispatches Redux actions along the process. The benefit is that react-admin\r\n * tracks the loading state when using this hook, and stores results in the\r\n * Redux store for future use.\r\n *\r\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\r\n * payload), the Proxy supports a third parameter for every call. It's an\r\n * object literal which may contain side effects, or make the action optimistic\r\n * (with undoable: true).\r\n *\r\n * @see useDataProvider\r\n *\r\n * @example\r\n *\r\n * import { withDataProvider, showNotification } from 'react-admin';\r\n *\r\n * class PostList extends Component {\r\n *     state = {\r\n *         posts: [],\r\n *     }\r\n *\r\n *     componentDidMount() {\r\n *         const { dataProvider, dispatch } = this.props;\r\n *         dataProvider.getList('posts', { filter: { status: 'pending' }})\r\n *            .then(({ data: posts }) => this.setState({ posts }))\r\n *            .catch(error => dispatch(showNotification(error.message, 'error')))\r\n *     }\r\n *\r\n *     render() {\r\n *         const { posts } = this.state;\r\n *         return (\r\n *            <Fragment>\r\n *                {posts.map((post, key) => <PostDetail post={post} key={key} />)}\r\n *            </Fragment>\r\n *         );\r\n *     }\r\n * }\r\n *\r\n * PostList.propTypes = {\r\n *     dataProvider: PropTypes.func.isRequired,\r\n * };\r\n *\r\n * export default withDataProvider(PostList);\r\n */\n\nvar withDataProvider = function withDataProvider(Component) {\n  return function (props) {\n    return React.createElement(Component, __assign({}, props, {\n      dataProvider: useDataProviderWithDeclarativeSideEffects()\n    }));\n  };\n};\n\nexport default withDataProvider;","map":null,"metadata":{},"sourceType":"module"}