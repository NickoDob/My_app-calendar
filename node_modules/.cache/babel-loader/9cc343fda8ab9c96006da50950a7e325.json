{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport useDataProvider from './useDataProvider';\nimport useVersion from '../controller/useVersion';\nimport getFetchType from './getFetchType';\nimport { useSafeSetState } from '../util/hooks';\nvar queriesThisTick = {};\n/**\r\n * Default cache selector. Allows to cache responses by default.\r\n *\r\n * By default, custom queries are dispatched as a CUSTOM_QUERY Redux action.\r\n * The useDataProvider hook dispatches a CUSTOM_QUERY_SUCCESS when the response\r\n * comes, and the customQueries reducer stores the result in the store.\r\n * This selector reads the customQueries store and acts as a response cache.\r\n */\n\nvar defaultDataSelector = function defaultDataSelector(query) {\n  return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), {\n      type: getFetchType(query.type)\n    }));\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].data : undefined;\n  };\n};\n\nvar defaultTotalSelector = function defaultTotalSelector(query) {\n  return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), {\n      type: getFetchType(query.type)\n    }));\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].total : null;\n  };\n};\n\nvar defaultIsDataLoaded = function defaultIsDataLoaded(data) {\n  return data !== undefined;\n};\n/**\r\n * Fetch the data provider through Redux, return the value from the store.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false, refetch }\r\n * - success: { data: [data from response], total: [total from response], loading: false, loaded: true, refetch }\r\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {Object} query\r\n * @param {string} query.type The verb passed to th data provider, e.g. 'getList', 'getOne'\r\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\r\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\r\n * @param {Object} options\r\n * @param {string} options.action Redux action type\r\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\r\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\r\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\r\n * @param {Function} dataSelector Redux selector to get the result. Required.\r\n * @param {Function} totalSelector Redux selector to get the total (optional, only for LIST queries)\r\n * @param {Function} isDataLoaded\r\n *\r\n * @returns The current request state. Destructure as { data, total, error, loading, loaded, refetch }.\r\n *\r\n * @example\r\n *\r\n * import { useQueryWithStore } from 'react-admin';\r\n *\r\n * const UserProfile = ({ record }) => {\r\n *     const { data, loading, error } = useQueryWithStore(\r\n *         {\r\n *             type: 'getOne',\r\n *             resource: 'users',\r\n *             payload: { id: record.id }\r\n *         },\r\n *         {},\r\n *         state => state.admin.resources.users.data[record.id]\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <div>User {data.username}</div>;\r\n * };\r\n */\n\n\nexport var useQueryWithStore = function useQueryWithStore(query, options, dataSelector, totalSelector, isDataLoaded) {\n  if (options === void 0) {\n    options = {\n      action: 'CUSTOM_QUERY'\n    };\n  }\n\n  if (dataSelector === void 0) {\n    dataSelector = defaultDataSelector(query);\n  }\n\n  if (totalSelector === void 0) {\n    totalSelector = defaultTotalSelector(query);\n  }\n\n  if (isDataLoaded === void 0) {\n    isDataLoaded = defaultIsDataLoaded;\n  }\n\n  var type = query.type,\n      resource = query.resource,\n      payload = query.payload;\n  var version = useVersion(); // used to allow force reload\n  // used to force a refetch without relying on version\n  // which might trigger other queries as well\n\n  var _a = useState(0),\n      innerVersion = _a[0],\n      setInnerVersion = _a[1];\n\n  var requestSignature = JSON.stringify({\n    query: query,\n    options: options,\n    version: version,\n    innerVersion: innerVersion\n  });\n  var requestSignatureRef = useRef(requestSignature);\n  var data = useSelector(dataSelector);\n  var total = useSelector(totalSelector);\n  var refetch = useCallback(function () {\n    setInnerVersion(function (prevInnerVersion) {\n      return prevInnerVersion + 1;\n    });\n  }, []);\n\n  var _b = useSafeSetState({\n    data: data,\n    total: total,\n    error: null,\n    loading: (options === null || options === void 0 ? void 0 : options.enabled) === false ? false : true,\n    loaded: (options === null || options === void 0 ? void 0 : options.enabled) === false ? false : isDataLoaded(data),\n    refetch: refetch\n  }),\n      state = _b[0],\n      setState = _b[1];\n\n  useEffect(function () {\n    if (requestSignatureRef.current !== requestSignature) {\n      // request has changed, reset the loading state\n      requestSignatureRef.current = requestSignature;\n      setState({\n        data: data,\n        total: total,\n        error: null,\n        loading: (options === null || options === void 0 ? void 0 : options.enabled) === false ? false : true,\n        loaded: (options === null || options === void 0 ? void 0 : options.enabled) === false ? false : isDataLoaded(data),\n        refetch: refetch\n      });\n    } else if (!isEqual(state.data, data) || state.total !== total) {\n      // the dataProvider response arrived in the Redux store\n      if (typeof total !== 'undefined' && isNaN(total)) {\n        console.error('Total from response is not a number. Please check your dataProvider or the API.');\n      } else {\n        setState(function (prevState) {\n          return __assign(__assign({}, prevState), {\n            data: data,\n            total: total,\n            loaded: true,\n            loading: false\n          });\n        });\n      }\n    }\n  }, [data, requestSignature, setState, state.data, state.total, total, isDataLoaded, refetch, options.enabled]);\n  var dataProvider = useDataProvider();\n  useEffect(function () {\n    // When several identical queries are issued during the same tick,\n    // we only pass one query to the dataProvider.\n    // To achieve that, the closure keeps a list of dataProvider promises\n    // issued this tick. Before calling the dataProvider, this effect\n    // checks if another effect has already issued a similar dataProvider\n    // call.\n    if (!queriesThisTick.hasOwnProperty(requestSignature)) {\n      queriesThisTick[requestSignature] = new Promise(function (resolve) {\n        dataProvider[type](resource, payload, options).then(function () {\n          // We don't care about the dataProvider response here, because\n          // it was already passed to SUCCESS reducers by the dataProvider\n          // hook, and the result is available from the Redux store\n          // through the data and total selectors.\n          // In addition, if the query is optimistic, the response\n          // will be empty, so it should not be used at all.\n          if (requestSignature !== requestSignatureRef.current) {\n            resolve(undefined);\n          }\n\n          resolve({\n            error: null,\n            loading: false,\n            loaded: (options === null || options === void 0 ? void 0 : options.enabled) === false ? false : true\n          });\n        }).catch(function (error) {\n          if (requestSignature !== requestSignatureRef.current) {\n            resolve(undefined);\n          }\n\n          resolve({\n            error: error,\n            loading: false,\n            loaded: false\n          });\n        });\n      }); // cleanup the list on next tick\n\n      setTimeout(function () {\n        delete queriesThisTick[requestSignature];\n      }, 0);\n    }\n\n    (function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var newState;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , queriesThisTick[requestSignature]];\n\n            case 1:\n              newState = _a.sent();\n              if (newState) setState(function (state) {\n                return __assign(__assign({}, state), newState);\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    })(); // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n\n  }, [requestSignature]); // eslint-disable-line\n\n  return state;\n};","map":null,"metadata":{},"sourceType":"module"}