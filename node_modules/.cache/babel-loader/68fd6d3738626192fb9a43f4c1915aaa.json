{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport { useTranslatableContext } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Labeled } from '../input';\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\n\nexport var TranslatableFieldsTabContent = function TranslatableFieldsTabContent(props) {\n  var basePath = props.basePath,\n      children = props.children,\n      _a = props.groupKey,\n      groupKey = _a === void 0 ? '' : _a,\n      locale = props.locale,\n      record = props.record,\n      resource = props.resource,\n      other = __rest(props, [\"basePath\", \"children\", \"groupKey\", \"locale\", \"record\", \"resource\"]);\n\n  var _b = useTranslatableContext(),\n      selectedLocale = _b.selectedLocale,\n      getLabel = _b.getLabel,\n      getSource = _b.getSource;\n\n  var classes = useStyles(props);\n  return React.createElement(\"div\", __assign({\n    role: \"tabpanel\",\n    hidden: selectedLocale !== locale,\n    id: \"translatable-content-\" + groupKey + locale,\n    \"aria-labelledby\": \"translatable-header-\" + groupKey + locale,\n    className: classes.root\n  }, other), Children.map(children, function (field) {\n    return field && isValidElement(field) ? React.createElement(\"div\", {\n      key: field.props.source\n    }, field.props.addLabel ? React.createElement(Labeled, {\n      record: record,\n      resource: resource,\n      basePath: basePath,\n      label: field.props.label,\n      source: field.props.source,\n      disabled: false\n    }, cloneElement(field, __assign(__assign({}, field.props), {\n      label: getLabel(field.props.source),\n      source: getSource(field.props.source, locale)\n    }))) : typeof field === 'string' ? field : cloneElement(field, __assign(__assign({}, field.props), {\n      label: getLabel(field.props.source),\n      source: getSource(field.props.source, locale)\n    }))) : null;\n  }));\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(2),\n      borderRadius: 0,\n      borderBottomLeftRadius: theme.shape.borderRadius,\n      borderBottomRightRadius: theme.shape.borderRadius,\n      border: \"1px solid \" + theme.palette.divider,\n      borderTop: 0\n    }\n  };\n}, {\n  name: 'RaTranslatableFieldsTabContent'\n});","map":null,"metadata":{},"sourceType":"module"}