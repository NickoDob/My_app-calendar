{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useQuery } from './useQuery';\n/**\r\n * Fetch the data provider and pass the result to a child function\r\n *\r\n * @param {Function} children Must be a function which will be called with an object containing the following keys: data, loading and error\r\n * @param {string} type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\r\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\r\n * @param {Object} payload The payload object, e.g; { post_id: 12 }\r\n * @param {Object} options\r\n * @param {string} options.action Redux action type\r\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\r\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\r\n *\r\n * This component also supports legacy side effects (e.g. { onSuccess: { refresh: true } })\r\n *\r\n * @example\r\n *\r\n * const UserProfile = ({ record }) => (\r\n *     <Query type=\"getOne\" resource=\"users\" payload={{ id: record.id }}>\r\n *         {({ data, loading, error }) => {\r\n *             if (loading) { return <Loading />; }\r\n *             if (error) { return <p>ERROR</p>; }\r\n *             return <div>User {data.username}</div>;\r\n *         }}\r\n *     </Query>\r\n * );\r\n *\r\n * @example\r\n *\r\n * const payload = {\r\n *    pagination: { page: 1, perPage: 10 },\r\n *    sort: { field: 'username', order: 'ASC' },\r\n * };\r\n * const UserList = () => (\r\n *     <Query type=\"getList\" resource=\"users\" payload={payload}>\r\n *         {({ data, total, loading, error }) => {\r\n *             if (loading) { return <Loading />; }\r\n *             if (error) { return <p>ERROR</p>; }\r\n *             return (\r\n *                 <div>\r\n *                     <p>Total users: {total}</p>\r\n *                     <ul>\r\n *                         {data.map(user => <li key={user.username}>{user.username}</li>)}\r\n *                     </ul>\r\n *                 </div>\r\n *             );\r\n *         }}\r\n *     </Query>\r\n * );\r\n */\n\nvar Query = function Query(_a) {\n  var children = _a.children,\n      type = _a.type,\n      resource = _a.resource,\n      payload = _a.payload,\n      // Provides an undefined onSuccess just so the key `onSuccess` is defined\n  // This is used to detect options in useDataProvider\n  _b = _a.options,\n      // Provides an undefined onSuccess just so the key `onSuccess` is defined\n  // This is used to detect options in useDataProvider\n  options = _b === void 0 ? {\n    onSuccess: undefined\n  } : _b;\n  return children(useQuery({\n    type: type,\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    withDeclarativeSideEffectsSupport: true\n  })));\n};\n\nexport default Query;","map":null,"metadata":{},"sourceType":"module"}