{"ast":null,"code":"import * as React from 'react';\nimport inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString } from './assertions';\n\nvar DefaultComponent = function DefaultComponent() {\n  return React.createElement(\"span\", null, \";\");\n};\n\nvar defaultType = {\n  type: DefaultComponent,\n  representation: function representation() {\n    return '<DefaultComponent />';\n  }\n};\nvar defaultTypes = {\n  array: defaultType,\n  boolean: defaultType,\n  date: defaultType,\n  email: defaultType,\n  id: defaultType,\n  number: defaultType,\n  reference: defaultType,\n  referenceArray: defaultType,\n  richText: defaultType,\n  string: defaultType,\n  url: defaultType\n};\n\nvar hasType = function hasType(type, types) {\n  return typeof types[type] !== 'undefined';\n};\n/**\r\n * Guesses an element based on an array of values\r\n *\r\n * @example\r\n *     inferElementFromValues(\r\n *         'address',\r\n *         ['2 Baker Street', '1 Downing street'],\r\n *         { number: NumberField, string: StringField }\r\n *     );\r\n *     // new InferredElement(<StringField source=\"address\" />)\r\n *\r\n * Types are optional: if a type isn't provided, the function falls back\r\n * to the nearest type.\r\n *\r\n * @example\r\n *     inferElementFromValues(\r\n *         'content',\r\n *         ['<h1>Hello</h1>'],\r\n *         { string: StringField } // no richText type\r\n *     );\r\n *     // new InferredElement(<StringField source=\"content\" />)\r\n *\r\n * Types can be disabled by passing a falsy value.\r\n *\r\n * @example\r\n *     inferElementFromValues(\r\n *         'content',\r\n *         ['<h1>Hello</h1>'],\r\n *         { string: StringField, richText: false }\r\n *     );\r\n *     // null\r\n *\r\n * @param {string} name Property name, e.g. 'date_of_birth'\r\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\r\n * @param {Object} types A set of components indexed by type. The string type is the only required one\r\n *\r\n * @return InferredElement\r\n */\n\n\nvar inferElementFromValues = function inferElementFromValues(name, values, types) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (types === void 0) {\n    types = defaultTypes;\n  }\n\n  if (name === 'id' && hasType('id', types)) {\n    return new InferredElement(types.id, {\n      source: name\n    });\n  }\n\n  if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceChild));\n  }\n\n  if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 2));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceChild));\n  }\n\n  if (name.substr(name.length - 4) === '_ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 4));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceArrayChild));\n  }\n\n  if (name.substr(name.length - 3) === 'Ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceArrayChild));\n  }\n\n  if (values.length === 0) {\n    // FIXME introspect further using name\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0]) && hasType('array', types)) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return types.array && new InferredElement(types.array, {\n        source: name\n      }, Object.keys(leafValues_1).map(function (leafName) {\n        return inferElementFromValues(leafName, leafValues_1[leafName], types);\n      }));\n    } // FIXME introspect further\n\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreBoolean(values) && hasType('boolean', types)) {\n    return new InferredElement(types.boolean, {\n      source: name\n    });\n  }\n\n  if (valuesAreDate(values) && hasType('date', types)) {\n    return new InferredElement(types.date, {\n      source: name\n    });\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' && hasType('email', types)) {\n      return new InferredElement(types.email, {\n        source: name\n      });\n    }\n\n    if (name === 'url' && hasType('url', types)) {\n      return new InferredElement(types.url, {\n        source: name\n      });\n    }\n\n    if (valuesAreDateString(values) && hasType('date', types)) {\n      return new InferredElement(types.date, {\n        source: name\n      });\n    }\n\n    if (valuesAreHtml(values) && hasType('richText', types)) {\n      return new InferredElement(types.richText, {\n        source: name\n      });\n    }\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if ((valuesAreInteger(values) || valuesAreNumeric(values)) && hasType('number', types)) {\n    return new InferredElement(types.number, {\n      source: name\n    });\n  }\n\n  if (valuesAreObject(values)) {\n    // we need to go deeper\n    // Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferElementFromValues(name + \".\" + propName_1, leafValues, types);\n  }\n\n  return new InferredElement(types.string, {\n    source: name\n  });\n};\n\nexport default inferElementFromValues;","map":null,"metadata":{},"sourceType":"module"}