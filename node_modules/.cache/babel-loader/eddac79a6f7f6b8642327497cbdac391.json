{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport { useFormContext } from './useFormContext';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\n\nexport var useFormGroup = function useFormGroup(name) {\n  var form = useForm();\n  var formContext = useFormContext();\n\n  var _a = useState({\n    dirty: false,\n    errors: undefined,\n    invalid: false,\n    pristine: true,\n    touched: false,\n    valid: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var unsubscribe = form.subscribe(function () {\n      var fields = formContext.getGroupFields(name);\n      var fieldStates = fields.map(function (field) {\n        return form.getFieldState(field);\n      }).filter(function (fieldState) {\n        return fieldState != undefined;\n      }); // eslint-disable-line\n\n      var newState = getFormGroupState(fieldStates);\n      setState(function (oldState) {\n        if (!isEqual(oldState, newState)) {\n          return newState;\n        }\n\n        return oldState;\n      });\n    }, {\n      errors: true,\n      invalid: true,\n      dirty: true,\n      pristine: true,\n      valid: true,\n      touched: true\n    });\n    return unsubscribe;\n  }, [form, formContext, name]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from final-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\n\nexport var getFormGroupState = function getFormGroupState(fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n\n    var newState = {\n      dirty: acc.dirty || fieldState.dirty,\n      errors: errors,\n      invalid: acc.invalid || fieldState.invalid,\n      pristine: acc.pristine && fieldState.pristine,\n      touched: acc.touched || fieldState.touched,\n      valid: acc.valid && fieldState.valid\n    };\n    return newState;\n  }, {\n    dirty: false,\n    errors: undefined,\n    invalid: false,\n    pristine: true,\n    valid: true,\n    touched: false\n  });\n};","map":null,"metadata":{},"sourceType":"module"}