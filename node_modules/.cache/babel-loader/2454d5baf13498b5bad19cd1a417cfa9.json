{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TablePagination, Toolbar, useMediaQuery } from '@material-ui/core';\nimport { useTranslate, useListPaginationContext, sanitizeListRestProps, ComponentPropType } from 'ra-core';\nimport DefaultPaginationActions from './PaginationActions';\nimport DefaultPaginationLimit from './PaginationLimit';\nvar emptyArray = [];\n\nvar Pagination = function Pagination(props) {\n  var rowsPerPageOptions = props.rowsPerPageOptions,\n      actions = props.actions,\n      limit = props.limit,\n      rest = __rest(props, [\"rowsPerPageOptions\", \"actions\", \"limit\"]);\n\n  var _a = useListPaginationContext(props),\n      loading = _a.loading,\n      page = _a.page,\n      perPage = _a.perPage,\n      total = _a.total,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage;\n\n  var translate = useTranslate();\n  var isSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var totalPages = useMemo(function () {\n    return Math.ceil(total / perPage) || 1;\n  }, [perPage, total]);\n  /**\n   * Warning: material-ui's page is 0-based\n   */\n\n  var handlePageChange = useCallback(function (event, page) {\n    event && event.stopPropagation();\n\n    if (page < 0 || page > totalPages - 1) {\n      throw new Error(translate('ra.navigation.page_out_of_boundaries', {\n        page: page + 1\n      }));\n    }\n\n    setPage(page + 1);\n  }, [totalPages, setPage, translate]);\n  var handlePerPageChange = useCallback(function (event) {\n    setPerPage(event.target.value);\n  }, [setPerPage]);\n  var labelDisplayedRows = useCallback(function (_a) {\n    var from = _a.from,\n        to = _a.to,\n        count = _a.count;\n    return translate('ra.navigation.page_range_info', {\n      offsetBegin: from,\n      offsetEnd: to,\n      total: count\n    });\n  }, [translate]); // Avoid rendering TablePagination if \"page\" value is invalid\n\n  if (total === null || total === 0 || page < 1 || page > totalPages) {\n    return loading ? React.createElement(Toolbar, {\n      variant: \"dense\"\n    }) : limit;\n  }\n\n  if (isSmall) {\n    return React.createElement(TablePagination, __assign({\n      count: total,\n      rowsPerPage: perPage,\n      page: page - 1,\n      onChangePage: handlePageChange,\n      rowsPerPageOptions: emptyArray,\n      component: \"span\",\n      labelDisplayedRows: labelDisplayedRows\n    }, sanitizeListRestProps(rest)));\n  }\n\n  return React.createElement(TablePagination, __assign({\n    count: total,\n    rowsPerPage: perPage,\n    page: page - 1,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handlePerPageChange,\n    ActionsComponent: actions,\n    component: \"span\",\n    labelRowsPerPage: translate('ra.navigation.page_rows_per_page'),\n    labelDisplayedRows: labelDisplayedRows,\n    rowsPerPageOptions: rowsPerPageOptions\n  }, sanitizeListRestProps(rest)));\n};\n\nPagination.propTypes = {\n  actions: ComponentPropType,\n  limit: PropTypes.element,\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number)\n};\nPagination.defaultProps = {\n  actions: DefaultPaginationActions,\n  limit: React.createElement(DefaultPaginationLimit, null),\n  rowsPerPageOptions: [5, 10, 25]\n};\nexport default React.memo(Pagination);","map":null,"metadata":{},"sourceType":"module"}