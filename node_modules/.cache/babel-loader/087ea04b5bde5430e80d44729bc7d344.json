{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nimport classnames from 'classnames';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\n/**\r\n * An Input component for a checkbox group, using an array of objects for the options\r\n *\r\n * Pass possible options as an array of objects in the 'choices' attribute.\r\n *\r\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\r\n * the 'optionValue' of 'choices' attribute objects.\r\n *\r\n * By default, the options are built from:\r\n *  - the 'id' property as the option value,\r\n *  - the 'name' property as the option text\r\n * @example\r\n * const choices = [\r\n *     { id: 12, name: 'Ray Hakt' },\r\n *     { id: 31, name: 'Ann Gullar' },\r\n *     { id: 42, name: 'Sean Phonee' },\r\n * ];\r\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\r\n *\r\n * You can also customize the properties to use for the option name and value,\r\n * thanks to the 'optionText' and 'optionValue' attributes.\r\n * @example\r\n * const choices = [\r\n *    { _id: 123, full_name: 'Leo Tolstoi' },\r\n *    { _id: 456, full_name: 'Jane Austen' },\r\n * ];\r\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\r\n *\r\n * `optionText` also accepts a function, so you can shape the option text at will:\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\r\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\r\n *\r\n * `optionText` also accepts a React Element, that will be cloned and receive\r\n * the related choice as the `record` prop. You can use Field components there.\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\r\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\r\n *\r\n * The choices are translated by default, so you can use translation identifiers as choices:\r\n * @example\r\n * const choices = [\r\n *    { id: 'programming', name: 'myroot.category.programming' },\r\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\r\n *    { id: 'photography', name: 'myroot.category.photography' },\r\n * ];\r\n *\r\n * However, in some cases (e.g. inside a `<ReferenceArrayInput>`), you may not want\r\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\r\n * @example\r\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\r\n *\r\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\r\n */\n\nvar CheckboxGroupInput = function CheckboxGroupInput(props) {\n  var _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      className = props.className,\n      classesOverride = props.classes,\n      format = props.format,\n      helperText = props.helperText,\n      label = props.label,\n      loaded = props.loaded,\n      loading = props.loading,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      options = props.options,\n      parse = props.parse,\n      resource = props.resource,\n      row = props.row,\n      source = props.source,\n      translate = props.translate,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      rest = __rest(props, [\"choices\", \"className\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n\n  var classes = useStyles(props);\n  warning(source === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the CheckboxGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n\n  var _c = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _c.id,\n      _d = _c.input,\n      finalFormOnChange = _d.onChange,\n      finalFormOnBlur = _d.onBlur,\n      value = _d.value,\n      isRequired = _c.isRequired,\n      _e = _c.meta,\n      error = _e.error,\n      submitError = _e.submitError,\n      touched = _e.touched;\n\n  var handleCheck = useCallback(function (event, isChecked) {\n    var newValue;\n\n    try {\n      // try to convert string value to number, e.g. '123'\n      newValue = JSON.parse(event.target.value);\n    } catch (e) {\n      // impossible to convert value, e.g. 'abc'\n      newValue = event.target.value;\n    }\n\n    if (isChecked) {\n      finalFormOnChange(__spreadArrays(value || [], [newValue]));\n    } else {\n      finalFormOnChange(value.filter(function (v) {\n        return v != newValue;\n      })); // eslint-disable-line eqeqeq\n    }\n\n    finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n  }, [finalFormOnChange, finalFormOnBlur, value]);\n\n  if (loading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: className,\n      isRequired: isRequired,\n      margin: margin\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!(error || submitError),\n    className: classnames(classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(FormGroup, {\n    row: row\n  }, choices.map(function (choice) {\n    return React.createElement(CheckboxGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      id: id,\n      onChange: handleCheck,\n      options: options,\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice,\n      value: value\n    });\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error || submitError,\n    helperText: helperText\n  })));\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var refetch = _a.refetch,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      loaded = _a.loaded,\n      touched = _a.touched,\n      rest = __rest(_a, [\"refetch\", \"setFilter\", \"setPagination\", \"setSort\", \"loaded\", \"touched\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 8px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n}, {\n  name: 'RaCheckboxGroupInput'\n});\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  source: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  row: PropTypes.bool,\n  resource: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nCheckboxGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  fullWidth: true,\n  row: true\n};\nexport default CheckboxGroupInput;","map":null,"metadata":{},"sourceType":"module"}