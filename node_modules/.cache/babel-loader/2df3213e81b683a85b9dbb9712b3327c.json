{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { memo, isValidElement } from 'react';\nimport { IconButton, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport { useTranslate, useListFilterContext } from 'ra-core';\nimport { shallowEqual } from 'react-redux';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    listItem: {\n      paddingLeft: '2em'\n    },\n    listItemText: {\n      margin: 0\n    }\n  };\n});\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@material-ui/core';\n * import MailIcon from '@material-ui/icons/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@material-ui/core';\n * import AccessTimeIcon from '@material-ui/icons/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\n\nvar FilterListItem = function FilterListItem(props) {\n  var label = props.label,\n      value = props.value;\n\n  var _a = useListFilterContext(),\n      filterValues = _a.filterValues,\n      setFilters = _a.setFilters;\n\n  var translate = useTranslate();\n  var classes = useStyles(props);\n  var isSelected = matches(pickBy(value, function (val) {\n    return typeof val !== 'undefined';\n  }))(filterValues);\n\n  var addFilter = function addFilter() {\n    setFilters(__assign(__assign({}, filterValues), value), null, false);\n  };\n\n  var removeFilter = function removeFilter() {\n    var keysToRemove = Object.keys(value);\n    var filters = Object.keys(filterValues).reduce(function (acc, key) {\n      var _a;\n\n      return keysToRemove.includes(key) ? acc : __assign(__assign({}, acc), (_a = {}, _a[key] = filterValues[key], _a));\n    }, {});\n    setFilters(filters, null, false);\n  };\n\n  var toggleFilter = function toggleFilter() {\n    return isSelected ? removeFilter() : addFilter();\n  };\n\n  return React.createElement(ListItem, {\n    button: true,\n    onClick: toggleFilter,\n    selected: isSelected,\n    className: classes.listItem\n  }, React.createElement(ListItemText, {\n    primary: isValidElement(label) ? label : translate(label, {\n      _: label\n    }),\n    className: classes.listItemText,\n    \"data-selected\": isSelected ? 'true' : 'false'\n  }), isSelected && React.createElement(ListItemSecondaryAction, null, React.createElement(IconButton, {\n    size: \"small\",\n    onClick: toggleFilter\n  }, React.createElement(CancelIcon, null))));\n};\n\nvar arePropsEqual = function arePropsEqual(prevProps, nextProps) {\n  return prevProps.label === nextProps.label && shallowEqual(prevProps.value, nextProps.value);\n};\n\nexport default memo(FilterListItem, arePropsEqual);","map":null,"metadata":{},"sourceType":"module"}