{"ast":null,"code":"import { createContext } from 'react';\n/**\r\n * Context to store the result of the useListController() hook.\r\n *\r\n * Use the useListContext() hook to read the context. That's what many\r\n * List components do in react-admin (e.g. <Datagrid>, <FilterForm>, <Pagination>).\r\n *\r\n * @typedef {Object} ListControllerProps\r\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\r\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g. [123, 456, ...]\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {boolean}  loaded boolean that is false until the data is available\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\r\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\r\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\r\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\r\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\r\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\r\n * @prop {string}   basePath deduced from the location, useful for action buttons\r\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n * @prop {Function} refetch a function for triggering a refetch of the list data\r\n *\r\n * @typedef Props\r\n * @prop {ListControllerProps} value\r\n *\r\n * @param {Props}\r\n *\r\n * @see useListController\r\n * @see useListContext\r\n *\r\n * @example\r\n *\r\n * import { useListController, ListContext } from 'ra-core';\r\n *\r\n * const List = props => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListContext.Provider value={controllerProps}>\r\n *             ...\r\n *         </ListContext.Provider>\r\n *     );\r\n * };\r\n */\n\nvar ListContext = createContext({\n  basePath: null,\n  currentSort: null,\n  data: null,\n  defaultTitle: null,\n  displayedFilters: null,\n  filterValues: null,\n  hasCreate: null,\n  hideFilter: null,\n  ids: null,\n  loaded: null,\n  loading: null,\n  onSelect: null,\n  onToggleItem: null,\n  onUnselectItems: null,\n  page: null,\n  perPage: null,\n  refetch: null,\n  resource: null,\n  selectedIds: null,\n  setFilters: null,\n  setPage: null,\n  setPerPage: null,\n  setSort: null,\n  showFilter: null,\n  total: null\n});\nListContext.displayName = 'ListContext';\nexport default ListContext;","map":null,"metadata":{},"sourceType":"module"}