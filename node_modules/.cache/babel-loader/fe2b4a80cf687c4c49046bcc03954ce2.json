{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext } from 'ra-core';\nimport { Typography } from '@material-ui/core';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\r\n * Display a value in an enumeration\r\n *\r\n * Pass possible options as an array of objects in the 'choices' attribute.\r\n *\r\n * @example\r\n * const choices = [\r\n *    { id: 'M', name: 'Male' },\r\n *    { id: 'F', name: 'Female' },\r\n * ];\r\n * <SelectField source=\"gender\" choices={choices} />\r\n *\r\n * By default, the text is built by\r\n * - finding a choice where the 'id' property equals the field value\r\n * - using the 'name' property as the option text\r\n *\r\n * You can also customize the properties to use for the value and text,\r\n * thanks to the 'optionValue' and 'optionText' attributes.\r\n *\r\n * @example\r\n * const choices = [\r\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\r\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\r\n * ];\r\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\r\n *\r\n * `optionText` also accepts a function, so you can shape the option text at will:\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\r\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\r\n *\r\n * `optionText` also accepts a React Element, that will be cloned and receive\r\n * the related choice as the `record` prop. You can use Field components there.\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\r\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\r\n *\r\n * The current choice is translated by default, so you can use translation identifiers as choices:\r\n * @example\r\n * const choices = [\r\n *    { id: 'M', name: 'myroot.gender.male' },\r\n *    { id: 'F', name: 'myroot.gender.female' },\r\n * ];\r\n *\r\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\r\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\r\n * @example\r\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\r\n *\r\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\r\n */\n\nexport var SelectField = memo(function (props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      choices = props.choices,\n      optionValue = props.optionValue,\n      optionText = props.optionText,\n      translateChoice = props.translateChoice,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n\n  var record = useRecordContext(props);\n  var value = get(record, source);\n\n  var _a = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue;\n\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText) : null;\n  }\n\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n});\nSelectField.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nSelectField.defaultProps = {\n  addLabel: true\n};\nSelectField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectField.displayName = 'SelectField';\nexport default SelectField;","map":null,"metadata":{},"sourceType":"module"}