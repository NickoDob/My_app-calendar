{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormHelperText, FormLabel, RadioGroup } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport get from 'lodash/get';\nimport { useInput, FieldTitle, warning } from 'ra-core';\nimport sanitizeInputRestProps from './sanitizeInputRestProps';\nimport InputHelperText from './InputHelperText';\nimport RadioButtonGroupInputItem from './RadioButtonGroupInputItem';\nimport Labeled from './Labeled';\nimport { LinearProgress } from '../layout';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    label: {\n      transform: 'translate(0, 5px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n}, {\n  name: 'RaRadioButtonGroupInput'\n});\n/**\r\n * An Input component for a radio button group, using an array of objects for the options\r\n *\r\n * Pass possible options as an array of objects in the 'choices' attribute.\r\n *\r\n * By default, the options are built from:\r\n *  - the 'id' property as the option value,\r\n *  - the 'name' property as the option text\r\n * @example\r\n * const choices = [\r\n *    { id: 'M', name: 'Male' },\r\n *    { id: 'F', name: 'Female' },\r\n * ];\r\n * <RadioButtonGroupInput source=\"gender\" choices={choices} />\r\n *\r\n * You can also customize the properties to use for the option name and value,\r\n * thanks to the 'optionText' and 'optionValue' attributes.\r\n * @example\r\n * const choices = [\r\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\r\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\r\n * ];\r\n * <RadioButtonGroupInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\r\n *\r\n * `optionText` also accepts a function, so you can shape the option text at will:\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\r\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\r\n *\r\n * `optionText` also accepts a React Element, that will be cloned and receive\r\n * the related choice as the `record` prop. You can use Field components there.\r\n * @example\r\n * const choices = [\r\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\r\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\r\n * ];\r\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\r\n * <RadioButtonGroupInput source=\"gender\" choices={choices} optionText={<FullNameField />}/>\r\n *\r\n * The choices are translated by default, so you can use translation identifiers as choices:\r\n * @example\r\n * const choices = [\r\n *    { id: 'M', name: 'myroot.gender.male' },\r\n *    { id: 'F', name: 'myroot.gender.female' },\r\n * ];\r\n *\r\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\r\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\r\n * @example\r\n * <RadioButtonGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\r\n *\r\n * The object passed as `options` props is passed to the material-ui <RadioButtonGroup> component\r\n */\n\nvar RadioButtonGroupInput = function RadioButtonGroupInput(props) {\n  var _a = props.choices,\n      choices = _a === void 0 ? [] : _a,\n      classesOverride = props.classes,\n      format = props.format,\n      helperText = props.helperText,\n      label = props.label,\n      loaded = props.loaded,\n      loading = props.loading,\n      _b = props.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      options = props.options,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      parse = props.parse,\n      resource = props.resource,\n      row = props.row,\n      source = props.source,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      rest = __rest(props, [\"choices\", \"classes\", \"format\", \"helperText\", \"label\", \"loaded\", \"loading\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"row\", \"source\", \"translateChoice\", \"validate\"]);\n\n  var classes = useStyles(props);\n  warning(source === undefined, \"If you're not wrapping the RadioButtonGroupInput inside a ReferenceInput, you must provide the source prop\");\n  warning(choices === undefined, \"If you're not wrapping the RadioButtonGroupInput inside a ReferenceInput, you must provide the choices prop\");\n\n  var _c = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _c.id,\n      isRequired = _c.isRequired,\n      meta = _c.meta,\n      input = _c.input;\n\n  var error = meta.error,\n      submitError = meta.submitError,\n      touched = meta.touched;\n\n  if (loading) {\n    return React.createElement(Labeled, {\n      id: id,\n      label: label,\n      source: source,\n      resource: resource,\n      className: rest.className,\n      isRequired: isRequired,\n      margin: margin,\n      meta: meta,\n      input: input\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!(error || submitError)\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(RadioGroup, __assign({\n    id: id,\n    row: row\n  }, options), choices.map(function (choice) {\n    return React.createElement(RadioButtonGroupInputItem, __assign({}, input, {\n      key: get(choice, optionValue),\n      choice: choice,\n      optionText: optionText,\n      optionValue: optionValue,\n      source: source,\n      translateChoice: translateChoice\n    }));\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error || submitError,\n    helperText: helperText\n  })));\n};\n\nRadioButtonGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.any),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nRadioButtonGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  row: true,\n  translateChoice: true\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var addLabel = _a.addLabel,\n      afterSubmit = _a.afterSubmit,\n      allowNull = _a.allowNull,\n      beforeSubmit = _a.beforeSubmit,\n      choices = _a.choices,\n      className = _a.className,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      data = _a.data,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formatOnBlur = _a.formatOnBlur,\n      isEqual = _a.isEqual,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      multiple = _a.multiple,\n      name = _a.name,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      ref = _a.ref,\n      reference = _a.reference,\n      refetch = _a.refetch,\n      render = _a.render,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      subscription = _a.subscription,\n      type = _a.type,\n      validateFields = _a.validateFields,\n      validation = _a.validation,\n      value = _a.value,\n      rest = __rest(_a, [\"addLabel\", \"afterSubmit\", \"allowNull\", \"beforeSubmit\", \"choices\", \"className\", \"crudGetMatching\", \"crudGetOne\", \"data\", \"filter\", \"filterToQuery\", \"formatOnBlur\", \"isEqual\", \"limitChoicesToValue\", \"multiple\", \"name\", \"pagination\", \"perPage\", \"ref\", \"reference\", \"refetch\", \"render\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"subscription\", \"type\", \"validateFields\", \"validation\", \"value\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nexport default RadioButtonGroupInput;","map":null,"metadata":{},"sourceType":"module"}