{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { cloneElement } from 'react';\nimport useAuthenticated from './useAuthenticated';\n/**\r\n * Restrict access to children to authenticated users.\r\n * Redirects anonymous users to the login page.\r\n *\r\n * Use it to decorate your custom page components to require\r\n * authentication.\r\n *\r\n * You can set additional `authParams` at will if your authProvider\r\n * requires it.\r\n *\r\n * @see useAuthenticated\r\n *\r\n * @example\r\n *     import { Authenticated } from 'react-admin';\r\n *\r\n *     const CustomRoutes = [\r\n *         <Route path=\"/foo\" render={() =>\r\n *             <Authenticated authParams={{ foo: 'bar' }}>\r\n *                 <Foo />\r\n *             </Authenticated>\r\n *         } />\r\n *     ];\r\n *     const App = () => (\r\n *         <Admin customRoutes={customRoutes}>\r\n *             ...\r\n *         </Admin>\r\n *     );\r\n */\n\nvar Authenticated = function Authenticated(_a) {\n  var authParams = _a.authParams,\n      children = _a.children,\n      location = _a.location,\n      // kept for backwards compatibility, unused\n  rest = __rest(_a, [\"authParams\", \"children\", \"location\"]);\n\n  useAuthenticated(authParams); // render the child even though the useAuthenticated() call isn't finished (optimistic rendering)\n  // the above hook will log out if the authProvider doesn't validate that the user is authenticated\n\n  return cloneElement(children, rest);\n};\n\nexport default Authenticated;","map":null,"metadata":{},"sourceType":"module"}